<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DataAnalysis</name>
    </assembly>
    <members>
        <member name="T:DataAnalysis.Basic.Interval`1">
            <summary>
            Modela un intervalo genérico de datos.
            </summary>
            <typeparam name="T">
            Tipo de dato del intervalo.
            </typeparam>
        </member>
        <member name="M:DataAnalysis.Basic.Interval`1.#ctor(`0,`0,System.Int32)">
            <summary>
            Crea un objeto de tipo Interval que incluye los margenes.
            </summary>
            <param name="leftMargin">Margen izquierdo.</param>
            <param name="rightMargin">Margen derecho.</param>
            <param name="id">Identificador del intervalo.</param>
        </member>
        <member name="M:DataAnalysis.Basic.Interval`1.#ctor(`0,`0,DataAnalysis.Basic.Interval{`0}.ClosureTypes,System.Int32)">
            <summary>
            Crea un objeto de tipo Interval.
            </summary>
            <param name="leftMargin">Margen izquierdo.</param>
            <param name="rightMargin">Margen derecho.</param>
            <param name="closureType">Tipe de cierre del intervalo.</param>
            <param name="id">Identificador del intervalo.</param>
        </member>
        <member name="M:DataAnalysis.Basic.Interval`1.IsValid">
            <summary>
            Determina si el intervalo es válido.
            </summary>
            <returns>
            True si el intervalo es válido, si no false.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.Interval`1.IsEmpty">
            <summary>
            Determina si el intervalo está vacío.
            </summary>
            <returns>
            True si el intervalo está vacío, si no false.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.Interval`1.GetHashCode">
            <summary>
            Devuelve el código Hash del intervalo
            </summary>
            <returns>Código Hash</returns>
        </member>
        <member name="M:DataAnalysis.Basic.Interval`1.Equals(System.Object)">
            <summary>
            Comprueba si dos intervalos son el mismo objeto.
            </summary>
            <param name="obj">Objeto de comparación</param>
            <returns>Resultado de la comprobación</returns>
        </member>
        <member name="M:DataAnalysis.Basic.Interval`1.op_Equality(DataAnalysis.Basic.Interval{`0},DataAnalysis.Basic.Interval{`0})">
            <summary>
            Compara si dos intervalos son iguales.
            </summary>
            <param name="i1">Primer intervalo</param>
            <param name="i2">Segundo intervalo</param>
            <returns>Valor de la comparación</returns>
        </member>
        <member name="M:DataAnalysis.Basic.Interval`1.op_Inequality(DataAnalysis.Basic.Interval{`0},DataAnalysis.Basic.Interval{`0})">
            <summary>
            Compara si dos intervalos son distintos.
            </summary>
            <param name="i1">Primer intervalo</param>
            <param name="i2">Segundo intervalo</param>
            <returns>Valor de la comparación</returns>
        </member>
        <member name="M:DataAnalysis.Basic.Interval`1.Contain(`0)">
            <summary>
            Determina si un valor está contenido en el intervalo.
            </summary>
            <param name="value">
            Valor a analizar.
            </param>
            <returns>
            True si el valor está contenido en el intervalo, 
            si no false.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.Interval`1.ToPMML">
            <summary>
            Crea el XML del intervalo.
            </summary>
            <returns>XElement</returns>
        </member>
        <member name="M:DataAnalysis.Basic.Interval`1.PMMLParse(System.Xml.Linq.XElement)">
            <summary>
            Carga el intervalo con los parámetros de un XElement.
            </summary>
            <param name="xInterval">XElement correspondiente a un intervalo.</param>
        </member>
        <member name="P:DataAnalysis.Basic.Interval`1.LeftMargin">
            <summary>
            Recibe o devuelve el valor del margen izquierdo.
            </summary>
        </member>
        <member name="P:DataAnalysis.Basic.Interval`1.RightMargin">
            <summary>
            Recibe o devuelve el valor del margen derecho.
            </summary>
        </member>
        <member name="P:DataAnalysis.Basic.Interval`1.Id">
            <summary>
            Recibe o devuelve el identificador del intervalo.
            </summary>
        </member>
        <member name="P:DataAnalysis.Basic.Interval`1.Closure">
            <summary>
            Recibe o devuelve el tipo de cierre que tiene el intervalo.
            </summary>
        </member>
        <member name="T:DataAnalysis.Basic.Interval`1.ClosureTypes">
            <summary>
            Tipos de cierre de un intervalo.
            </summary>
        </member>
        <member name="F:DataAnalysis.Basic.Interval`1.ClosureTypes.closedClosed">
            <summary>
            Se incluyen ambos extremos de los intervalos.
            </summary>
        </member>
        <member name="F:DataAnalysis.Basic.Interval`1.ClosureTypes.closedOpen">
            <summary>
            Se incluye sólo el extremo izquierdo (el menor).
            </summary>
        </member>
        <member name="F:DataAnalysis.Basic.Interval`1.ClosureTypes.openClosed">
            <summary>
            Se incluye sólo el extremo derecho (el mayor).
            </summary>
        </member>
        <member name="F:DataAnalysis.Basic.Interval`1.ClosureTypes.openOpen">
            <summary>
            No se incluyen los extremos de los intervalos.
            </summary>
        </member>
        <member name="T:DataAnalysis.Basic.RMatrix">
            <summary>
            Modela una matriz de números reales.
            </summary>
        </member>
        <member name="M:DataAnalysis.Basic.RMatrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Construye una matriz nula.
            </summary>
            <param name="nRows">
            Número de filas.
            </param>
            <param name="nCols">
            Número de columnas.
            </param>
        </member>
        <member name="M:DataAnalysis.Basic.RMatrix.#ctor(System.Double[0:,0:])">
            <summary>
            Construye una matriz de número reales.
            </summary>
            <param name="m">
            Valores de la matriz.
            </param>
        </member>
        <member name="M:DataAnalysis.Basic.RMatrix.#ctor(DataAnalysis.Basic.RMatrix)">
            <summary>
            Construye una matriz de número reales.
            </summary>
            <param name="m">
            Matriz real.
            </param>
        </member>
        <member name="M:DataAnalysis.Basic.RMatrix.#ctor(System.Collections.Generic.List{System.Double[]})">
            <summary>
            Construye una matriz de número reales.
            </summary>
            <param name="l">
            Filas de la matriz.
            </param>
        </member>
        <member name="M:DataAnalysis.Basic.RMatrix.IdentityMatrix">
            <summary>
            Crea una matriz identidad.
            </summary>
            <returns>
            Matriz identidad.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RMatrix.IdentityMatrix(System.Int32)">
            <summary>
            Crea una matriz identidad.
            </summary>
            <param name="ord">
            Orden de la matriz.
            </param>
            <returns>
            Matriz identidad.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RMatrix.Diagonal(DataAnalysis.Basic.RVector)">
            <summary>
            Crea una matriz diagonal.
            </summary>
            <param name="d">
            Valores de la diagonal principal.
            </param>
            <returns>
            Matriz diagonal.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RMatrix.Diagonal(DataAnalysis.Basic.RMatrix)">
            <summary>
            Obtiene los elementos de la diagonal principla.
            </summary>
            <param name="m">
            Matriz real.
            </param>
            <returns>
            Valores de la diagonal principal.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RMatrix.Clone">
            <summary>
            Clona el contenido de la matriz.
            </summary>
            <returns>
            Matriz clonada.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RMatrix.CompareDimension(DataAnalysis.Basic.RMatrix@,DataAnalysis.Basic.RMatrix@)">
            <summary>
            Compara las dimensiones de dos matrices.
            </summary>
            <param name="m1">
            Primera matriz.
            </param>
            <param name="m2">
            Segunda matriz.
            </param>
            <returns>
            Resultado de la comparación.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RMatrix.ToString">
            <summary>
            Convierte la matriz en una secuencia de caracteres, donde 
            los elementos de cada fila están separados por espacio y las 
            columnas por punto y coma.
            </summary>
            <returns>
            Secuencia de caracteres.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RMatrix.ToString(System.Int32)">
            <summary>
            Convierte la matriz en una secuencia de caracteres, donde 
            los elementos de cada fila están separados por espacio y las 
            columnas por punto y coma.
            </summary>
            <param name="n">
            Cantidad de dígitos de precisión.
            </param>
            <returns>
            Secuencia de caracteres.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RMatrix.ToPMML">
            <summary>
            Convierte una matriz a formato PMML.
            </summary>
            <returns>
            Formato PMML.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RMatrix.ToPrintString(System.Int32)">
            <summary>
            Convierte la matriz en una secuencia de caracteres donde 
            los elementos de cada fila están separados por espacio y las 
            columnas por caracter de mueva línea.
            </summary>
            <param name="n">
            Cantidad de dígitos de precisión.
            </param>
            <returns>
            Secuencia de caracteres.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RMatrix.Parse(System.String)">
            <summary>
            Convierte una secuencia de caracteres en una matriz
            de números reales.
            </summary>
            <param name="s">
            Secuencia de caracteres.
            </param>
            <returns>
            Matriz de números reales.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RMatrix.PMMLParse(System.Xml.Linq.XElement)">
            <summary>
            Convierte el formato PMML de una matriz en una matriz
            de números reales.
            </summary>
            <param name="e">
            Formato PMML.
            </param>
            <returns>
            Matriz de números reales.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RMatrix.Equals(System.Object)">
            <summary>
            Comprueba la igualdad entre dos matrices.
            </summary>
            <param name="obj">
            Matriz a comparar.
            </param>
            <returns>
            Resultado de la comprobación.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RMatrix.Equals(DataAnalysis.Basic.RMatrix)">
            <summary>
            Comprueba la igualdad entre dos matrices.
            </summary>
            <param name="m">
            Matriz a comparar.
            </param>
            <returns>
            Resultado de la comprobación.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RMatrix.IsSquared">
            <summary>
            Comprueba si la matriz es cuadrada.
            </summary>
            <returns>
            Resultado de la comprobación.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RMatrix.IsSymmetric">
            <summary>
            Comprueba si la matriz es simétrica.
            </summary>
            <returns>
            Resultado de la comprobación.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RMatrix.IsDiagonal">
            <summary>
            Comprueba si la matriz es diagonal.
            </summary>
            <returns>
            Resultado de la comprobación.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RMatrix.GetRowVector(System.Int32)">
            <summary>
            Obtiene una fila de la matriz.
            </summary>
            <param name="m">
            Índice de la fila.
            </param>
            <returns>
            Valores de la fila.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RMatrix.GetColVector(System.Int32)">
            <summary>
            Obtiene una columna de la matriz.
            </summary>
            <param name="n">
            Índice de la columna.
            </param>
            <returns>
            Valores de la columna.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RMatrix.ReplaceRow(DataAnalysis.Basic.RVector,System.Int32)">
            <summary>
            Reemplaza una fila de la matriz.
            </summary>
            <param name="nvals">
            Nuevos valores para la fila.
            </param>
            <param name="m">
            Índice de la fila.
            </param>
            <returns>
            Matriz actualizada.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RMatrix.ReplaceCol(DataAnalysis.Basic.RVector,System.Int32)">
            <summary>
            Reemplaza una columna de la matriz.
            </summary>
            <param name="nvals">
            Nuevos valores para la columna.
            </param>
            <param name="n">
            Índice de la columna.
            </param>
            <returns>
            Matriz actualizada.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RMatrix.SwapMatrixRow(System.Int32,System.Int32)">
            <summary>
            Intercambia dos filas de la matriz.
            </summary>
            <param name="m">
            Índice de la primera fila a intercambiar.
            </param>
            <param name="n">
            Índice de la segunda fila a intercambiar.
            </param>
            <returns>
            Matriz actualizada.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RMatrix.SwapMatrixColumn(System.Int32,System.Int32)">
            <summary>
            Intercambia dos columnas de la matriz.
            </summary>
            <param name="m">
            Índice de la primera columna a intercambiar.
            </param>
            <param name="n">
            Índice de la segunda columna a intercambiar.
            </param>
            <returns>
            Matriz actualizada.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RMatrix.Sort(System.Int32,DataAnalysis.Basic.RMatrix.SortOrder)">
            <summary>
            Ordena las filas de la matriz a partir de los elementos de una columna.
            </summary>
            <param name="order">
            Sentido de ordenamiento.
            </param>
            <param name="colIndex">
            Indice de la columna para comparar.
            </param>
        </member>
        <member name="M:DataAnalysis.Basic.RMatrix.Append(System.Double[0:,0:])">
            <summary>
            Adiciona nuevos valores a la matriz.
            </summary>
            <param name="nvals">
            Nuevos valores.
            </param>
        </member>
        <member name="M:DataAnalysis.Basic.RMatrix.GetAppend(System.Double[0:,0:])">
            <summary>
            Adiciona nuevos valores a la matriz.
            </summary>
            <param name="nvals">
            Nuevos valores.
            </param>
            <returns>
            Matriz actualizada.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RMatrix.Append(DataAnalysis.Basic.RMatrix)">
            <summary>
            Adiciona nuevos valores a la matriz.
            </summary>
            <param name="nvals">
            Nuevos valores.
            </param>
        </member>
        <member name="M:DataAnalysis.Basic.RMatrix.GetAppend(DataAnalysis.Basic.RMatrix)">
            <summary>
            Adiciona nuevos valores a la matriz.
            </summary>
            <param name="nvals">
            Nuevos valores.
            </param>
            <returns>
            Matriz actualizada.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RMatrix.InsertRowVector(DataAnalysis.Basic.RVector,System.Int32)">
            <summary>
            Inserta una nueva fila a la matriz.
            </summary>
            <param name="rvector">
            Nueva fila.
            </param>
            <param name="index">
            Indice
            </param>
        </member>
        <member name="M:DataAnalysis.Basic.RMatrix.InsertColVector(DataAnalysis.Basic.RVector,System.Int32)">
            <summary>
            Inserta una nueva columna a la matriz.
            </summary>
            <param name="cvector">
            Nueva columna.
            </param>
            <param name="index">
            Indice
            </param>
        </member>
        <member name="M:DataAnalysis.Basic.RMatrix.Diagonal">
            <summary>
            Obtiene los elementos de la diagonal principal 
            de la matriz.
            </summary>
            <returns>
            Diagonal principal.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RMatrix.NaNTest">
            <summary>
            Determina la existencia de valores NaN no permitidos 
            en la matriz.
            </summary>
            <returns>
            true, si la matriz contiene valores NaN; de lo 
            contrario, false
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RMatrix.NaNDelete">
            <summary>
            Elimina todas las filas que contiene valores NaN
            en la matriz.
            </summary>
            <returns>
            Matriz actualizada.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RMatrix.Round(System.Int32)">
            <summary>
            Redondea los valores de la matriz.
            </summary>
            <param name="decimals">
            Número de cifras decimales.
            </param>
        </member>
        <member name="M:DataAnalysis.Basic.RMatrix.GetRound(System.Int32)">
            <summary>
            Obtiene la matriz redondeada.
            </summary>
            <param name="decimals">
            Número de cifras decimales.
            </param>
            <returns>
            Matriz redondeada.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RMatrix.Transpose">
            <summary>
            Traspone la matriz.
            </summary>
        </member>
        <member name="M:DataAnalysis.Basic.RMatrix.GetTranspose">
            <summary>
            Obtiene la matriz traspuesta.
            </summary>
            <returns>
            Una RMatrix con la matriz traspuesta.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RMatrix.GetTrace">
            <summary>
            Calcula la traza de la matriz.
            </summary>
            <returns>
            Un double con el valor de la traza.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RMatrix.GetNorm">
            <summary>
            Calcula la norma L2 de la matriz.
            </summary>
            <returns>
            Un double con el valor de la norma.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RMatrix.MaxNormColIndex(DataAnalysis.Basic.RMatrix)">
            <summary>
            Encuentra la columna de una matrix que tiene la norma maxima 
            </summary>
            <param name="A">Matriz de entrada</param>
            <returns>Índice de la columna encontrada</returns>
        </member>
        <member name="M:DataAnalysis.Basic.RMatrix.QRDeterminant(DataAnalysis.Basic.RMatrix)">
            <summary>
            Calcula el determinante de una matriz utilizando la factorización QR.
            </summary>
            <param name="mat">
            Matriz de números reales.
            </param>
            <returns>
            Determinante.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RMatrix.Inverse(DataAnalysis.Basic.RMatrix)">
            <summary>
            Calcula la inversa de una matriz.
            </summary>
            <param name="mat">
            Matriz de números reales.
            </param>
            <returns>
            Matriz invesa.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RMatrix.Pseudoinverse(DataAnalysis.Basic.RMatrix)">
            <summary>
            Calcula la pseudoinversa de una matriz.
            </summary>
            <param name="mat">
            Matriz de números reales.
            </param>
            <returns>
            Matriz pseudoinversa.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RMatrix.Rank">
            <summary>
            Calcula el rango de una matriz.
            </summary>
            <returns>
            Rango.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RMatrix.LUInverse(DataAnalysis.Basic.RMatrix)">
            <summary>
            Calcula la inversa de la matriz mediante la descomposición LU.
            </summary>
            <param name="mat">
            Matriz de números reales.
            </param>
            <returns>
            Matriz inversa.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RMatrix.LUDeterminant(DataAnalysis.Basic.RMatrix)">
            <summary>
            Calcula el determinante de una matriz utilizando la descomposición LU.
            </summary>
            <param name="mat">
            Matriz de números reales.
            </param>
            <returns>
            Determinante.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RMatrix.CholeskyFactorization(DataAnalysis.Basic.RMatrix,DataAnalysis.Basic.RMatrix@)">
            <summary>
            Expresa una matriz simétrica (A) como el producto de una matriz 
            triangular y su traspuesta, tal que A = R'*R.
            </summary>
            <param name="A">
            Matriz de números reales.
            </param>
            <param name="R">
            Matriz triangular superior.
            </param>
        </member>
        <member name="M:DataAnalysis.Basic.RMatrix.QRFactorization(DataAnalysis.Basic.RMatrix,DataAnalysis.Basic.RMatrix@,DataAnalysis.Basic.RMatrix@)">
            <summary>
            Expresa una matriz (A) como el producto de una matriz ortogonal y
            una matriz triangular superior, tal que A=Q*R.
            </summary>
            <param name="A">
            Matriz de números reales.
            </param>
            <param name="Q">
            Matriz ortogonal.
            </param>
            <param name="R">
            Matriz triangular superior.
            </param>
        </member>
        <member name="M:DataAnalysis.Basic.RMatrix.EIG(DataAnalysis.Basic.RMatrix,DataAnalysis.Basic.RMatrix@,DataAnalysis.Basic.RMatrix@)">
            <summary>
            Calcula los autovalores (D) y los autovectores (V) de una matriz (A) 
            mediante el método de Jacobi, tal que A*V = V*D.
            </summary>
            <param name="A">
            Matriz real simétrica.
            </param>
            <param name="D">
            Valores propios (autovalores).
            </param>
            <param name="V">
            Vectores propios (autovectores).
            </param>
        </member>
        <member name="M:DataAnalysis.Basic.RMatrix.SVD(DataAnalysis.Basic.RMatrix,DataAnalysis.Basic.RMatrix@,DataAnalysis.Basic.RMatrix@,DataAnalysis.Basic.RMatrix@)">
            <summary>
            Realiza la descomposición en valores singulares de una matriz, 
            tal que X = U*S*V'.
            </summary>
            <param name="X">
            Matriz real.
            </param>
            <param name="U">
            Matriz unitaria.
            </param>
            <param name="S">
            Matriz diagonal.
            </param>
            <param name="V">
            Matriz unitaria.
            </param>
        </member>
        <member name="M:DataAnalysis.Basic.RMatrix.Householder(DataAnalysis.Basic.RVector,System.Int32)">
            <summary>
            Construye una matriz de transformación H que aunla las
            entradas en el producto H*b por debajo del índice k.
            </summary>
            <param name="b">
            Vector real.
            </param>
            <param name="k">
            Índice a partir del cual se desea anular.
            </param>
            <returns>
            Matriz de transformación.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RMatrix.MinMaxNormalize(DataAnalysis.Basic.RVector,DataAnalysis.Basic.RVector)">
            <summary>
            Normaliza la matriz a un nuevo intervalo. (Preserva la relación
            entre los datos originales)
            </summary>
            <param name="newMin">
            Un RVector con los valores mínimos del nuevo intervalo.
            </param>
            <param name="newMax">
            Un RVector con los valores máximos del nuevo intervalo.
            </param>
        </member>
        <member name="M:DataAnalysis.Basic.RMatrix.GetMinMaxNormalized(DataAnalysis.Basic.RVector,DataAnalysis.Basic.RVector)">
            <summary>
            Obtiene la matriz normalizada a un nuevo intervalo. (Preserva
            la relación original entre los datos)
            </summary>
            <param name="newMin">
            Un RVector con los valores mínimos del nuevo intervalo.
            </param>
            <param name="newMax">
            Un RVector con los valores máximos del nuevo intervalo.
            </param>
            <returns>
            Una RMatrix conteniendo la matriz normalizada.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RMatrix.ZScoreNormalize">
            <summary>
            Normaliza la matriz a valor medio igual a 0 y desviación estándar
            igual a 1.
            </summary>
        </member>
        <member name="M:DataAnalysis.Basic.RMatrix.GetZScoreNormalized">
            <summary>
            Obtiene la matriz normalizada a valor medio igual a 0 y desviación
            estándar igual a 1.
            </summary>
            <returns>
            Una RMatrix conteniendo la matriz normalizada.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RMatrix.GetZScoreNormalized(DataAnalysis.Basic.RVector,DataAnalysis.Basic.RVector)">
            <summary>
            Obtiene la matriz normalizada a valor medio igual a 0 y desviación
            estándar igual a 1.
            </summary>
            <returns>
            Una RMatrix conteniendo la matriz normalizada.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RMatrix.Extend(DataAnalysis.Basic.RMatrix)">
            <summary>
            Amplia una matriz con la identica ( Esta hecho para trabajar en el metodo de Gauss)
            </summary>
            <param name="A">
            Una matriz real
            </param>
            <returns>
            La matriz ampliada
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RMatrix.Reduce(DataAnalysis.Basic.RMatrix)">
            <summary>
            Reduce una matriz ( Esta hecho para trabajar en el metodo de Gauss)
            </summary>
            <param name="A">
            Matriz real
            </param>
            <returns>
            Matriz reducida
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RMatrix.InverseGauss(DataAnalysis.Basic.RMatrix)">
            <summary>
            Invierte una matriz por el metodo de Gauss
            </summary>
            <param name="A">
            Matriz de numeros reales
            </param>
            <returns>
            Matriz inversa
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RMatrix.SwapRow(DataAnalysis.Basic.RMatrix,DataAnalysis.Basic.RMatrix,System.Int32,System.Int32)">
            <summary>
            Intercambia dos filas de dos Matrices de manera simultanea
            Se emplea por el metodo de Gauss para invertis Matrices
            </summary>
            <param name="A">
            Matriz real de un orden n
            </param>
            <param name="B">
            Matriz real de un orden n
            </param>
            <param name="rinit">
            fila 1
            </param>
            <param name="rEnd">
            fila 2
            </param>
            <returns></returns>
        </member>
        <member name="T:DataAnalysis.Basic.RMatrix.SortOrder">
            <summary>
            Sentido de ordenamiento.
            </summary>
        </member>
        <member name="T:DataAnalysis.Basic.RVector">
            <summary>
            Modela un vector de números reales
            </summary>
        </member>
        <member name="M:DataAnalysis.Basic.RVector.#ctor(System.Int32)">
            <summary>
            Construye un vector nulo.
            </summary>
            <param name="ndim">
            Número de elementos del vector.
            </param>
        </member>
        <member name="M:DataAnalysis.Basic.RVector.#ctor(System.Double[])">
            <summary>
            Construye un vector de números reales.
            </summary>
            <param name="v">
            Valores del vector.
            </param>
        </member>
        <member name="M:DataAnalysis.Basic.RVector.#ctor(DataAnalysis.Basic.RVector)">
            <summary>
            Construye un vector de números reales.
            </summary>
            <param name="v">
            Valores del vector.
            </param>
        </member>
        <member name="M:DataAnalysis.Basic.RVector.Clone">
            <summary>
            Clona el contenido del vector.
            </summary>
            <returns>
            Vector clonado.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RVector.Copy(DataAnalysis.Basic.RVector,DataAnalysis.Basic.RVector,System.Int32)">
            <summary>
            Copia un rango de valores de un vector empezando desde
            el primer elemento en otro vector a patir del primer elemento.
            El tamaño se especifica en un entero de 32-bits.
            </summary>
            <param name="sourceVector">
            Vector que contiene los datos a copiar.
            </param>
            <param name="destinationVector">
            Vector que recibe los datos.
            </param>
            <param name="length">
            Cantidad de elementos a copiar.
            </param>
        </member>
        <member name="M:DataAnalysis.Basic.RVector.Copy(DataAnalysis.Basic.RVector,System.Int32,DataAnalysis.Basic.RVector,System.Int32,System.Int32)">
            <summary>
            Copia un rango de valores de un vector empezando desde
            un indice especifico en otro vector a partir de un indice especifico.
            El tamaño se especifica en un entero de 32-bits.
            </summary>
            <param name="sourceVector">
            Vector que contiene los datos a copiar.
            </param>
            <param name="sourceIndex">
            Indice del vector de origen a partir del cual empieza la copia.
            </param>
            <param name="destinationVector">
            Vector que recibe los datos.
            </param>
            <param name="destinationIndex">
            Indice del vector de destino a partir del cual empieza el almacenamiento.
            </param>
            <param name="length">
            Cantidad de elementos a copiar.
            </param>
        </member>
        <member name="M:DataAnalysis.Basic.RVector.CopyTo(DataAnalysis.Basic.RVector,System.Int32)">
            <summary>
            Copia todos los elementos del vector actual 
            a un vector especificado a partir de un indice especifico.
            </summary>
            <param name="vector">
            Vector de destino de los elementos copiados del vector actual.
            </param>
            <param name="index">
            Indice a partir del cual empieza la copia.
            </param>
        </member>
        <member name="M:DataAnalysis.Basic.RVector.SubVector(DataAnalysis.Basic.RVector,System.Int32,System.Int32)">
            <summary>
            Devuelve una sección del vector especificando el índice
            de inicio y el tamaño.
            </summary>
            <param name="vector">
            Vector.
            </param>
            <param name="startIndex">
            Índice de inicio.
            </param>
            <param name="length">
            Tamaño de la sección.
            </param>
            <returns>
            Sección del vector.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RVector.SubVector(System.Int32,System.Int32)">
            <summary>
            Devuelve una sección del vector especificando el índice
            de inicio y el tamaño.
            </summary>
            <param name="startIndex">
            Índice de inicio.
            </param>
            <param name="length">
            Tamaño de la sección.
            </param>
            <returns>
            Sección del vector.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RVector.SwapVectorEntries(System.Int32,System.Int32)">
            <summary>
            Intercabia dos elementos del vector.
            </summary>
            <param name="m">
            Índice del primer elemento.
            </param>
            <param name="n">
            Índice del segundo elemento.
            </param>
            <returns>
            Vector actualizado.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RVector.ToArray">
            <summary>
            Convierte el vector en un arreglo de doubles.
            </summary>
            <returns>
            Arreglo de doubles.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RVector.ToList">
            <summary>
            Convierte el vector en una lista de doubles.
            </summary>
            <returns>
            Lista de doubles.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RVector.ToString">
            <summary>
            Convierte el vector en una secuencia de caracteres
            separados por espacio.
            </summary>
            <returns>
            Secuencia de caracteres.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RVector.ToString(System.Int32)">
            <summary>
            Convierte el vector en una secuencia de caracteres
            separados por espacio.
            </summary>
            <param name="n">
            Cantidad de cifras decimales.
            </param>
            <returns>
            Secuencia de caracteres.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RVector.ToPMML">
            <summary>
            Convierte un vector a formato PMML.
            </summary>
            <returns>
            Formato PMML.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RVector.Parse(System.String)">
            <summary>
            Convierte una secuencia de caracteres en un vector 
            de números reales.
            </summary>
            <param name="s">
            Secuencia de caracteres.
            </param>
            <returns>
            Vector de números reales.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RVector.PMMLParse(System.Xml.Linq.XElement)">
            <summary>
            Convierte el formato PMML de un vector en un vector
            de números reales.
            </summary>
            <param name="e">
            Formato PMML.
            </param>
            <returns>
            Vector de números reales.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RVector.Equals(System.Object)">
            <summary>
            Comprueba la igualdad entre dos vectores.
            </summary>
            <param name="obj">
            Vector a comparar.
            </param>
            <returns>
            Resultado de la comprobación.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RVector.Equals(DataAnalysis.Basic.RVector)">
            <summary>
            Comprueba la igualdad entre dos vectores.
            </summary>
            <param name="v">
            Vector a comparar.
            </param>
            <returns>
            Resultado de la comprobación.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RVector.Sort(DataAnalysis.Basic.RVector.SortOrder)">
            <summary>
            Ordena los elementos del vector.
            </summary>
            <param name="order">
            Sentido de ordenamiento.
            </param>
        </member>
        <member name="M:DataAnalysis.Basic.RVector.GetSorted(DataAnalysis.Basic.RVector.SortOrder)">
            <summary>
            Ordena los elementos del vector.
            </summary>
            <param name="order">
            Sentido de ordenamiento.
            </param>
            <returns>
            Vector ordenado.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RVector.Append(System.Double[])">
            <summary>
            Adiciona nuevos valores al vector.
            </summary>
            <param name="nvals">
            Nuevos valores.
            </param>
        </member>
        <member name="M:DataAnalysis.Basic.RVector.GetAppend(System.Double[])">
            <summary>
            Adiciona nuevos valores al vector.
            </summary>
            <param name="nvals">
            Nuevos valores.
            </param>
            <returns>
            Vector actualizado.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RVector.Append(DataAnalysis.Basic.RVector)">
            <summary>
            Adiciona nuevos valores al vector.
            </summary>
            <param name="nvals">
            Nuevos valores.
            </param>
        </member>
        <member name="M:DataAnalysis.Basic.RVector.GetAppend(DataAnalysis.Basic.RVector)">
            <summary>
            Adiciona nuevos valores al vector.
            </summary>
            <param name="nvals">
            Nuevos valores.
            </param>
            <returns>
            Vector actualizado.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RVector.NaNTest">
            <summary>
            Determina la existencia de valores NaN no permitidos 
            en el vector.
            </summary>
            <returns>
            true, si el vector contiene valores NaN; de lo 
            contrario, false.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RVector.NaNDelete">
            <summary>
            Elimina todos los valores NaN en el vector.
            </summary>
            <returns>
            Vector actualizado.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RVector.DotProduct(DataAnalysis.Basic.RVector,DataAnalysis.Basic.RVector)">
            <summary>
            Calcula el producto punto de dos vectores
            </summary>
            <param name="v1">
            Primer operando.
            </param>
            <param name="v2">
            Segundo operando.
            </param>
            <returns>
            Resultado de la operación.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RVector.CrossProduct(DataAnalysis.Basic.RVector,DataAnalysis.Basic.RVector)">
            <summary>
            Multiplica dos vectores de igual dimension
            </summary>
            <param name="v1">
            Primer operando
            </param>
            <param name="v2">
            Segundo operando
            </param>
            <exception cref="T:System.Exception"></exception>
            <returns>Devuelve una matriz
            </returns> 
        </member>
        <member name="M:DataAnalysis.Basic.RVector.GetNorm(System.Int32)">
            <summary>
            Calcula la norma del vector.
            </summary>
            <param name="p">
            Orden de la norma.
            </param>
            <returns>
            Norma.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RVector.Round(System.Int32)">
            <summary>
            Redondea los valores del vector.
            </summary>
            <param name="decimals">
            Número de cifras decimales.
            </param>
        </member>
        <member name="M:DataAnalysis.Basic.RVector.GetRound(System.Int32)">
            <summary>
            Obtiene el vector redondeado.
            </summary>
            <param name="decimals">
            Número de cifras decimales.
            </param>
            <returns>
            Vector redondeado.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RVector.MinValue">
            <summary>
            Obtiene el valor mínimo del vector.
            </summary>
            <returns>
            Valor mínimo.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RVector.MinAbsValue">
            <summary>
            Calcula el valor absoluto mínimo del vector.
            </summary>
            <returns>
            Valor absoluto mínimo.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RVector.MinIndex">
            <summary>
            Obtiene el índice del valor mínimo del vector.
            </summary>
            <returns>
            Índice del valor mínimo.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RVector.MinAbsIndex">
            <summary>
            Obtiene el índice del valor absoluto mínimo del vector.
            </summary>
            <returns>
            Índice del valor absoluto mínimo.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RVector.MaxValue">
            <summary>
            Obtiene el valor máximo del vector.
            </summary>
            <returns>
            Valor máximo.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RVector.MaxAbsValue">
            <summary>
            Calcula el valor absoluto máximo del vector.
            </summary>
            <returns>
            Valor absoluto máximo.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RVector.MaxIndex">
            <summary>
            Obtiene el índice del valor máximo.
            </summary>
            <returns>
            Índice del valor máximo.</returns>
        </member>
        <member name="M:DataAnalysis.Basic.RVector.MaxAbsIndex">
            <summary>
            Obtiene el índice del valor absoluto máximo del vector.
            </summary>
            <returns>
            Índice del valor absoluto máximo.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RVector.Sum">
            <summary>
            Calcula la suma de los elementos del vector.
            </summary>
            <returns>
            Suma.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RVector.Reverse(DataAnalysis.Basic.RVector)">
            <summary>
            Invierte la secuencia de elementos del vector.
            </summary>
            <param name="vector">
            Vector a invertir.
            </param>
        </member>
        <member name="M:DataAnalysis.Basic.RVector.Rank">
            <summary>
            Obtiene el rango de los valores del vector.
            </summary>
            <returns>
            Rango.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RVector.PercentileRank(System.Double)">
            <summary>
            Calcula el percentil en el cual un valor dado pudiera caer, si este
            estuviera en el vector.
            </summary>
            <param name="val">
            Valor a calcular el percentil al que pertenece.
            </param>
            <returns>
            Percentil al que pertenece el valor.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RVector.Normalize">
            <summary>
            Normaliza el vector basado en su norma.
            </summary>
        </member>
        <member name="M:DataAnalysis.Basic.RVector.GetUnitVector">
            <summary>
            Obtiene el vector con norma igual a 1.
            </summary>
            <returns>
            Un RVector conteniendo el vector unitario.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RVector.MinMaxNormalize(System.Double,System.Double)">
            <summary>
            Normaliza el vector a un nuevo intervalo. (Preserva la relación 
            entre los datos originales)
            </summary>
            <param name="newMin">
            Un double con el valor mínimo del nuevo intervalo.
            </param>
            <param name="newMax">
            Un double con el valor máximo del nuevo intervalo.
            </param>
        </member>
        <member name="M:DataAnalysis.Basic.RVector.GetMinMaxNormalized(System.Double,System.Double)">
            <summary>
            Obtiene el vector normalizado a un nuevo intervalo. (Preserva
            la relación original entre los datos)
            </summary>
            <param name="newMin">
            Un double con el nuevo mínimo.
            </param>
            <param name="newMax">
            Un double con el nuevo máximo.
            </param>
            <returns>
            Un RVector conteniendo el vector normalizado.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RVector.ZScoreNormalize">
            <summary>
            Normaliza el vector a valor medio igual a 0 y desviación estándar
            igual a 1.
            </summary>
        </member>
        <member name="M:DataAnalysis.Basic.RVector.ZScoreNormalize(System.Double,System.Double)">
            <summary>
            Normaliza el vector a valor medio y desviación estándar definido.
            </summary>
            <param name="mean">
            Valor medio.
            </param>
            <param name="std">
            Desviación estándar.
            </param>
        </member>
        <member name="M:DataAnalysis.Basic.RVector.GetZScoreNormalized">
            <summary>
            Obtiene el vector normalizado a valor medio igual a 0 y desviación 
            estándar igual a 1.
            </summary>
            <returns>
            Un RVector conteniendo el vector normalizado.
            </returns>
        </member>
        <member name="M:DataAnalysis.Basic.RVector.GetZScoreNormalized(System.Double,System.Double)">
            <summary>
            Obtiene el vector normalizado a valor medio y desviación estándar definido.
            </summary>
            <param name="mean">
            Valor medio.
            </param>
            <param name="std">
            Desviación estándar.
            </param>
            <returns></returns>
        </member>
        <member name="M:DataAnalysis.Basic.RVector.DecimalScalingNormalize">
            <summary>
            Normaliza el vector tal que todos los valores absolutos son
            menores que 1.
            </summary>
        </member>
        <member name="M:DataAnalysis.Basic.RVector.GetDecimalScalingNormalized">
            <summary>
            Obtiene el vector normalizado tal que todos los valores 
            absolutos son menores que 1.
            </summary>
            <returns>
            Un RVector conteniendo el vector normalizado.
            </returns>
        </member>
        <member name="P:DataAnalysis.Basic.RVector.Length">
            <summary>
            Longitud del vector.
            </summary>
        </member>
        <member name="T:DataAnalysis.Basic.RVector.SortOrder">
            <summary>
            Sentido de ordenamiento.
            </summary>
        </member>
        <member name="T:DataAnalysis.Basic.RVector.SubstitutionType">
            <summary>
            Tipo de sustitución
            </summary>
        </member>
        <member name="T:DataAnalysis.Basic.SpecialFunctions">
            <summary>
            Implementa funciones especiales.
            </summary>
        </member>
        <member name="T:DataAnalysis.Classification.Classifier">
            <summary>
            Implementa métodos para la asignación de observaciones en 
            grupos de datos.
            </summary>
        </member>
        <member name="F:DataAnalysis.Classification.Classifier.gcount">
            <summary>
            Cantidad de grupos en la muestra.
            </summary>
        </member>
        <member name="F:DataAnalysis.Classification.Classifier.vcount">
            <summary>
            Cantidad de variables en la muestra.
            </summary>
        </member>
        <member name="F:DataAnalysis.Classification.Classifier.scount">
            <summary>
            Cantidad de observaciones en la muestra.
            </summary>
        </member>
        <member name="F:DataAnalysis.Classification.Classifier.variables">
            <summary>
            Listado con los nombres de las variables que usa el clasificador.
            </summary>
        </member>
        <member name="F:DataAnalysis.Classification.Classifier.classes">
            <summary>
            Listado con los nombres de las clases que usa el clasificador.
            </summary>
        </member>
        <member name="F:DataAnalysis.Classification.Classifier.discreteVariablesValues">
            <summary>
            Listado con los valores cualitativos de las variables que usa el clasificador de variables discretas.
            </summary>
        </member>
        <member name="M:DataAnalysis.Classification.Classifier.Classify(DataAnalysis.Basic.RVector)">
            <summary>
            Clasifica una observación.
            </summary>
            <param name="obs">Observación</param>
            <returns>Clase a la que pertenece la observación. Nulo si no se puede determinar</returns>
        </member>
        <member name="M:DataAnalysis.Classification.Classifier.ToPMML">
            <summary>
            Genera y devuelve la configuración en PMML del clasificador.
            </summary>
            <returns>PMML del clasificador</returns>
        </member>
        <member name="M:DataAnalysis.Classification.Classifier.Update(DataAnalysis.Basic.RMatrix,System.Int32[])">
            <summary>
            Actualiza el clasificador con un nuevo conjunto de muestras.
            </summary>
            <param name="samples">Muestras con sus datos</param>
            <param name="grps">Clase a la que pertenece cada muestra</param>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:DataAnalysis.Classification.Classifier.Update(DataAnalysis.Basic.RMatrix,System.Int32[],System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Actualiza el clasificador con un nuevo conjunto de muestras con información 
            cualitativa de las variables y clases que usa.
            </summary>
            <param name="samples">Muestras con sus datos</param>
            <param name="grps">Clase a la que pertenece cada muestra</param>
            <param name="varNames">Nombres de las variables</param>
            <param name="classNames">Nombres de las clases</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:DataAnalysis.Classification.Classifier.Update(DataAnalysis.Basic.RMatrix,System.Int32[],System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Collections.Generic.List{System.String}})">
            <summary>
            Para clasificadores con variables discretas. Actualiza el clasificador con un nuevo conjunto de muestras con información 
            cualitativa de las variables, sus valores y clases que usa.
            </summary>
            <param name="samples">Muestras con sus datos</param>
            <param name="grps">Clase a la que pertenece cada muestra</param>
            <param name="varNames">Nombres de las variables</param>
            <param name="classNames">Nombres de las clases</param>
            <param name="varValues">Valores de las variables</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:DataAnalysis.Classification.Classifier.ValidatePMMLExport">
            <summary>
            Verifica si es posible obtener la configuración del clasificador en PMML.
            </summary>
            <returns>Resultado de la verificación</returns>
        </member>
        <member name="M:DataAnalysis.Classification.Classifier.Clone">
            <summary>
            Crea una copia del objeto.
            </summary>
            <returns>Copia</returns>
        </member>
        <member name="F:DataAnalysis.Classification.HistoryBasedClassifier.csamples">
            <summary>
            Conjunto de muestras
            </summary>
        </member>
        <member name="M:DataAnalysis.Classification.HistoryBasedClassifier.GetSamplesByGroup(System.Int32)">
            <summary>
            Obtiene las muestras correspondientes a un grupo.
            </summary>
            <param name="grp">
            Identificador del grupo.
            </param>
            <returns>
            Muestras.
            </returns>
        </member>
        <member name="F:DataAnalysis.Classification.BayesClassifier.dfList">
            <summary>
            Lista de funciones de decisión.
            </summary>
        </member>
        <member name="F:DataAnalysis.Classification.BayesClassifier.infoType">
            <summary>
            Tipo de información.
            </summary>
        </member>
        <member name="M:DataAnalysis.Classification.BayesClassifier.#ctor(DataAnalysis.Classification.BayesClassifier.InfoType)">
            <summary>
            Construye un clasificador basado en el 
            Teorema de Bayes.
            </summary>
            <param name="it">
            Tipo de información.
            </param>
        </member>
        <member name="M:DataAnalysis.Classification.BayesClassifier.Update(DataAnalysis.Basic.RMatrix,System.Int32[])">
            <summary>
            Actualiza la información del clasificador.
            </summary>
            <param name="samples">
            Matriz real.
            </param>
            <param name="grps">
            Identificadores de los grupos. Uno por observación.
            </param>
        </member>
        <member name="M:DataAnalysis.Classification.BayesClassifier.GetClassificationFunctions">
            <summary>
            Obtiene las funciones de clasificación correspondientes a cada clase
            </summary>
        </member>
        <member name="T:DataAnalysis.Classification.BayesClassifier.InfoType">
            <summary>
            Tipo de información.
            </summary>
        </member>
        <member name="T:DataAnalysis.Classification.LinearBayesClassifier">
            <summary>
            Implementa métodos para la clasificación lineal de observaciones 
            basada en el Teorema de Bayes.
            </summary>
        </member>
        <member name="M:DataAnalysis.Classification.LinearBayesClassifier.#ctor(DataAnalysis.Classification.BayesClassifier.InfoType)">
            <summary>
            Construye un clasificador linear basado en el
            Teorema de Bayes.
            </summary>
            <param name="it">
            Tipo de información
            </param>
        </member>
        <member name="M:DataAnalysis.Classification.LinearBayesClassifier.GetClassificationFunctions">
            <summary>
            Obtiene las funciones de clasificación
            </summary>
        </member>
        <member name="M:DataAnalysis.Classification.LinearBayesClassifier.ToPMML">
            <summary>
            Representa un Clasificador Bayes Lineal en PMML
            </summary>
            <returns></returns>
        </member>
        <member name="M:DataAnalysis.Classification.LinearBayesClassifier.PMMLParse(System.Xml.Linq.XElement)">
            <summary>
            Obtiene un clasificador Bayes Lineal a partir de una representación en PMML
            </summary>
            <param name="classif">
            Representación en PMML de un clasificador lineal
            </param>
            <returns>
            Clasificador Lineal
            </returns>
        </member>
        <member name="M:DataAnalysis.Classification.LinearBayesClassifier.Clone">
            <summary>
            Crea una copia del objeto LinearBayesClassifier
            </summary>
            <returns></returns>
        </member>
        <member name="T:DataAnalysis.Classification.QuadraticBayesClassifier">
            <summary>
            Implementa métodos para la clasificación cuadrática de observaciones 
            basada en el Teorema de Bayes.
            </summary>
        </member>
        <member name="M:DataAnalysis.Classification.QuadraticBayesClassifier.#ctor(DataAnalysis.Classification.BayesClassifier.InfoType)">
            <summary>
            Construye un clasificador cuadrático basado en el 
            Teorema de Bayes.
            </summary>
            <param name="it">
            Tipo de información
            </param>
        </member>
        <member name="M:DataAnalysis.Classification.QuadraticBayesClassifier.GetClassificationFunctions">
            <summary>
            Obtiene las funciones de clasificación
            </summary>
        </member>
        <member name="M:DataAnalysis.Classification.QuadraticBayesClassifier.ToPMML">
            <summary>
            Representa en PMML un Clasificador Bayes Cuadrático
            </summary>
            <returns>
            Xml de la representación en PMML de un Clasificador Bayes Cuadrático
            </returns>
        </member>
        <member name="M:DataAnalysis.Classification.QuadraticBayesClassifier.PMMLParse(System.Xml.Linq.XElement)">
            <summary>
            Obtiene un clasificador Bayes cuadrático a partir de una representación en PMML
            </summary>
            <param name="classif">
            Representación en PMML de un clasificador cuadrático
            </param>
            <returns>
            Clasificador cuadrático
            </returns>
        </member>
        <member name="M:DataAnalysis.Classification.QuadraticBayesClassifier.Clone">
            <summary>
            Crea una copia del objeto de la clase
            </summary>
            <returns></returns>
        </member>
        <member name="T:DataAnalysis.Classification.DecisionFunction">
            <summary>
            Representa una Funcion de Decision
            </summary>
        </member>
        <member name="M:DataAnalysis.Classification.DecisionFunction.#ctor(System.Double,DataAnalysis.Basic.RVector,DataAnalysis.Basic.RMatrix)">
            <summary>
            Función de decisión
            </summary>
            <param name="e">
            error
            </param>
            <param name="v">
            vector de medias
            </param>
            <param name="m">
            matriz de covarianzas
            </param>
        </member>
        <member name="M:DataAnalysis.Classification.DecisionFunction.Evaluate(DataAnalysis.Basic.RVector)">
            <summary>
            Evaulúa la función de decisión
            </summary>
            <param name="z">
            vector de valores a evaluar
            </param>
            <returns></returns>
        </member>
        <member name="M:DataAnalysis.Classification.DecisionFunction.Clone">
            <summary>
            Crea una copia de un objeto de la clase
            </summary>
            <returns></returns>
        </member>
        <member name="T:DataAnalysis.Classification.ClassificationAnalyzer">
            <summary>
            Implementa métodos para el análisis de clasificación.
            </summary>
        </member>
        <member name="F:DataAnalysis.Classification.ClassificationAnalyzer.Partitions">
            <summary>
            Particiones.
            </summary>
        </member>
        <member name="M:DataAnalysis.Classification.ClassificationAnalyzer.#ctor(System.Collections.Generic.List{DataAnalysis.Basic.RMatrix},System.Int32[],System.Int32)">
            <summary>
            Construye un objeto para el análisis de la clasificación
            de un conjunto de muestras mediante el método de la validación cruzada.
            </summary>
            <param name="samples">
            Muestras a clasificar. Cada matriz contiene un 
            conjunto de observaciones perteneciente a un grupo.
            </param>
            <param name="grps">
            Grupos de los conjuntos de observaciones.
            El orden debe coincidir con el de las matrices.
            </param>
            <param name="k">
            Cantidad de particiones usadas
            en la validación cruzada.
            </param>
        </member>
        <member name="M:DataAnalysis.Classification.ClassificationAnalyzer.Update(System.Collections.Generic.List{DataAnalysis.Basic.RMatrix},System.Int32[],System.Int32)">
            <summary>
            Actualiza el objeto con un nuevo conjunto de muestras a clasificar.
            </summary>
            <param name="samples">
            Nuevas muestras a clasificar.
            </param>
            <param name="grps">
            Grupos de los conjuntos de observaciones.
            </param>
            <param name="k">
            Cantidad de particiones usadas
            en la validación cruzada.
            </param>
        </member>
        <member name="M:DataAnalysis.Classification.ClassificationAnalyzer.PartitionedData(System.Collections.Generic.List{DataAnalysis.Classification.GroupedSamples},System.Int32)">
            <summary>
            Particiona el conjunto de muestras
            en k partes.
            </summary>
            <param name="gsList">
            Lista de muestras por cada grupo.
            </param>
            <param name="k">
            Cantidad de particiones.
            </param>
        </member>
        <member name="M:DataAnalysis.Classification.ClassificationAnalyzer.SequencialCrossValidation(DataAnalysis.Classification.Classifier,System.Int32@,DataAnalysis.Basic.RVector@,System.Double@)">
            <summary>
            Obtiene la matriz de confusión para un clasificador
            a partir del método de la Validacion Cruzada. (Version Secuencial)
            </summary>
            <param name="classifier">
            Clasificador.
            </param>
            <param name="NoClassifiedSamples">
            Muestras no clasificadas.
            </param>
            <param name="kError">
            Error de clasificacion en cada particion.
            </param>
            <param name="error">
            Error de clasificacion con la matriz final.
            </param>
            <returns>
            Matriz de confusión.
            </returns>
        </member>
        <member name="M:DataAnalysis.Classification.ClassificationAnalyzer.ParallelCrossValidation(DataAnalysis.Classification.Classifier,System.Int32@,DataAnalysis.Basic.RVector@,System.Double@)">
            <summary>
            Obtiene la matriz de confusión para un clasificador
            a partir del método de la Validacion Cruzada(Version Paralela)
            </summary>
            <param name="classifier">
            Clasificador.
            </param>
            <param name="NoClassifiedSamples">
            Muestras no clasificadas.
            </param>
            <param name="kError">
            Error de clasificacion en cada particion.
            </param>
            <param name="error">
            Error de clasificacion con la matriz final.
            </param>
            <returns>
            Matriz de confusión.
            </returns>
            The parallel version
        </member>
        <member name="T:DataAnalysis.Classification.GroupedSamples">
            <summary>
            Modela un conjunto de muestras de un grupo.
            </summary>
        </member>
        <member name="F:DataAnalysis.Classification.GroupedSamples.Samples">
            <summary>
            Conjunto de muestras.
            </summary>
        </member>
        <member name="F:DataAnalysis.Classification.GroupedSamples.AvailableSamples">
            <summary>
            Indices de las muestras disponibles para
            la selección aleatoria.
            </summary>
        </member>
        <member name="M:DataAnalysis.Classification.GroupedSamples.GetSamplesCount">
            <summary>
            Retorna la cantidad de muestras en el grupo.
            </summary>
            <returns>
            Cantidad de muestras.
            </returns>
        </member>
        <member name="M:DataAnalysis.Classification.GroupedSamples.GetRandomSamples(System.Int32)">
            <summary>
            Obtiene muestras aleatorias del grupo sin reemplazo.
            </summary>
            <param name="q">
            Cantidad de muestras.
            </param>
            <returns>
            Muestras aleatorias.
            </returns>
        </member>
        <member name="P:DataAnalysis.Classification.GroupedSamples.Group">
            <summary>
            Grupo.
            </summary>
        </member>
        <member name="T:DataAnalysis.Classification.KfoldSamples">
            <summary>
            Modela las muestras en una partición.
            </summary>
        </member>
        <member name="F:DataAnalysis.Classification.KfoldSamples.Samples">
            <summary>
            Muestras.
            </summary>
        </member>
        <member name="F:DataAnalysis.Classification.KfoldSamples.Groups">
            <summary>
            Grupos.
            </summary>
        </member>
        <member name="T:DataAnalysis.Classification.ClassifiedData">
            <summary>
            Modela una observación clasificada.
            </summary>
        </member>
        <member name="T:DataAnalysis.Classification.DecisionTreeClassifier">
            <summary>
            Modela un clasificador basado en árbol de decisión.
            </summary>
        </member>
        <member name="F:DataAnalysis.Classification.DecisionTreeClassifier.Tree">
            <summary>
            Árbol de decisión.
            </summary>
        </member>
        <member name="F:DataAnalysis.Classification.DecisionTreeClassifier._method">
            <summary>
            Método usado para la creación del árbol de decisión
            </summary>
        </member>
        <member name="M:DataAnalysis.Classification.DecisionTreeClassifier.#ctor(DataAnalysis.Classification.DecisionTreeAlgorithms.DecisionTreeMethods)">
            <summary>
            Crea un objeto de tipo DecisionTreeClassifier con el método que 
            se usará en la creación del árbol de decisión.
            </summary>
            <param name="method">Método o algoritmo.</param>
        </member>
        <member name="M:DataAnalysis.Classification.DecisionTreeClassifier.#ctor">
            <summary>
            Crea un objeto de tipo DecisionTreeClassifier vacío.
            </summary>
        </member>
        <member name="M:DataAnalysis.Classification.DecisionTreeClassifier.Update(DataAnalysis.Basic.RMatrix,System.Int32[])">
            <summary>
            Reconstruye el árbol de decisión. 
            </summary>
            <param name="samples">Muestras con que se va a entrenar el clasificador</param>
            <param name="grps">Clases con a la que pertenecen las muestras</param>
        </member>
        <member name="M:DataAnalysis.Classification.DecisionTreeClassifier.SetVariables(System.Collections.Generic.List{System.String})">
            <summary>
            Asigna la información cualitativa de las variables. Esta función 
            destruye el árbol de decisión que exista.
            </summary>
            <param name="vars">Nombre de las variables</param>
        </member>
        <member name="M:DataAnalysis.Classification.DecisionTreeClassifier.SetClasses(System.Collections.Generic.List{System.String})">
            <summary>
            Asigna la información cualitativa de las clases. Esta función 
            destruye el árbol de decisión que exista.
            </summary>
            <param name="classes">Nombre de las clases</param>
        </member>
        <member name="M:DataAnalysis.Classification.DecisionTreeClassifier.SetDiscreteValues(System.Collections.Generic.List{System.Collections.Generic.List{System.String}})">
            <summary>
            Asigna la información cualitativa de los valores de las variables discretas. Esta función 
            destruye el árbol de decisión que exista.
            </summary>
            <param name="discreteValues">Nombre de los valores</param>
        </member>
        <member name="M:DataAnalysis.Classification.DecisionTreeClassifier.Classify(DataAnalysis.Basic.RVector)">
            <summary>
            Clasifica una observación.
            </summary>
            <param name="observation">Observación</param>
            <returns>Clasificación o nulo si no puede se clasificado</returns>
        </member>
        <member name="M:DataAnalysis.Classification.DecisionTreeClassifier.PMMLParse(System.Xml.Linq.XElement,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Collections.Generic.List{System.String}})">
            <summary>
            Construye el árbol de decisión a partir de un modelo 
            XML ya existente
            </summary>
            <param name="classif">Modelo del árbol</param>
            <param name="varNames">Nombres de las variables</param>
            <param name="classNames">Nombres de clases</param>
            <param name="varValues">Valores de las variables</param>
        </member>
        <member name="M:DataAnalysis.Classification.DecisionTreeClassifier.ToPMML">
            <summary>
            Crea el modelo XML del árbol de decisión.
            </summary>
            <returns>Modelo del árbol</returns>
            <exception cref="T:System.Exception"/>
        </member>
        <member name="M:DataAnalysis.Classification.DecisionTreeClassifier.Clone">
            <summary>
            Crea una copia del objeto.
            </summary>
            <returns>Copia</returns>
        </member>
        <member name="T:DataAnalysis.Classification.DecisionTree">
            <summary>
            Modela un árbol de decisión
            </summary>
        </member>
        <member name="M:DataAnalysis.Classification.DecisionTree.#ctor(System.Int32)">
            <summary>
            Crea un árbol de decisión con la cantidad de 
            variables que recibe el clasificador.
            </summary>
            <param name="varcount">Cantidad de entradas del clasificador</param>
        </member>
        <member name="M:DataAnalysis.Classification.DecisionTree.AddRoot">
            <summary>
            Crea la raiz del árbol de decisión.
            </summary>
        </member>
        <member name="M:DataAnalysis.Classification.DecisionTree.Classify(DataAnalysis.Basic.RVector)">
            <summary>
            Clasifica una observación.
            </summary>
            <param name="observation">Observación</param>
            <returns>Clasificación o nulo si no puede se clasificado</returns>
        </member>
        <member name="M:DataAnalysis.Classification.DecisionTree.PMMLParse(System.Xml.Linq.XElement,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Collections.Generic.List{System.String}})">
            <summary>
            Construye el árbol de decisión a partir de un modelo 
            XML ya existente
            </summary>
            <param name="classif">Modelo del árbol</param>
            <param name="varNames">Nombres de las variables</param>
            <param name="classNames">Nombres de clases</param>
            <param name="varValues">Valores de las variables</param>
        </member>
        <member name="M:DataAnalysis.Classification.DecisionTree.ToPMML(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Collections.Generic.List{System.String}})">
            <summary>
            Crea el modelo XML del árbol de decisión.
            </summary>
            <param name="varNames">Nombres de las variables</param>
            <param name="classNames">Nombres de las clases</param>
            <param name="varValues">Valores de las variables</param>
            <returns>Modelo del árbol</returns>
        </member>
        <member name="M:DataAnalysis.Classification.DecisionTree.NumberOfLeaves">
            <summary>
            Calcula la cantidad de hojas que posee el árbol de decisión.
            </summary>
            <returns>Cantidad de hojas</returns>
        </member>
        <member name="T:DataAnalysis.Classification.DecisionNode">
            <summary>
            Modela un nodo de decisión.
            </summary>
        </member>
        <member name="M:DataAnalysis.Classification.DecisionNode.#ctor(DataAnalysis.Classification.DecisionVariable,DataAnalysis.Classification.DecisionNode.DecisionParameters.Operator,System.Double,System.Int32)">
            <summary>
            Crea un nodo de decisión.
            </summary>
            <param name="variable">Variable de decisión usada en el nodo</param>
            <param name="Operator">Operador usado para elegir este nodo</param>
            <param name="reference">Valor de comparación usando el operador para elegir este nodo</param>
            <param name="comparisonVar">Variable con la cual se hace la comparación para elegir este nodo</param>
        </member>
        <member name="M:DataAnalysis.Classification.DecisionNode.#ctor(DataAnalysis.Classification.DecisionVariable)">
            <summary>
            Crea un nodo de desisión sin los parámetros de decisión para elegir el nodo.
            </summary>
            <param name="variable">Variable de decisión usada en el nodo</param>
        </member>
        <member name="M:DataAnalysis.Classification.DecisionNode.#ctor(System.Int32)">
            <summary>
            Crea una hoja sin los parámetros de decisión para elegir la hoja.
            </summary>
            <param name="decision">Clasificación hecha en la hoja</param>
        </member>
        <member name="M:DataAnalysis.Classification.DecisionNode.#ctor(System.Int32,DataAnalysis.Classification.DecisionNode.DecisionParameters.Operator,System.Double,System.Int32)">
            <summary>
            Crea una hoja de decisión.
            </summary>
            <param name="decision">Decisión o clasificación hecha en la hoja</param>
            <param name="Operator">Operador usado para elegir este nodo</param>
            <param name="reference">Valor de comparación usando el operador para elegir este nodo</param>
            <param name="comparisonVar">Variable con la cual se hace la comparación para elegir este nodo</param>
        </member>
        <member name="M:DataAnalysis.Classification.DecisionNode.#ctor(System.Int32,System.Int32,DataAnalysis.Classification.DecisionNode.DecisionParameters.Operator,System.Double,System.Int32)">
            <summary>
            Crea un nodo de decisión.
            </summary>
            <param name="variable">Variable de decisión usada en el nodo</param>
            <param name="children">Cantidad de hijos que tiene el nodo</param>
            <param name="Operator">Operador usado para elegir este nodo</param>
            <param name="reference">Valor de comparación usando el operador para elegir este nodo</param>
            <param name="comparisonVar">Variable con la cual se hace la comparación para elegir este nodo</param>
        </member>
        <member name="M:DataAnalysis.Classification.DecisionNode.NumberOfLeaves(DataAnalysis.Classification.DecisionNode)">
            <summary>
            Calcula la cantidad de hojas que posee el
            nodo en su descendencia.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:DataAnalysis.Classification.DecisionNode.ToPMML(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Collections.Generic.List{System.String}})">
            <summary>
            Crea el modelo XML de un subárbol de decisión.
            </summary>
            <param name="varNames">Nombres de las variables</param>
            <param name="classNames">Nombres de las clases</param>
            <param name="varValues">Valores de las variables</param>
            <returns>Modelo del subárbol</returns>
        </member>
        <member name="M:DataAnalysis.Classification.DecisionNode.PMMLParse(System.Xml.Linq.XElement,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Collections.Generic.List{System.String}})">
            <summary>
            Crea un subárbol de decisión a partir de un XElement
            </summary>
            <param name="xNode">Subárbol en forma de XElement</param>
            <returns>Subárbol traducido</returns>
            <param name="varNames">Nombres de las variables</param>
            <param name="classNames">Nombres de clases</param>
            <param name="varValues">Valores de las variables</param>
        </member>
        <member name="T:DataAnalysis.Classification.DecisionNode.DecisionParameters">
            <summary>
            Modela los parámetros de un nodo de decisión.
            </summary>
        </member>
        <member name="F:DataAnalysis.Classification.DecisionNode.DecisionParameters.Variable">
            <summary>
            Varible a la que hace referencia el nodo o 
            clasificación hecha de ser una hoja.
            </summary>
        </member>
        <member name="F:DataAnalysis.Classification.DecisionNode.DecisionParameters.PosiblesDecisions">
            <summary>
            Posibles decisiones que se pueden tomar en el nodo
            si no se puede llegar a una decisión certera.
            </summary>
        </member>
        <member name="M:DataAnalysis.Classification.DecisionNode.DecisionParameters.Compare(System.Double)">
            <summary>
            Método de comparación para determinar si se cumple 
            la condición para entrar a este nodo.
            </summary>
            <param name="value">Valor para comparar</param>
            <returns>Resultado de la comparación</returns>
        </member>
        <member name="P:DataAnalysis.Classification.DecisionNode.DecisionParameters.ComparisonKind">
            <summary>
            Recibe o devuelve el operador por el cual se realiza la comparación en el nodo.
            </summary>
        </member>
        <member name="P:DataAnalysis.Classification.DecisionNode.DecisionParameters.ComparisonReference">
            <summary>
            Recibe o devuelve el valor de referencia por el cual se va a realizar la comparación.
            </summary>
        </member>
        <member name="P:DataAnalysis.Classification.DecisionNode.DecisionParameters.ComparisonField">
            <summary>
            Recibe o devuelve respecto a que variable se realiza la comparación.
            </summary>
        </member>
        <member name="T:DataAnalysis.Classification.DecisionNode.DecisionParameters.Operator">
            <summary>
            Los operadores que pueden usarse en un nodo para realizar una decisión.
            </summary>
        </member>
        <member name="F:DataAnalysis.Classification.DecisionNode.DecisionParameters.Operator.none">
            <summary>
            Ninguno
            </summary>
        </member>
        <member name="F:DataAnalysis.Classification.DecisionNode.DecisionParameters.Operator.equal">
            <summary>
            Iguales
            </summary>
        </member>
        <member name="F:DataAnalysis.Classification.DecisionNode.DecisionParameters.Operator.notEqual">
            <summary>
            No iguales
            </summary>
        </member>
        <member name="F:DataAnalysis.Classification.DecisionNode.DecisionParameters.Operator.lessThan">
            <summary>
            Menor que
            </summary>
        </member>
        <member name="F:DataAnalysis.Classification.DecisionNode.DecisionParameters.Operator.lessOrEqual">
            <summary>
            Menor o igual que
            </summary>
        </member>
        <member name="F:DataAnalysis.Classification.DecisionNode.DecisionParameters.Operator.greaterThan">
            <summary>
            Mayor que
            </summary>
        </member>
        <member name="F:DataAnalysis.Classification.DecisionNode.DecisionParameters.Operator.greaterOrEqual">
            <summary>
            Mayor o igual que
            </summary>
        </member>
        <member name="T:DataAnalysis.Classification.DecisionClassifiedVariableSample">
            <summary>
            Modela una muestra de una variable y su clasificación
            </summary>
        </member>
        <member name="F:DataAnalysis.Classification.DecisionClassifiedVariableSample.SampleClass">
            <summary>
            Clase a la que pertenece la muestra.
            </summary>
        </member>
        <member name="F:DataAnalysis.Classification.DecisionClassifiedVariableSample.SampleValue">
            <summary>
            Valor de la variable en la muestra.
            </summary>
        </member>
        <member name="T:DataAnalysis.Classification.DecisionClassifiedSamples">
            <summary>
            Modela un conjunto de muestras de una variable clasificadas
            </summary>
        </member>
        <member name="F:DataAnalysis.Classification.DecisionClassifiedSamples.Samples">
            <summary>
            Conjunto de muestras de una variable con las las clases a la que pertenecen
            </summary>
        </member>
        <member name="M:DataAnalysis.Classification.DecisionClassifiedSamples.Remove(System.Int32)">
            <summary>
            Elimina los elementos correspondientes al índice recibido.
            </summary>
            <param name="index">Indice a eliminar</param>
        </member>
        <member name="M:DataAnalysis.Classification.DecisionClassifiedSamples.SamplesByClass(System.Int32)">
            <summary>
            Determina la cantidad muestras que pertenecen a una clase dada.
            </summary>
            <param name="clase">Clase</param>
            <returns>Cantidad de muestras</returns>
        </member>
        <member name="M:DataAnalysis.Classification.DecisionClassifiedSamples.Clone">
            <summary>
            Realiza una copia de la variable
            </summary>
            <returns>Copia</returns>
        </member>
        <member name="P:DataAnalysis.Classification.DecisionClassifiedSamples.Length">
            <summary>
            Cantidad de muestras
            </summary>
        </member>
        <member name="P:DataAnalysis.Classification.DecisionClassifiedSamples.TotalClasses">
            <summary>
            Cantidad de clases presentes.
            </summary>
        </member>
        <member name="T:DataAnalysis.Classification.DecisionDiscreteSamples">
            <summary>
            Clase que modela una muestra discreta para usar en un árbol de decisión.
            </summary>
        </member>
        <member name="M:DataAnalysis.Classification.DecisionDiscreteSamples.SamplesByClasses">
            <summary>
            Determina la cantidad de muestras que pertenecen a cada clase.
            </summary>
            <returns>Cantidad en cada clase</returns>
        </member>
        <member name="M:DataAnalysis.Classification.DecisionDiscreteSamples.SamplesByClasses(System.Int32)">
            <summary>
            Determina la cantidad de muestras que pertenecen a cada clase
            tal que la variable tenga un valor específico.
            </summary>
            <param name="value">Valor de la variable</param>
            <returns>Cantidad en cada clase</returns>
        </member>
        <member name="M:DataAnalysis.Classification.DecisionDiscreteSamples.Indexes">
            <summary>
            Determina los índices correspondientes a cada valor
            de la variable.
            </summary>
            <returns>Arreglo con los índices</returns>
        </member>
        <member name="M:DataAnalysis.Classification.DecisionDiscreteSamples.Clone">
            <summary>
            Realiza una copia de la variable
            </summary>
            <returns>Copia</returns>
        </member>
        <member name="P:DataAnalysis.Classification.DecisionDiscreteSamples.PossibleValues">
            <summary>
            Cantidad de posibles valores que puede tomar la variable.
            </summary>
        </member>
        <member name="T:DataAnalysis.Classification.DecisionContinuousSamples">
            <summary>
            Clase que modela una muestra contínua para usar en un árbol de decisión.
            </summary>
        </member>
        <member name="M:DataAnalysis.Classification.DecisionContinuousSamples.Split(System.Double)">
            <summary>
            Divide un grupo de muestras en dos grupos por un valor umbral.
            </summary>
            <param name="value">Valor umbral</param>
            <returns>Arreglo con los dos grupos</returns>
        </member>
        <member name="M:DataAnalysis.Classification.DecisionContinuousSamples.RemoveLesserThan(System.Double)">
            <summary>
            Elimina las muestras que son menores o igual al umbral entrado.
            </summary>
            <param name="threshold">Valor umbral</param>
        </member>
        <member name="M:DataAnalysis.Classification.DecisionContinuousSamples.RemoveBiggerThan(System.Double)">
            <summary>
            Elimina las muestras que son mayores al umbral entrado.
            </summary>
            <param name="threshold">Valor umbral</param>
        </member>
        <member name="M:DataAnalysis.Classification.DecisionContinuousSamples.Clone">
            <summary>
            Realiza una copia de la variable
            </summary>
            <returns>Copia</returns>
        </member>
        <member name="M:DataAnalysis.Classification.DecisionContinuousSamples.Sort">
            <summary>
            Organiza la variable de menor a mayor.
            </summary>
        </member>
        <member name="T:DataAnalysis.Classification.DecisionContinuousSamples.VariableSampleComparer">
            <summary>
            Clase para compara dos muestras de una variable.
            </summary>
        </member>
        <member name="T:DataAnalysis.Classification.DecisionVariable">
            <summary>
            Modela una variable para crear un árbol de decisión
            </summary>
        </member>
        <member name="F:DataAnalysis.Classification.DecisionVariable.VarIndex">
            <summary>
            Indice correspondiente del atributo o variable. 
            </summary>
        </member>
        <member name="F:DataAnalysis.Classification.DecisionVariable.ClassifiedVariable">
            <summary>
            Conjunto de valores de la variable y la clase a la que pertenecen
            </summary>
        </member>
        <member name="F:DataAnalysis.Classification.DecisionVariable.VarType">
            <summary>
            Tipo de variable.
            </summary>
        </member>
        <member name="M:DataAnalysis.Classification.DecisionVariable.GainRatio">
            <summary>
            Calcula el ratio de ganancia que aporta la variable. 
            </summary>
            <returns>Valor del ratio de ganancia</returns>
        </member>
        <member name="M:DataAnalysis.Classification.DecisionVariable.Gain">
            <summary>
            Cálculo de la ganancia de la variable.
            </summary>
            <returns>Valor de la ganancia</returns>
        </member>
        <member name="M:DataAnalysis.Classification.DecisionVariable.I(System.Int32[])">
            <summary>
            Cálculo de la información de la variable.
            </summary>
            <param name="ci">Cantidad de muestras en cada clase</param>
            <returns>Valor de la información</returns>
        </member>
        <member name="M:DataAnalysis.Classification.DecisionVariable.E">
            <summary>
            Cálculo de la entropía de la variable.
            </summary>
            <returns>Valor de la entropía</returns>
        </member>
        <member name="M:DataAnalysis.Classification.DecisionVariable.I(DataAnalysis.Classification.DecisionContinuousSamples)">
            <summary>
            Función de entropía de una variable continua.
            </summary>
            <param name="T">Variable continua</param>
            <returns>Valor</returns>
        </member>
        <member name="M:DataAnalysis.Classification.DecisionVariable.Split(System.Collections.Generic.IReadOnlyList{DataAnalysis.Classification.DecisionContinuousSamples})">
            <summary>
            Función que calcula el ratio de información de una
            partición de una variable continua.
            </summary>
            <param name="Ti">Variable particionada en dos</param>
            <returns>Valor</returns>
        </member>
        <member name="M:DataAnalysis.Classification.DecisionVariable.Gain(System.Collections.Generic.IReadOnlyList{DataAnalysis.Classification.DecisionContinuousSamples})">
            <summary>
            Función que calcula la ganancia de información
            </summary>
            <param name="Ti">Variable particionada en dos</param>
            <returns>Valor</returns>
        </member>
        <member name="M:DataAnalysis.Classification.DecisionVariable.Clone">
            <summary>
            Crea una copia del objeto
            </summary>
            <returns>Copia</returns>
        </member>
        <member name="T:DataAnalysis.Classification.DecisionTreeAlgorithms">
            <summary>
            Contiene los algoritmos para crear un árbol de decisión.
            </summary>
        </member>
        <member name="M:DataAnalysis.Classification.DecisionTreeAlgorithms.ID3Algorithm(System.Collections.Generic.List{DataAnalysis.Classification.DecisionVariable},System.Int32[])">
            <summary>
            Entrena el árbol de decisión con el algoritmo ID3 (método recursivo).
            </summary>
            <param name="samples">Muestras con que se va a entrenar el subárbol</param>
            <param name="groups">Clases con a la que pertenecen las muestras</param>
            <returns>Subárbol entrenado</returns>
        </member>
        <member name="M:DataAnalysis.Classification.DecisionTreeAlgorithms.C45Algorithm(System.Collections.Generic.List{DataAnalysis.Classification.DecisionVariable},System.Int32[])">
            <summary>
            Entrena el árbol de decisión con el algoritmo C4.5 (método recursivo).
            </summary>
            <param name="samples">Muestras con que se va a entrenar el subárbol</param>
            <param name="groups">Clases con a la que pertenecen las muestras</param>
            <returns>Subárbol entrenado</returns>
        </member>
        <member name="T:DataAnalysis.Classification.DecisionTreeAlgorithms.DecisionTreeMethods">
            <summary>
            Métodos implementados para la generación automática de árboles de decisión.
            </summary>
        </member>
        <member name="F:DataAnalysis.Classification.DecisionTreeAlgorithms.DecisionTreeMethods.ID3">
            <summary>
            Método ID3 creado por Quinlan para datos discretos.
            </summary>
        </member>
        <member name="F:DataAnalysis.Classification.DecisionTreeAlgorithms.DecisionTreeMethods.C45">
            <summary>
            Método C4.5 creado por Quinlan para datos discretos y continuos.
            </summary>
        </member>
        <member name="F:DataAnalysis.Classification.DecisionTreeAlgorithms.DecisionTreeMethods.None">
            <summary>
            Ningún método fue usado para la 
            generación del árbol (construcción manual).
            </summary>
        </member>
        <member name="T:DataAnalysis.Classification.CDistance">
            <summary>
            Modela una distancia de la observacion a una muestra
            </summary>
        </member>
        <member name="T:DataAnalysis.Classification.DistanceFunction">
            <summary>
            Modela una funcion de distancia
            </summary>
        </member>
        <member name="T:DataAnalysis.Classification.NearestNeighborsClassifier">
            <summary>
            Representa un Clasificador K Vecinos Más Cercanos
            </summary>
        </member>
        <member name="F:DataAnalysis.Classification.NearestNeighborsClassifier.k">
            <summary>
            Cantidad de vecinos seleccionados.
            </summary>
        </member>
        <member name="F:DataAnalysis.Classification.NearestNeighborsClassifier.df">
            <summary>
            Funcion de distancia
            </summary>
        </member>
        <member name="F:DataAnalysis.Classification.NearestNeighborsClassifier.dparam">
            <summary>
            Parametro de distancia
            </summary>
        </member>
        <member name="M:DataAnalysis.Classification.NearestNeighborsClassifier.#ctor(System.Int32,DataAnalysis.Classification.DistanceFunction,System.Nullable{System.Int32})">
            <summary>
            Construye un clasificador basado en el
            Método knn (k nearest neighbor)
            </summary>
            <param name="k">
            Cantidad de vecinos 
            </param>
            <param name="df">
            Funcion de distancia
            </param>
            <param name="param">
            Parametro de distancia
            </param>
        </member>
        <member name="M:DataAnalysis.Classification.NearestNeighborsClassifier.Classify(DataAnalysis.Basic.RVector)">
            <summary>
            Clasifica una observacion
            </summary>
            <param name="obs">
            Observacion
            </param>
            <returns>
            Grupo de la observacion 
            </returns>
        </member>
        <member name="M:DataAnalysis.Classification.NearestNeighborsClassifier.CalculateDistance(DataAnalysis.Basic.RVector)">
            <summary>
            Calcula la distancia entre la observación y las muestras
            </summary>
            <param name="observation">
            Observación
            </param>
            <returns>
            Distancias y la clase a la que corresponden
            </returns>
        </member>
        <member name="M:DataAnalysis.Classification.NearestNeighborsClassifier.ToPMML">
            <summary>
            Representa en PMML un Clasificador KNN
            </summary>
            <returns>
            Documennto PMML de un Clasificador KNN
            </returns>
        </member>
        <member name="M:DataAnalysis.Classification.NearestNeighborsClassifier.PMMLParse(System.Xml.Linq.XElement,System.Collections.Generic.List{System.String})">
            <summary>
            Obtiene un Clasificador K Vecinos Más Cercanos
            </summary>
            <param name="classif">
            PMML del Clasificador
            </param>
            <param name="classes">
            Nombre de las clases.
            </param> 
            <returns></returns>
        </member>
        <member name="M:DataAnalysis.Classification.NearestNeighborsClassifier.Clone">
            <summary>
            Crea una copia de un objeto de la clase NearestNeighborClassifier
            </summary>
            <returns></returns>
        </member>
        <member name="T:DataAnalysis.Classification.DistanceComparer">
            <summary>
            Clase para comparar dos distancias de dos vecinos de una observación. 
            </summary>
        </member>
        <member name="M:DataAnalysis.Classification.DistanceComparer.Compare(System.Object,System.Object)">
            <summary>
            Método para comparar las distancias.
            </summary>
            <param name="x">
            Distancia 1.
            </param>
            <param name="y">
            Distancia 2.
            </param>
            <returns>
            1.  Distancia1 mayor Distancia2  
            -1. Distancia1 menor Distancia2
            0.  Distancia1 igual Distancia2
            </returns>
        </member>
        <member name="T:DataAnalysis.Classification.ParzenClassifier">
            <summary>
            Modela un clasificador Parzen que se construye a partir de una funcion Kernel
            </summary>
        </member>
        <member name="M:DataAnalysis.Classification.ParzenClassifier.#ctor">
            <summary>
            Crea un Clasificador sin ninguna funcion kernel asociada y sin observaciones
            </summary>
        </member>
        <member name="M:DataAnalysis.Classification.ParzenClassifier.#ctor(DataAnalysis.Classification.KernelFunctions)">
            <summary>
            Construye un Clasificador Parzen a partir de una funcion Kernel que se le pasa como parametro
            </summary>
            <param name="kernel"></param>
        </member>
        <member name="M:DataAnalysis.Classification.ParzenClassifier.Update(DataAnalysis.Basic.RMatrix,System.Int32[])">
            <summary>
            Actualiza el set de entrenamiento a partir de un matriz con las muestras clasificadas (filas) y un vector
            columna con las clases de las muestras.
            La cantidad de filas de la matriz es igual a la cantidad de columnas del vector de clases para garantizar
            que coincidan uno a uno.
            </summary>
            <param name="samples"></param>
            <param name="grps"></param>
        </member>
        <member name="M:DataAnalysis.Classification.ParzenClassifier.Classify(DataAnalysis.Basic.RVector)">
            <summary>
            Recibe un vector de observacion como parametro y devuelve la clase a la que pertenece si
            ya se actualizo el set de muestras de entrenamiento y si esa observacion corresponde a alguna de
            las clases con las cuales se entreno el clasificador.
            </summary>
            <param name="obs"></param>
            <returns></returns>
        </member>
        <member name="M:DataAnalysis.Classification.ParzenClassifier.ToPMML">
            <summary>
            Crea un documento PMML que contiene el modelo y los parametros del clasificador
            </summary>
            <returns></returns>
        </member>
        <member name="M:DataAnalysis.Classification.ParzenClassifier.PMMLParse(System.Xml.Linq.XElement,System.Collections.Generic.List{System.String})">
            <summary>
            Recibe el documento PMML y actualiza los parametros y observaciones a partir de los datos
            almacenados en el documento.
            </summary>
            <param name="classif"></param>
        </member>
        <member name="M:DataAnalysis.Classification.ParzenClassifier.SetDataFields(System.String)">
            <summary>
            Toma los nombres de los campos a partir de una cadena,"df", que los contiene separados por espacio
            </summary>
            <param name="df"></param>
        </member>
        <member name="M:DataAnalysis.Classification.ParzenClassifier.ToString">
            <summary>
            Devuelve el nombre del modelo del clasificador  y la funcion kernel sobre la cual
            se construye en formato de cadena.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DataAnalysis.Classification.ParzenClassifier.Clone">
            <summary>
            Crea una copia de un objeto de ParzenClassifier
            </summary>
            <returns></returns>
        </member>
        <member name="T:DataAnalysis.Classification.KernelFunctions">
            <summary>
            Clase base de todas las funciones kernel con las que se puede cear un Clasificador Parsen
            </summary>
        </member>
        <member name="T:DataAnalysis.Classification.GaussianKernel">
            <summary>
            Clase que modela una funcion kernel gaussiana
            </summary>
        </member>
        <member name="M:DataAnalysis.Classification.GaussianKernel.#ctor(System.Int32,System.Double)">
            <summary>
            Construye una funcion kernel gaussiana a partir de los parametros especificados
            </summary>
            <param name="varCount"></param>
            Cantidad de variables
            <param name="mySigma"></param>
            Parametro de ajuste de presicion
        </member>
        <member name="M:DataAnalysis.Classification.GaussianKernel.Calculate(DataAnalysis.Basic.RVector,DataAnalysis.Basic.RVector)">
            <summary>
            Calcula el valor del aporte de una observacion clasificada a la muestra que se desea clasificar
            </summary>
            <param name="obs"></param>
            Es la muestra que se desea clasificar
            <param name="jSample"></param>
            Es la muestra de la que se obtendra su aporte a la densidad de probabilidad de la muestra 'obs'
            <returns></returns>
        </member>
        <member name="M:DataAnalysis.Classification.GaussianKernel.ToPMML">
            <summary>
            Devuelve el Elemento PMML correspondiente a la funcion kernel.
            Este Elemento contiene el nombre de la funcion y la cantidad y valor de sus parametros
            </summary>
            <returns></returns>
        </member>
        <member name="M:DataAnalysis.Classification.GaussianKernel.PMMLParse(System.Xml.Linq.XElement)">
            <summary>
            Actualiza los parametros de la funcion kernel a partir de un Elemento en PMML
            </summary>
            <param name="kfPmmlModel"></param>
        </member>
        <member name="M:DataAnalysis.Classification.GaussianKernel.Clone">
            <summary>
            Crea una copia de un objeto de la clase GaussianKernel
            </summary>
            <returns></returns>
        </member>
        <member name="T:DataAnalysis.Clustering.Cluster">
            <summary>
            Representa una agrupación de datos
            </summary>
        </member>
        <member name="F:DataAnalysis.Clustering.Cluster.list_Point">
            <summary>
            Contiene todos los datos (puntos) perteneciente al cluster
            </summary>
        </member>
        <member name="M:DataAnalysis.Clustering.Cluster.Add(DataAnalysis.Clustering.ClusterizedData)">
            <summary>
            Añade un dato al clúster
            </summary>
            <param name="p"> Dato que debe ser añadido</param>
        </member>
        <member name="M:DataAnalysis.Clustering.Cluster.Contain(DataAnalysis.Clustering.ClusterizedData)">
            <summary>
            Dado un punto averigua si el clúster lo contiene
            </summary>
            <param name="p">Dato que debe ser localizado</param>
            <returns>True o False</returns>
        </member>
        <member name="M:DataAnalysis.Clustering.Cluster.Delete(DataAnalysis.Clustering.ClusterizedData)">
            <summary>
            Elimina un elemento del lista de Datos del clúster
            </summary>
            <param name="pointDelete">dato que debe ser eliminado</param>
        </member>
        <member name="P:DataAnalysis.Clustering.Cluster.Id">
            <summary>
            Representa el índice del cluster
            </summary>
        </member>
        <member name="F:DataAnalysis.Clustering.Clustering.ListC">
            <summary>
            La lsita de cluster contiene todos los grupos formados por el algoritmo
            </summary>
        </member>
        <member name="F:DataAnalysis.Clustering.Clustering.DataSet">
            <summary>
            Esta lista debe contener los datos de la matriz en forma de vectores
            </summary>
        </member>
        <member name="M:DataAnalysis.Clustering.Clustering.Update(DataAnalysis.Basic.RMatrix)">
             <summary>
            Actualiza el set de Datos disponible 
             </summary>
             <param name="data">
             Corresponde a la matrix de datos que se desea agrupar
             </param>
        </member>
        <member name="T:DataAnalysis.Clustering.ClusterizedData">
            <summary>
            Representa un Dato una vez sea analizado por algun algoritmo de 
            agrupamiento (Clustering)
            </summary>
        </member>
        <member name="P:DataAnalysis.Clustering.ClusterizedData.Id">
            <summary>
            Representa el índice del dato
            </summary>
        </member>
        <member name="P:DataAnalysis.Clustering.ClusterizedData.Visited">
            <summary>
            Determina si el algoritmo ya analizó el dato en cuestión
            </summary>
        </member>
        <member name="P:DataAnalysis.Clustering.ClusterizedData.ClusterFather">
            <summary>
            indica el índice del grupo al cual pertenece el dato
            </summary>
        </member>
        <member name="P:DataAnalysis.Clustering.ClusterizedData.RVec">
            <summary>
            Contiene el vector del dato
            </summary>
        </member>
        <member name="F:DataAnalysis.Clustering.Dbscan.Eps">
            <summary>
             Maxima distancia posible que debe existir entre un par de puntos para ser
            considerados vecinos
            </summary>
        </member>
        <member name="F:DataAnalysis.Clustering.Dbscan.MinPts">
            <summary>
            Minima cantidad de puntos que puede contener un clúster
            </summary>
        </member>
        <member name="M:DataAnalysis.Clustering.Dbscan.#ctor(System.Single,System.Int32)">
            <summary>
            Constructor de la clase DBSCAN
            Es Necesario pasarle los parámetros del algoritmo 
            siempre que se declare un objeto de esta clase 
            </summary>
        </member>
        <member name="M:DataAnalysis.Clustering.Dbscan.Clusterify">
            <summary>
            Ejecuta el algoritmo de Agrupamiento DBSCAN
            </summary>
            <returns>
            Devuelve los grupos delimitados por el algoritmo
            incluyendo el cluster pertenenciente a outliers (ruido) 
            </returns>
        </member>
        <member name="M:DataAnalysis.Clustering.Dbscan.ExpandCluster(DataAnalysis.Clustering.ClusterizedData,System.Collections.Generic.List{DataAnalysis.Clustering.ClusterizedData},System.Int32,System.Single)">
            <summary>
            Expande un Cluster basado en el algoritmo DBSCAN
            </summary>
            <param name="p">
            Es el dato actualmente analizado
            </param>
            <param name="neighborP">
            Son el grupo de Datos que cumplen las condiciones de densidad
            respecto al punto p
            </param>
            <param name="minPts">
            Minima cantidad de puntos que puede contener un clúster
            </param>
            <param name="eps">
            Maxima distancia posible que debe existir entre un par de puntos para ser
            considerados vecinos
            </param>
        </member>
        <member name="M:DataAnalysis.Clustering.Dbscan.RegionQuery(DataAnalysis.Clustering.ClusterizedData,System.Single)">
            <summary>
            Devuelve la epsilon-vecindad del punto p 
            </summary>
        </member>
        <member name="M:DataAnalysis.Clustering.Dbscan.JoinList(System.Collections.Generic.List{DataAnalysis.Clustering.ClusterizedData},System.Collections.Generic.List{DataAnalysis.Clustering.ClusterizedData})">
            <summary>
            Une dos listas (los elementos comunes no son repetidos)
            </summary>
            <returns>
            Devuelve el resultado de haber unificado ambas listas 
            </returns>
        </member>
        <member name="M:DataAnalysis.Clustering.kMeans.#ctor(DataAnalysis.Basic.RMatrix,System.Int32)">
            <summary>
            Crea un Objeto de la clase kMedias
            </summary>
            <param name="dSetMatrix">Set de datos a agrupar</param>
            <param name="numofClusters">numero de grupos o clusters</param>
        </member>
        <member name="M:DataAnalysis.Clustering.kMeans.toPMML">
            <summary>
            Crea el fichero PMML
            </summary>
            <returns>XElement fichero PMML</returns>
        </member>
        <member name="M:DataAnalysis.Clustering.kMeans.PMMLParse(System.Xml.Linq.XElement)">
            <summary>
            Carga el fichero PMML a traves del XElement Cluster
            </summary>
            <param name="cluster">Contiene el fichero Pmml</param>
        </member>
        <member name="M:DataAnalysis.Clustering.kMeans.Initialization">
            <summary>
            Crea las condiciones iniciales del metodo
            </summary>
        </member>
        <member name="M:DataAnalysis.Clustering.kMeans.AssignCluster">
            <summary>
            Asigna cada elemento del set de Datos a un cluster
            </summary>
            <returns>Estado booleano que indica si los puntos cambiaron respecto al punto</returns>
        </member>
        <member name="M:DataAnalysis.Clustering.kMeans.UpdateCentroids">
            <summary>
            Actualiza los centros de cada cluster como la media aritmetica de los elemntos del cluster
            </summary>
        </member>
        <member name="T:DataAnalysis.Numerical.Differentiation.ForwardDefference">
            <summary>
            Deriva utilizando el método de Diferencias Finitas hacia adelante.
            </summary>
        </member>
        <member name="M:DataAnalysis.Numerical.Differentiation.ForwardDefference.DerivativeForward1(DataAnalysis.Numerical.Differentiation.NumericalDifferentiation.Function,System.Double,System.Double)">
            <summary>
            Calcula la primera derivada de una función.
            </summary>
            <param name="f">
            Función real.
            </param>
            <param name="x">
            Punto en el que se desea evaluar la derivada.
            </param>
            <param name="h">
            Distancia entre puntos adjacentes.
            </param>
            <returns>
            Valor de la derivada.
            </returns>
        </member>
        <member name="M:DataAnalysis.Numerical.Differentiation.ForwardDefference.DerivativeRichardson1(DataAnalysis.Numerical.Differentiation.NumericalDifferentiation.Function,System.Double,System.Double)">
            <summary>
            Calcula la primera derivada de una función utilizando la extrapolación de Richardson.
            </summary>
            <param name="f">
            Función real.
            </param>
            <param name="x">
            Punto en el que se desea evaluar la derivada.
            </param>
            <param name="h">
            Distancia entre puntos adjacentes.
            </param>
            <returns>
            Valor de la derivada.
            </returns>
        </member>
        <member name="M:DataAnalysis.Numerical.Differentiation.ForwardDefference.DerivativeForward2(DataAnalysis.Numerical.Differentiation.NumericalDifferentiation.Function,System.Double,System.Double)">
            <summary>
            Calcula la segunda derivada de una función.
            </summary>
            <param name="f">
            Función real.
            </param>
            <param name="x">
            Punto en el que se desea evaluar la derivada.
            </param>
            <param name="h">
            Distancia entre puntos adjacentes.
            </param>
            <returns>
            Valor de la derivada.
            </returns>
        </member>
        <member name="M:DataAnalysis.Numerical.Differentiation.ForwardDefference.DerivativeRichardson2(DataAnalysis.Numerical.Differentiation.NumericalDifferentiation.Function,System.Double,System.Double)">
            <summary>
            Calcula la segunda derivada de una función utilizando la extrapolación de Richardson.
            </summary>
            <param name="f">
            Función real.
            </param>
            <param name="x">
            Punto en el que se desea evaluar la derivada.
            </param>
            <param name="h">
            Distancia entre puntos adjacentes.
            </param>
            <returns>
            Valor de la derivada.
            </returns>
        </member>
        <member name="M:DataAnalysis.Numerical.Differentiation.ForwardDefference.DerivativeForward3(DataAnalysis.Numerical.Differentiation.NumericalDifferentiation.Function,System.Double,System.Double)">
            <summary>
            Calcula la tercera derivada de una función.
            </summary>
            <param name="f">
            Función real.
            </param>
            <param name="x">
            Punto en el que se desea evaluar la derivada.
            </param>
            <param name="h">
            Distancia entre puntos adjacentes.
            </param>
            <returns>
            Valor de la derivada.
            </returns>
        </member>
        <member name="M:DataAnalysis.Numerical.Differentiation.ForwardDefference.DerivativeRichardson3(DataAnalysis.Numerical.Differentiation.NumericalDifferentiation.Function,System.Double,System.Double)">
            <summary>
            Calcula la tercera derivada de una función utilizando la extrapolación de Richardson.
            </summary>
            <param name="f">
            Función real.
            </param>
            <param name="x">
            Punto en el que se desea evaluar la derivada.
            </param>
            <param name="h">
            Distancia entre puntos adjacentes.
            </param>
            <returns>
            Valor de la derivada.
            </returns>
        </member>
        <member name="M:DataAnalysis.Numerical.Differentiation.ForwardDefference.DerivativeForward4(DataAnalysis.Numerical.Differentiation.NumericalDifferentiation.Function,System.Double,System.Double)">
            <summary>
            Calcula la cuarta derivada de una función.
            </summary>
            <param name="f">
            Función real.
            </param>
            <param name="x">
            Punto en el que se desea evaluar la derivada.
            </param>
            <param name="h">
            Distancia entre puntos adjacentes.
            </param>
            <returns>
            Valor de la derivada.
            </returns>
        </member>
        <member name="M:DataAnalysis.Numerical.Differentiation.ForwardDefference.DerivativeRichardson4(DataAnalysis.Numerical.Differentiation.NumericalDifferentiation.Function,System.Double,System.Double)">
            <summary>
            Calcula la cuarta derivada de una función utilizando la extrapolación de Richardson.
            </summary>
            <param name="f">
            Función real.
            </param>
            <param name="x">
            Punto en el que se desea evaluar la derivada.
            </param>
            <param name="h">
            Distancia entre puntos adjacentes.
            </param>
            <returns>
            Valor de la derivada.
            </returns>
        </member>
        <member name="T:DataAnalysis.Numerical.Differentiation.BackwardDifference">
            <summary>
            Deriva utilizando el método de Diferencias Finitas hacia atrás.
            </summary>
        </member>
        <member name="M:DataAnalysis.Numerical.Differentiation.BackwardDifference.DerivativeBackward1(DataAnalysis.Numerical.Differentiation.NumericalDifferentiation.Function,System.Double,System.Double)">
            <summary>
            Calcula la primera derivada de una función.
            </summary>
            <param name="f">
            Función real.
            </param>
            <param name="x">
            Punto en el que se desea evaluar la derivada.
            </param>
            <param name="h">
            Distancia entre puntos adjacentes.
            </param>
            <returns>
            Valor de la derivada.
            </returns>
        </member>
        <member name="M:DataAnalysis.Numerical.Differentiation.BackwardDifference.DerivativeRichardson1(DataAnalysis.Numerical.Differentiation.NumericalDifferentiation.Function,System.Double,System.Double)">
            <summary>
            Calcula la primera derivada de una función utilizando la extrapolación de Richardson.
            </summary>
            <param name="f">
            Función real.
            </param>
            <param name="x">
            Punto en el que se desea evaluar la derivada.
            </param>
            <param name="h">
            Distancia entre puntos adjacentes.
            </param>
            <returns>
            Valor de la derivada.
            </returns>
        </member>
        <member name="M:DataAnalysis.Numerical.Differentiation.BackwardDifference.DerivativeBackward2(DataAnalysis.Numerical.Differentiation.NumericalDifferentiation.Function,System.Double,System.Double)">
            <summary>
            Calcula la segunda derivada de una función.
            </summary>
            <param name="f">
            Función real.
            </param>
            <param name="x">
            Punto en el que se desea evaluar la derivada.
            </param>
            <param name="h">
            Distancia entre puntos adjacentes.
            </param>
            <returns>
            Valor de la derivada.
            </returns>
        </member>
        <member name="M:DataAnalysis.Numerical.Differentiation.BackwardDifference.DerivativeRichardson2(DataAnalysis.Numerical.Differentiation.NumericalDifferentiation.Function,System.Double,System.Double)">
            <summary>
            Calcula la segunda derivada de una función utilizando la extrapolación de Richardson.
            </summary>
            <param name="f">
            Función real.
            </param>
            <param name="x">
            Punto en el que se desea evaluar la derivada.
            </param>
            <param name="h">
            Distancia entre puntos adjacentes.
            </param>
            <returns>
            Valor de la derivada.
            </returns>
        </member>
        <member name="M:DataAnalysis.Numerical.Differentiation.BackwardDifference.DerivativeBackward3(DataAnalysis.Numerical.Differentiation.NumericalDifferentiation.Function,System.Double,System.Double)">
            <summary>
            Calcula la tercera derivada de una función.
            </summary>
            <param name="f">
            Función real.
            </param>
            <param name="x">
            Punto en el que se desea evaluar la derivada.
            </param>
            <param name="h">
            Distancia entre puntos adjacentes.
            </param>
            <returns>
            Valor de la derivada.
            </returns>
        </member>
        <member name="M:DataAnalysis.Numerical.Differentiation.BackwardDifference.DerivativeRichardson3(DataAnalysis.Numerical.Differentiation.NumericalDifferentiation.Function,System.Double,System.Double)">
            <summary>
            Calcula la tercera derivada de una función utilizando la extrapolación de Richardson.
            </summary>
            <param name="f">
            Función real.
            </param>
            <param name="x">
            Punto en el que se desea evaluar la derivada.
            </param>
            <param name="h">
            Distancia entre puntos adjacentes.
            </param>
            <returns>
            Valor de la derivada.
            </returns>
        </member>
        <member name="M:DataAnalysis.Numerical.Differentiation.BackwardDifference.DerivativeBackward4(DataAnalysis.Numerical.Differentiation.NumericalDifferentiation.Function,System.Double,System.Double)">
            <summary>
            Calcula la cuarta derivada de una función.
            </summary>
            <param name="f">
            Función real.
            </param>
            <param name="x">
            Punto en el que se desea evaluar la derivada.
            </param>
            <param name="h">
            Distancia entre puntos adjacentes.
            </param>
            <returns>
            Valor de la derivada.
            </returns>
        </member>
        <member name="M:DataAnalysis.Numerical.Differentiation.BackwardDifference.DerivativeRichardson4(DataAnalysis.Numerical.Differentiation.NumericalDifferentiation.Function,System.Double,System.Double)">
            <summary>
            Calcula la cuarta derivada de una función utilizando la extrapolación de Richardson.
            </summary>
            <param name="f">
            Función real.
            </param>
            <param name="x">
            Punto en el que se desea evaluar la derivada.
            </param>
            <param name="h">
            Distancia entre puntos adjacentes.
            </param>
            <returns>
            Valor de la derivada.
            </returns>
        </member>
        <member name="T:DataAnalysis.Numerical.Differentiation.CentralDifference">
            <summary>
            Deriva utilizando el método de Diferencias Centrales.
            </summary>
        </member>
        <member name="M:DataAnalysis.Numerical.Differentiation.CentralDifference.DerivativeCentral1(DataAnalysis.Numerical.Differentiation.NumericalDifferentiation.Function,System.Double,System.Double)">
            <summary>
            Calcula la primera derivada de una función.
            </summary>
            <param name="f">
            Función real.
            </param>
            <param name="x">
            Punto en el que se desea evaluar la derivada.
            </param>
            <param name="h">
            Distancia entre puntos adjacentes.
            </param>
            <returns>
            Valor de la derivada.
            </returns>
        </member>
        <member name="M:DataAnalysis.Numerical.Differentiation.CentralDifference.DerivativeRichardson1(DataAnalysis.Numerical.Differentiation.NumericalDifferentiation.Function,System.Double,System.Double)">
            <summary>
            Calcula la primera derivada de una función utilizando la extrapolación de Richardson.
            </summary>
            <param name="f">
            Función real.
            </param>
            <param name="x">
            Punto en el que se desea evaluar la derivada.
            </param>
            <param name="h">
            Distancia entre puntos adjacentes.
            </param>
            <returns>
            Valor de la derivada.
            </returns>
        </member>
        <member name="M:DataAnalysis.Numerical.Differentiation.CentralDifference.DerivativeCentral2(DataAnalysis.Numerical.Differentiation.NumericalDifferentiation.Function,System.Double,System.Double)">
            <summary>
            Calcula la segunda derivada de una función.
            </summary>
            <param name="f">
            Función real.
            </param>
            <param name="x">
            Punto en el que se desea evaluar la derivada.
            </param>
            <param name="h">
            Distancia entre puntos adjacentes.
            </param>
            <returns>
            Valor de la derivada.
            </returns>
        </member>
        <member name="M:DataAnalysis.Numerical.Differentiation.CentralDifference.DerivativeRichardson2(DataAnalysis.Numerical.Differentiation.NumericalDifferentiation.Function,System.Double,System.Double)">
            <summary>
            Calcula la segunda derivada de una función utilizando la extrapolación de Richardson.
            </summary>
            <param name="f">
            Función real.
            </param>
            <param name="x">
            Punto en el que se desea evaluar la derivada.
            </param>
            <param name="h">
            Distancia entre puntos adjacentes.
            </param>
            <returns>
            Valor de la derivada.
            </returns>
        </member>
        <member name="M:DataAnalysis.Numerical.Differentiation.CentralDifference.DerivativeCentral3(DataAnalysis.Numerical.Differentiation.NumericalDifferentiation.Function,System.Double,System.Double)">
            <summary>
            Calcula la tercera derivada de una función.
            </summary>
            <param name="f">
            Función real.
            </param>
            <param name="x">
            Punto en el que se desea evaluar la derivada.
            </param>
            <param name="h">
            Distancia entre puntos adjacentes.
            </param>
            <returns>
            Valor de la derivada.
            </returns>
        </member>
        <member name="M:DataAnalysis.Numerical.Differentiation.CentralDifference.DerivativeRichardson3(DataAnalysis.Numerical.Differentiation.NumericalDifferentiation.Function,System.Double,System.Double)">
            <summary>
            Calcula la tercera derivada de una función utilizando la extrapolación de Richardson.
            </summary>
            <param name="f">
            Función real.
            </param>
            <param name="x">
            Punto en el que se desea evaluar la derivada.
            </param>
            <param name="h">
            Distancia entre puntos adjacentes.
            </param>
            <returns>
            Valor de la derivada.
            </returns>
        </member>
        <member name="M:DataAnalysis.Numerical.Differentiation.CentralDifference.DerivativeCentral4(DataAnalysis.Numerical.Differentiation.NumericalDifferentiation.Function,System.Double,System.Double)">
            <summary>
            Calcula la cuarta derivada de una función.
            </summary>
            <param name="f">
            Función real.
            </param>
            <param name="x">
            Punto en el que se desea evaluar la derivada.
            </param>
            <param name="h">
            Distancia entre puntos adjacentes.
            </param>
            <returns>
            Valor de la derivada.
            </returns>
        </member>
        <member name="M:DataAnalysis.Numerical.Differentiation.CentralDifference.DerivativeRichardson4(DataAnalysis.Numerical.Differentiation.NumericalDifferentiation.Function,System.Double,System.Double)">
            <summary>
            Calcula la cuarta derivada de una función utilizando la extrapolación de Richardson.
            </summary>
            <param name="f">
            Función real.
            </param>
            <param name="x">
            Punto en el que se desea evaluar la derivada.
            </param>
            <param name="h">
            Distancia entre puntos adjacentes.
            </param>
            <returns>
            Valor de la derivada.
            </returns>
        </member>
        <member name="T:DataAnalysis.Numerical.Integration.SimpsonIntegration">
            <summary>
            Integra utilizando el método de Simpson.
            </summary>
        </member>
        <member name="M:DataAnalysis.Numerical.Integration.SimpsonIntegration.Integrate(DataAnalysis.Numerical.Integration.NumericalIntegration.Function,System.Double,System.Double,System.Int32)">
            <summary>
            Integra una función en un intervalo.
            </summary>
            <param name="f">
            Función real.
            </param>
            <param name="a">
            Valor incial del intervalo de integración.
            </param>
            <param name="b">
            Valor final del intervalo de integración.
            </param>
            <param name="n">
            Cantidad de intervalos.
            </param>
            <returns>
            Valor de la integral.
            </returns>
        </member>
        <member name="T:DataAnalysis.Numerical.Integration.TrapezoidalIntegration">
            <summary>
            Integra utilizando el método trapezoidal.
            </summary>
        </member>
        <member name="M:DataAnalysis.Numerical.Integration.TrapezoidalIntegration.Integrate(DataAnalysis.Numerical.Integration.NumericalIntegration.Function,System.Double,System.Double,System.Int32)">
            <summary>
            Integra una función en un intervalo.
            </summary>
            <param name="f">
            Función real.
            </param>
            <param name="a">
            Valor incial del intervalo de integración.
            </param>
            <param name="b">
            Valor final del intervalo de integración.
            </param>
            <param name="n">
            Cantidad de intervalos.
            </param>
            <returns>
            Valor de la integral.
            </returns>
        </member>
        <member name="T:DataAnalysis.Numerical.Integration.GaussLegendreIntegration">
            <summary>
            Integración utilizando el método de Gauss-Legendre.
            </summary>
        </member>
        <member name="M:DataAnalysis.Numerical.Integration.GaussLegendreIntegration.LegendreNodesWeights(System.Int32,System.Double[]@,System.Double[]@)">
            <summary>
            Calcula los pesos de un polinomio Legendre.
            </summary>
            <param name="n">
            Grado del polinomio.
            </param>
            <param name="x">
            Raíces del polinomio.
            </param>
            <param name="w">
            Pesos del polinomio.
            </param>
        </member>
        <member name="M:DataAnalysis.Numerical.Integration.GaussLegendreIntegration.Integrate(DataAnalysis.Numerical.Integration.NumericalIntegration.Function,System.Double,System.Double,System.Int32)">
            <summary>
            Integra una función en un intervalo.
            </summary>
            <param name="f">
            Función real.
            </param>
            <param name="a">
            Valor incial del intervalo de integración.
            </param>
            <param name="b">
            Valor final del intervalo de integración.
            </param>
            <param name="n">
            Orden del polinomio de aproximación.
            </param>
            <returns>
            Valor de la integral.
            </returns>
        </member>
        <member name="T:DataAnalysis.Numerical.Integration.GaussChebyshevIntegration">
            <summary>
            Integración utilizando el método Gauss-Chebyshev.
            </summary>
        </member>
        <member name="T:DataAnalysis.Numerical.Integration.GaussLaguerreIntegration">
            <summary>
            Integración utilizando el método Gauss-Laguerre.
            </summary>
        </member>
        <member name="M:DataAnalysis.Numerical.Integration.GaussLaguerreIntegration.LaguerreNodesWeights(System.Int32,System.Double[]@,System.Double[]@)">
            <summary>
            Calcula los pesos de un polinomio Laguerre.
            </summary>
            <param name="n">
            Grado del polinomio.
            </param>
            <param name="x">
            Raíces del polinomio.
            </param>
            <param name="w">
            Pesos del polinomio.
            </param>
        </member>
        <member name="T:DataAnalysis.Numerical.Integration.GaussHermiteIntegration">
            <summary>
            Integración utilizando el método de Gauss-Hermite.
            </summary>
        </member>
        <member name="M:DataAnalysis.Numerical.Integration.GaussHermiteIntegration.HermiteNodesWeights(System.Int32,System.Double[]@,System.Double[]@)">
            <summary>
            Calcula los pesos de un polinomio Hermite.
            </summary>
            <param name="n">
            Grado del polinomio.
            </param>
            <param name="x">
            Raíces del polinomio.
            </param>
            <param name="w">
            Pesos del polinomio.
            </param>
        </member>
        <member name="T:DataAnalysis.Numerical.ODESolving.EulerODESolving">
            <summary>
            Resuelve una ODE utilizando el método de Euler.
            </summary>
        </member>
        <member name="M:DataAnalysis.Numerical.ODESolving.EulerODESolving.Solve(DataAnalysis.Numerical.ODESolving.ODENumericalSolving.Function,System.Double,System.Double[],System.Double,System.Double[],System.Double)">
            <summary>
            Resuelve una ODE.
            </summary>
            <param name="f">
            Función real.
            </param>
            <param name="t0">
            Tiempo inicial.
            </param>
            <param name="v0">
            Valores inicales de las variables.
            </param>
            <param name="t">
            Tiempo en el que se desea calcular la solución.
            </param>
            <param name="param">
            Parámetros de la función a evaluar.
            </param>
            <param name="h">
            Incremento.
            </param>
            <returns>
            Valor de la solución.
            </returns>
        </member>
        <member name="T:DataAnalysis.Numerical.ODESolving.HeunODESolving">
            <summary>
            Resuelve una ODE utilizando el método de Heun.
            </summary>
        </member>
        <member name="M:DataAnalysis.Numerical.ODESolving.HeunODESolving.Solve(DataAnalysis.Numerical.ODESolving.ODENumericalSolving.Function,System.Double,System.Double[],System.Double,System.Double[],System.Double)">
            <summary>
            Resuelve una ODE.
            </summary>
            <param name="f">
            Función real.
            </param>
            <param name="t0">
            Tiempo inicial.
            </param>
            <param name="v0">
            Valores inicales de las variables.
            </param>
            <param name="t">
            Tiempo en el que se desea calcular la solución.
            </param>
            <param name="param">
            Parámetros de la función a evaluar
            </param>
            <param name="h">
            Incremento.
            </param>
            <returns>
            Valor de la solución.
            </returns>
        </member>
        <member name="T:DataAnalysis.Numerical.ODESolving.RungeKutta4ODESolving">
            <summary>
            Resuelve una ODE utilizando el método de Runge-Kutta
            de 4to orden.
            </summary>
        </member>
        <member name="M:DataAnalysis.Numerical.ODESolving.RungeKutta4ODESolving.Solve(DataAnalysis.Numerical.ODESolving.ODENumericalSolving.Function,System.Double,System.Double[],System.Double,System.Double[],System.Double)">
            <summary>
            Resuelve una ODE.
            </summary>
            <param name="f">
            Función real.
            </param>
            <param name="t0">
            Tiempo inicial.
            </param>
            <param name="v0">
            Valores inicales de las variables.
            </param>
            <param name="t">
            Tiempo en el que se desea calcular la solución.
            </param>
            <param name="param">
            Parámetros de la función a evaluar.
            </param>
            <param name="h">
            Incremento.
            </param>
            <returns>
            Valor de la solución.
            </returns>
        </member>
        <member name="T:DataAnalysis.Numerical.ODESolving.RungeKuttaFehlbergODESolving">
            <summary>
            Resuelve una ODE utilizando el método de Runge-Kutta-Fehlberg.
            </summary>
        </member>
        <member name="M:DataAnalysis.Numerical.ODESolving.RungeKuttaFehlbergODESolving.Solve(DataAnalysis.Numerical.ODESolving.ODENumericalSolving.Function,System.Double,System.Double[],System.Double,System.Double[],System.Double,System.Double)">
            <summary>
            Resuelve una ODE.
            </summary>
            <param name="f">
            Función real.
            </param>
            <param name="t0">
            Tiempo inicial.
            </param>
            <param name="v0">
            Valores inicales de las variables.
            </param>
            <param name="t">
            Tiempo en el que se desea calcular la solución.
            </param>
            <param name="param">
            Parámetros de la función a evalaur.
            </param>
            <param name="h">
            Incremento.
            </param>
            <param name="tolerance">
            Tolerancia de la adaptación
            </param>
            <returns>
            Valor de la solución.
            </returns>
        </member>
        <member name="T:DataAnalysis.Numerical.Optimization.DifferencialEvolutionOptimization">
            <summary>
            Clase base para la optimización utilizando 
            el método Differential Evolution.
            </summary>
        </member>
        <member name="T:DataAnalysis.Numerical.Optimization.NumericalOptimization">
            <summary>
            Clase base para los métodos de optimización numérica.
            </summary>
        </member>
        <member name="F:DataAnalysis.Numerical.Optimization.NumericalOptimization.VTR">
            <summary>
            Valor a alcanzar.
            </summary>
        </member>
        <member name="F:DataAnalysis.Numerical.Optimization.NumericalOptimization.FuncCallsCount">
            <summary>
            Contador de llamadas a la función objetivo.
            </summary>
        </member>
        <member name="F:DataAnalysis.Numerical.Optimization.NumericalOptimization.TolFun">
            <summary>
            Tolerancia de la función.
            </summary>
        </member>
        <member name="F:DataAnalysis.Numerical.Optimization.NumericalOptimization.SearchDimension">
            <summary>
            Dimensión del espacio de búsqueda.
            </summary>
        </member>
        <member name="M:DataAnalysis.Numerical.Optimization.NumericalOptimization.#ctor(System.Double)">
            <summary>
            Crea una instancia de NumericalOptimization.
            </summary>
            <param name="tolfun">
            Tolerancia de la función.
            </param>
        </member>
        <member name="T:DataAnalysis.Numerical.Optimization.NumericalOptimization.OptimizationInfo">
            <summary>
            Información de salida del proceso de optimización
            </summary>
        </member>
        <member name="T:DataAnalysis.Numerical.Optimization.NumericalOptimization.Function">
            <summary>
            Delegado a la función a miminizar.
            </summary>
            <param name="x">
            Valores a evaluar.
            </param>
            <returns>
            Valor de la función
            </returns>
        </member>
        <member name="T:DataAnalysis.Numerical.Optimization.DifferentialEvolutionStartPointOptimization">
            <summary>
            Busca los valores mínimos de una función multi-variable,
            a partir de un punto inicial, utilizando el método 
            Differential Evolution.
            </summary>
        </member>
        <member name="M:DataAnalysis.Numerical.Optimization.DifferentialEvolutionStartPointOptimization.#ctor(System.Double,System.Double,System.Int32,System.Int32,System.Boolean,System.Double)">
            <summary>
            Crea una instancia de DifferentialEvolutionStartPointOptimization.
            </summary>
            <param name="xoverrate">
            Tasa de cruzamiento.
            </param>
            <param name="mutrate">
            Tasa de mutación.
            </param>
            <param name="popsize">
            Tamaño de la población.
            </param>
            <param name="gensize">
            Cantidad de generaciones.
            </param>
            <param name="elitism">
            Selección elitista.
            </param>
            <param name="tolfun">
            Tolerancia de la función.
            </param>
        </member>
        <member name="M:DataAnalysis.Numerical.Optimization.DifferentialEvolutionStartPointOptimization.Minimize(DataAnalysis.Numerical.Optimization.NumericalOptimization.Function,System.Double,DataAnalysis.Basic.RVector,DataAnalysis.Numerical.Optimization.NumericalOptimization.OptimizationInfo@)">
            <summary>
            Minimiza una función multivariable a partir de un
            punto inicial.
            </summary>
            <param name="f">
            Función real.
            </param>
            <param name="vtr">
            Valor a alcanzar.
            </param>
            <param name="x">
            Punto inicial de la optimización.
            </param>
            <param name="optimizationInfo">
            Información del proceso de optimización.
            </param>
        </member>
        <member name="M:DataAnalysis.Numerical.Optimization.DifferentialEvolutionStartPointOptimization.CreateNextGeneration">
            <summary>
            Crea una nueva generación de la población.
            </summary>
        </member>
        <member name="T:DataAnalysis.Numerical.Optimization.DifferentialEvolutionIntervalOptimization">
            <summary>
            Busca los valores mínimos de una función multi-variable,
            en un intervalo, utilizando el método Differential Evolution.
            </summary>
        </member>
        <member name="M:DataAnalysis.Numerical.Optimization.DifferentialEvolutionIntervalOptimization.#ctor(System.Double,System.Double,System.Int32,System.Int32,System.Boolean,System.Double)">
            <summary>
            Crea una instancia de DifferentialEvolutionIntervalOptimization.
            </summary>
            <param name="xoverrate">
            Tasa de cruzamiento.
            </param>
            <param name="mutrate">
            Tasa de mutación.
            </param>
            <param name="popsize">
            Tamaño de la población.
            </param>
            <param name="gensize">
            Cantidad de generaciones.
            </param>
            <param name="elitism">
            Selección elitista.
            </param>
            <param name="tolfun">
            Tolerancia de la función.
            </param>
        </member>
        <member name="M:DataAnalysis.Numerical.Optimization.DifferentialEvolutionIntervalOptimization.Minimize(DataAnalysis.Numerical.Optimization.NumericalOptimization.Function,System.Double,DataAnalysis.Basic.RVector,DataAnalysis.Basic.RVector,DataAnalysis.Numerical.Optimization.NumericalOptimization.OptimizationInfo@)">
            <summary>
            Minimiza una función multivariable en un intervalo.
            </summary>
            <param name="f">
            Función real.
            </param>
            <param name="vtr">
            Valor a alcanzar.
            </param>
            <param name="minInterval">
            Valores mínimos del intervalo de búsqueda.
            </param>
            <param name="maxInterval">
            Valores máximos del intervalo de búsqueda.
            </param>
            <param name="optimizationInfo">
            Información del proceso de optimización.
            </param>
        </member>
        <member name="M:DataAnalysis.Numerical.Optimization.DifferentialEvolutionIntervalOptimization.CreateNextGeneration">
            <summary>
            Crea una nueva generación de la población.
            </summary>
        </member>
        <member name="T:DataAnalysis.Numerical.Optimization.PopulationMember">
            <summary>
            Modela un miembro de la población.
            </summary>
        </member>
        <member name="M:DataAnalysis.Numerical.Optimization.PopulationMember.#ctor(System.Int32,System.Boolean,DataAnalysis.Basic.RVector,DataAnalysis.Basic.RVector)">
            <summary>
            Crea una instancia de PopulationMember
            </summary>
            <param name="length">
            Cantidad de genes que posee el miembro de la población.
            </param>
            <param name="createGenes">
            Indicador de creación de los genes. true, inicializa los
            genes.
            </param>
            <param name="minInterval">
            Valores mínimos en los que se pueden inicializar los genes.
            </param>
            <param name="maxInterval">
            Valores máximos en los que se pueden inicializar los genes.
            </param>
        </member>
        <member name="M:DataAnalysis.Numerical.Optimization.PopulationMember.#ctor(System.Int32,System.Boolean,DataAnalysis.Basic.RVector)">
            <summary>
            Crea una instancia de PopulationMember.
            </summary>
            <param name="length">
            Cantidad de genes que posee el miembro de la población.
            </param>
            <param name="createGenes">
            Indicador de creación de los genes. true, inicializa los
            genes.
            </param>
            <param name="parentGenes">
            Genes a partir de los cuales se genera el nuevo miembro.
            </param>
        </member>
        <member name="M:DataAnalysis.Numerical.Optimization.PopulationMember.Mutate">
            <summary>
            Muta los genes de un miembro de la población intercambiándolos
            aleatoriamente.
            </summary>
        </member>
        <member name="M:DataAnalysis.Numerical.Optimization.PopulationMember.ExtractMemberValues(System.Double[]@)">
            <summary>
            Extrae los valores del miembro de la población.
            </summary>
            <param name="values">
            Valores del miembro de la población.
            </param>
        </member>
        <member name="M:DataAnalysis.Numerical.Optimization.PopulationMember.RandomPerturbation(DataAnalysis.Basic.RVector)">
            <summary>
            Adiciona una perturbación a los elementos de un vector.
            </summary>
            <param name="data">
            Vector real.
            </param>
            <returns>
            Vector perturbado.
            </returns>
        </member>
        <member name="M:DataAnalysis.Numerical.Optimization.PopulationMember.RandomPositions(System.Int32)">
            <summary>
            Genera un arreglo aleatorio compuesto por elementos únicos
            utilizando el algoritmo de Fisher-Yates.
            </summary>
            <param name="n">
            Cantidad de elementos arreglo.
            </param>
            <returns>
            Arreglo aleatorio.
            </returns>
        </member>
        <member name="M:DataAnalysis.Numerical.Optimization.PopulationMember.NextNormal(System.Double,System.Double)">
            <summary>
            Genera una muestra aleatoria que pertenece a una 
            distribución Normal.
            </summary>
            <param name="mu">
            Valor medio.
            </param>
            <param name="sigma">
            Desviación estándar.
            </param>
            <returns>
            Muestra aleatoria.
            </returns>
        </member>
        <member name="T:DataAnalysis.Numerical.Optimization.PopulationMemberComparer">
            <summary>
            Compara dos miembros de la población por sus valores de aptitud.
            </summary>
        </member>
        <member name="T:DataAnalysis.Numerical.Optimization.GeneticAlgorithOptimization">
            <summary>
            Clase base para la optimización utilizando 
            el método Genetic Algorith.
            </summary>
        </member>
        <member name="T:DataAnalysis.Numerical.Optimization.GeneticAlgorithStartPointOptimization">
            <summary>
            Busca los valores mínimos de una función multi-variable,
            a partir de un punto inicial, utilizando el método 
            Genetic Algorith.
            </summary>
        </member>
        <member name="M:DataAnalysis.Numerical.Optimization.GeneticAlgorithStartPointOptimization.#ctor(System.Double,System.Double,System.Int32,System.Int32,System.Boolean,System.Double)">
            <summary>
            Crea una instancia de GeneticAlgorithStartPointOptimization.
            </summary>
            <param name="xoverrate">
            Tasa de cruzamiento.
            </param>
            <param name="mutrate">
            Tasa de mutación.
            </param>
            <param name="popsize">
            Tamaño de la población.
            </param>
            <param name="gensize">
            Cantidad de generaciones.
            </param>
            <param name="elitism">
            Selección elitista.
            </param>
            <param name="tolfun">
            Tolerancia de la función.
            </param>
        </member>
        <member name="M:DataAnalysis.Numerical.Optimization.GeneticAlgorithStartPointOptimization.Minimize(DataAnalysis.Numerical.Optimization.NumericalOptimization.Function,System.Double,DataAnalysis.Basic.RVector,DataAnalysis.Numerical.Optimization.NumericalOptimization.OptimizationInfo@)">
            <summary>
            Minimiza una función multivariable a partir de un
            punto inicial.
            </summary>
            <param name="f">
            Función real.
            </param>
            <param name="vtr">
            Valor a alcanzar.
            </param>
            <param name="x">
            Punto inicial de la optimización.
            </param>
            <param name="optimizationInfo">
            Información del proceso de optimización.
            </param>
        </member>
        <member name="M:DataAnalysis.Numerical.Optimization.GeneticAlgorithStartPointOptimization.CreateNextGeneration">
            <summary>
            Crea una nueva generación de la población.
            </summary>
        </member>
        <member name="T:DataAnalysis.Numerical.Optimization.GeneticAlgorithIntervalOptimization">
            <summary>
            Busca los valores mínimos de una función multi-variable,
            en un intervalo, utilizando el método Genetic Algorith.
            </summary>
        </member>
        <member name="M:DataAnalysis.Numerical.Optimization.GeneticAlgorithIntervalOptimization.#ctor(System.Double,System.Double,System.Int32,System.Int32,System.Boolean,System.Double)">
            <summary>
            Crea una instancia de GeneticAlgorithIntervalOptimization.
            </summary>
            <param name="xoverrate">
            Tasa de cruzamiento.
            </param>
            <param name="mutrate">
            Tasa de mutación.
            </param>
            <param name="popsize">
            Tamaño de la población.
            </param>
            <param name="gensize">
            Cantidad de generaciones.
            </param>
            <param name="elitism">
            Selección elitista.
            </param>
            <param name="tolfun">
            Tolerancia de la función.
            </param>
        </member>
        <member name="M:DataAnalysis.Numerical.Optimization.GeneticAlgorithIntervalOptimization.Minimize(DataAnalysis.Numerical.Optimization.NumericalOptimization.Function,System.Double,DataAnalysis.Basic.RVector,DataAnalysis.Basic.RVector,DataAnalysis.Numerical.Optimization.NumericalOptimization.OptimizationInfo@)">
            <summary>
            Minimiza una función multivariable en un intervalo.
            </summary>
            <param name="f">
            Función real.
            </param>
            <param name="vtr">
            Valor a alcanzar.
            </param>
            <param name="minInterval">
            Valores mínimos del intervalo de búsqueda.
            </param>
            <param name="maxInterval">
            Valores máximos del intervalo de búsqueda.
            </param>
            <param name="optimizationInfo">
            Información del proceso de optimización.
            </param>
        </member>
        <member name="M:DataAnalysis.Numerical.Optimization.GeneticAlgorithIntervalOptimization.CreateNextGeneration">
            <summary>
            Crea una nueva generación de la población.
            </summary>
        </member>
        <member name="T:DataAnalysis.Numerical.Optimization.Chromosome">
            <summary>
            Modela un cromosoma.
            </summary>
        </member>
        <member name="M:DataAnalysis.Numerical.Optimization.Chromosome.#ctor(System.Int32,System.Boolean,DataAnalysis.Basic.RVector,DataAnalysis.Basic.RVector)">
            <summary>
            Crea una instancia de Chromosome.
            </summary>
            <param name="length">
            Cantidad de genes que posee el cromosoma.
            </param>
            <param name="createGenes">
            Indicador de creación de los genes. true, inicializa los
            genes.
            </param>
            <param name="minInterval">
            Valores mínimos en los que se pueden inicializar los genes.
            </param>
            <param name="maxInterval">
            Valores máximos en los que se pueden inicializar los genes.
            </param>
        </member>
        <member name="M:DataAnalysis.Numerical.Optimization.Chromosome.#ctor(System.Int32,System.Boolean,DataAnalysis.Basic.RVector)">
            <summary>
            Crea una instancia de Chromosome.
            </summary>
            <param name="length">
            Cantidad de genes que posee el cromosoma.
            </param>
            <param name="createGenes">
            Indicador de creación de los genes. true, inicializa los
            genes.
            </param>
            <param name="parentGenes">
            Genes a partir de los cuales se generará el nuevo cromosoma.
            </param>
        </member>
        <member name="M:DataAnalysis.Numerical.Optimization.Chromosome.Mutate">
            <summary>
            Muta los genes de los comosomas intercambiándolos aleatoriamente.
            </summary>
        </member>
        <member name="M:DataAnalysis.Numerical.Optimization.Chromosome.ExtractChromosomeValues(System.Double[]@)">
            <summary>
            Extrae los valores del cromosoma.
            </summary>
            <param name="values">
            Valores del cromosoma
            </param>
        </member>
        <member name="M:DataAnalysis.Numerical.Optimization.Chromosome.RandomPerturbation(DataAnalysis.Basic.RVector)">
            <summary>
            Adiciona una perturbación a los elementos de un vector.
            </summary>
            <param name="data">
            Vector real.
            </param>
            <returns>
            Vector perturbado.
            </returns>
        </member>
        <member name="M:DataAnalysis.Numerical.Optimization.Chromosome.RandomPositions(System.Int32)">
            <summary>
            Genera un arreglo aleatorio compuesto por elementos únicos
            utilizando el algoritmo de Fisher-Yates.
            </summary>
            <param name="n">
            Cantidad de elementos arreglo.
            </param>
            <returns>
            Arreglo aleatorio.
            </returns>
        </member>
        <member name="M:DataAnalysis.Numerical.Optimization.Chromosome.NextNormal(System.Double,System.Double)">
            <summary>
            Genera una muestra aleatoria que pertenece a una 
            distribución Normal.
            </summary>
            <param name="mu">
            Valor medio.
            </param>
            <param name="sigma">
            Desviación estándar.
            </param>
            <returns>
            Muestra aleatoria.
            </returns>
        </member>
        <member name="T:DataAnalysis.Numerical.Optimization.ChromosomeComparer">
            <summary>
            Compara dos cromosomas por sus valores de aptitud.
            </summary>
        </member>
        <member name="T:DataAnalysis.Numerical.Optimization.SimulatedAnnealingOptimization">
            <summary>
            Clase base para la optimización utilizando
            el método SimulatedAnnealing.
            </summary>
        </member>
        <member name="M:DataAnalysis.Numerical.Optimization.SimulatedAnnealingOptimization.RandomPositions(System.Int32)">
            <summary>
            Genera un arreglo aleatorio compuesto por elementos únicos
            utilizando el algoritmo de Fisher-Yates.
            </summary>
            <param name="n">
            Cantidad de elementos arreglo.
            </param>
            <returns>
            Arreglo aleatorio.
            </returns>
        </member>
        <member name="M:DataAnalysis.Numerical.Optimization.SimulatedAnnealingOptimization.NextNormal(System.Double,System.Double)">
            <summary>
            Genera una muestra aleatoria que pertenece a una 
            distribución Normal.
            </summary>
            <param name="mu">
            Valor medio.
            </param>
            <param name="sigma">
            Desviación estándar.
            </param>
            <returns>
            Muestra aleatoria.
            </returns>
        </member>
        <member name="T:DataAnalysis.Numerical.Optimization.SimulatedAnnealingStartPointOptimization">
            <summary>
            Busca los valores mínimos de una función multi-variable,
            a partir de un punto inicial, utilizando el método 
            Simulated Annealing.
            </summary>
        </member>
        <member name="M:DataAnalysis.Numerical.Optimization.SimulatedAnnealingStartPointOptimization.#ctor(System.Int32,System.Double)">
            <summary>
            Crea una instancia de SimulatedAnnealingIntervalOptimization.
            </summary>
            <param name="maxiter">
            Cantidad máxima de iteraciones a realizar.
            </param>
            <param name="tolfun">
            Tolerancia de la función.
            </param>
        </member>
        <member name="M:DataAnalysis.Numerical.Optimization.SimulatedAnnealingStartPointOptimization.Minimize(DataAnalysis.Numerical.Optimization.NumericalOptimization.Function,System.Double,DataAnalysis.Basic.RVector,DataAnalysis.Numerical.Optimization.NumericalOptimization.OptimizationInfo@)">
            <summary>
            Minimiza una función multivariable a partir de un
            punto inicial.
            </summary>
            <param name="f">
            Función real.
            </param>
            <param name="vtr">
            Valor a alcanzar.
            </param>
            <param name="x">
            Punto inicial de la optimización.
            </param>
            <param name="optimizationInfo">
            Información del proceso de optimización.
            </param>
        </member>
        <member name="M:DataAnalysis.Numerical.Optimization.SimulatedAnnealingStartPointOptimization.RandomPerturbation(DataAnalysis.Basic.RVector)">
            <summary>
            Adiciona una perturbación a los elementos de un vector.
            </summary>
            <param name="data">
            Vector real.
            </param>
            <returns>
            Vector perturbado.
            </returns>
        </member>
        <member name="T:DataAnalysis.Numerical.Optimization.SimulatedAnnealingIntervalOptimization">
            <summary>
            Busca los valores mínimos de una función multi-variable,
            en un intervalo, utilizando el método Simulated Annealing.
            </summary>
        </member>
        <member name="M:DataAnalysis.Numerical.Optimization.SimulatedAnnealingIntervalOptimization.#ctor(System.Int32,System.Double)">
            <summary>
            Crea una instancia de SimulatedAnnealingIntervalOptimization.
            </summary>
            <param name="maxiter">
            Cantidad máxima de iteraciones a realizar.
            </param>
            <param name="tolfun">
            Tolerancia de la función.
            </param>
        </member>
        <member name="M:DataAnalysis.Numerical.Optimization.SimulatedAnnealingIntervalOptimization.Minimize(DataAnalysis.Numerical.Optimization.NumericalOptimization.Function,System.Double,DataAnalysis.Basic.RVector,DataAnalysis.Basic.RVector,DataAnalysis.Numerical.Optimization.NumericalOptimization.OptimizationInfo@)">
            <summary>
            Minimiza una función multivariable en un intervalo.
            </summary>
            <param name="f">
            Función real.
            </param>
            <param name="vtr">
            Valor a alcanzar.
            </param>
            <param name="minInterval">
            Valores mínimos del intervalo de búsqueda.
            </param>
            <param name="maxInterval">
            Valores máximos del intervalo de búsqueda.
            </param>
            <param name="optimizationInfo">
            Información del proceso de optimización.
            </param>
        </member>
        <member name="M:DataAnalysis.Numerical.Optimization.SimulatedAnnealingIntervalOptimization.RandomPerturbation(DataAnalysis.Basic.RVector)">
            <summary>
            Adiciona una perturbación a los elementos de un vector.
            </summary>
            <param name="data">
            Vector real.
            </param>
            <returns>
            Vector perturbado.
            </returns>
        </member>
        <member name="T:DataAnalysis.Numerical.Optimization.SteepestDescentOptimization">
            <summary>
            Busca los valores mínimos de una función multi-variable
            utilizando el método del gradiente descendente.
            </summary>
        </member>
        <member name="M:DataAnalysis.Numerical.Optimization.SteepestDescentOptimization.#ctor(System.Double,System.Double)">
            <summary>
            Crea una instancia de SteepestDescentOptimization
            </summary>
            <param name="alpha">
            Tamaño del paso.
            </param>
            <param name="tolfun">
            Tolerancia de la función.
            </param>
        </member>
        <member name="M:DataAnalysis.Numerical.Optimization.SteepestDescentOptimization.Minimize(DataAnalysis.Numerical.Optimization.NumericalOptimization.Function,System.Double,DataAnalysis.Basic.RVector,DataAnalysis.Numerical.Optimization.NumericalOptimization.OptimizationInfo@)">
            <summary>
            Minimiza una función multivariable a partir de un
            punto inicial.
            </summary>
            <param name="f">
            Función real.
            </param>
            <param name="vtr">
            Valor a alcanzar.
            </param>
            <param name="x">
            Punto inicial de la optimización.
            </param>
            <param name="optimizationInfo">
            Información del proceso de optimización.
            </param>
        </member>
        <member name="M:DataAnalysis.Numerical.Optimization.SteepestDescentOptimization.GradG(DataAnalysis.Basic.RVector,System.Double)">
            <summary>
            Calcula el gradiente de la función.
            </summary>
            <param name="x"></param>
            <param name="h"></param>
            <returns></returns>
        </member>
        <member name="T:DataAnalysis.Numerical.Transform.FourierTransform">
            <summary>
            Represent a class that performs real or complex valued Fast Fourier 
            Transforms. Instantiate it and use the FFT or TableFFT methods to 
            compute complex to complex FFTs. Use FFTReal for real to complex 
            FFTs which are much faster than standard FFTs.
            </summary>
        </member>
        <member name="M:DataAnalysis.Numerical.Transform.FourierTransform.FFT(DataAnalysis.Basic.RVector@,System.Boolean,DataAnalysis.Numerical.Transform.FourierTransformModeEnum)">
            <summary>
            Compute the forward or inverse Fourier Transform of data using the specified mode
            </summary>
            <param name="data">The complex data stored as alternating real and imaginary parts</param>
            <param name="forward">true for a forward transform, false for inverse transform</param>
            <param name="mode">Mode to be used</param>
        </member>
        <member name="M:DataAnalysis.Numerical.Transform.FourierTransform.FFT(DataAnalysis.Basic.RMatrix@,System.Boolean,DataAnalysis.Numerical.Transform.FourierTransformModeEnum)">
            <summary>
            Compute the forward or inverse Fourier Transform of data using the specified mode
            </summary>
            <param name="data">The complex data stored as columns in a matrix. 
            Column 1. real 2. imaginary</param>
            <param name="forward">true for a forward transform, false for inverse transform</param>
            <param name="mode">Mode to be used</param>
        </member>
        <member name="M:DataAnalysis.Numerical.Transform.FourierTransform.DynamicFFT(DataAnalysis.Basic.RVector@,System.Boolean)">
            <summary>
            Compute the forward or inverse Fourier Transform of data, with 
            data containing complex valued data as alternating real and 
            imaginary parts. The length must be a power of 2.
            </summary>
            <param name="data">The complex data stored as alternating real 
            and imaginary parts</param>
            <param name="forward">true for a forward transform, false for 
            inverse transform</param>
        </member>
        <member name="M:DataAnalysis.Numerical.Transform.FourierTransform.DynamicFFT(DataAnalysis.Basic.RMatrix@,System.Boolean)">
            <summary>
            Compute the forward or inverse Fourier Transform of data, with 
            data containing complex valued data as columns in a matrix.
            The length must be a power of 2.
            </summary>
            <param name="data">The complex data stored as columns in a matrix.
            Column 1. real 2. imaginary</param>
            <param name="forward">true for a forward transform, false for 
            inverse transform</param>
        </member>
        <member name="M:DataAnalysis.Numerical.Transform.FourierTransform.TableFFT(DataAnalysis.Basic.RVector@,System.Boolean)">
            <summary>
            Compute the forward or inverse Fourier Transform of data, with data
            containing complex valued data as alternating real and imaginary 
            parts. The length must be a power of 2. This method caches values 
            and should be slightly faster on repeated uses than then FFT method. 
            It is also slightly more accurate.
            </summary>
            <param name="data">The complex data stored as alternating real 
            and imaginary parts</param>
            <param name="forward">true for a forward transform, false for 
            inverse transform</param>
        </member>
        <member name="M:DataAnalysis.Numerical.Transform.FourierTransform.TableFFT(DataAnalysis.Basic.RMatrix@,System.Boolean)">
            <summary>
            Compute the forward or inverse Fourier Transform of data, with data
            containing complex valued data as columns in a matrix. 
            The length must be a power of 2. This method caches values 
            and should be slightly faster on repeated uses than then FFT method. 
            It is also slightly more accurate.
            </summary>
            <param name="data">The complex data stored as columns in a matrix.
            Column 1. real 2. imaginary</param>
            <param name="forward">true for a forward transform, false for 
            inverse transform</param>
        </member>
        <member name="M:DataAnalysis.Numerical.Transform.FourierTransform.Initialize(System.Int32)">
            <summary>
            Call this with the size before using the TableFFT version
            Fills in tables for speed. Done automatically in TableFFT
            </summary>
            <param name="size">The size of the FFT in samples</param>
        </member>
        <member name="M:DataAnalysis.Numerical.Transform.FourierTransform.Reverse(DataAnalysis.Basic.RVector@,System.Int32)">
            <summary>
            Swap data indices whenever index i has binary 
            digits reversed from index j, where data is
            two doubles per index.
            </summary>
            <param name="data"></param>
            <param name="n"></param>
        </member>
        <member name="F:DataAnalysis.Numerical.Transform.FourierTransform._cosTable">
            <summary>
            Precomputed cos table for speed
            </summary>
        </member>
        <member name="F:DataAnalysis.Numerical.Transform.FourierTransform._sinTable">
            <summary>
            Precomputed sin table for speed
            </summary>
        </member>
        <member name="T:DataAnalysis.Numerical.Transform.FourierTransformModeEnum">
            <summary>
            FFT Computation mode
            </summary>
        </member>
        <member name="F:DataAnalysis.Numerical.Transform.FourierTransformModeEnum.UseLookupTable">
            <summary>
            Store the trigonometric values in a table (faster)
            </summary>
        </member>
        <member name="F:DataAnalysis.Numerical.Transform.FourierTransformModeEnum.DynamicTrigonometricValues">
            <summary>
            Dynamicaly compute the trigonometric values (use less memory)
            </summary>
        </member>
        <member name="T:DataAnalysis.Numerical.Transform.WaveMath">
            <summary>
            Implementa mecanismos de convolución y otras herramientas generales
            </summary>
        </member>
        <member name="M:DataAnalysis.Numerical.Transform.WaveMath.Convolve(DataAnalysis.Numerical.Transform.WaveMath.ConvolutionModeEnum,DataAnalysis.Basic.RVector,DataAnalysis.Basic.RVector,System.Boolean,System.Int32,DataAnalysis.Numerical.Transform.FourierTransformModeEnum)">
            <summary>
            Convolves vectors input and filter.
            </summary>
            <param name="convolutionMode">Defines what convolution function should be used</param> 
            <param name="input">The input signal</param>
            <param name="filter">The filter</param>
            <param name="returnOnlyValid">True to return only the middle of the array</param>
            <param name="margin">Margin to be used if returnOnlyValid is set to true</param>
            <param name="mode">FFT mode</param>
            <returns></returns>
        </member>
        <member name="M:DataAnalysis.Numerical.Transform.WaveMath.ConvolveNormal(DataAnalysis.Basic.RVector,DataAnalysis.Basic.RVector,System.Boolean,System.Int32)">
            <summary>
            Convolves vectors input and filter.
            </summary>
            <param name="input">The input signal</param>
            <param name="filter">The filter</param>
            <param name="returnOnlyValid">True to return only the middle of the array</param>
            <param name="margin">Margin to be used if returnOnlyValid is set to true</param>
            <returns></returns>
        </member>
        <member name="M:DataAnalysis.Numerical.Transform.WaveMath.ConvolveFFT(DataAnalysis.Basic.RVector,DataAnalysis.Basic.RVector,System.Boolean,System.Int32,DataAnalysis.Numerical.Transform.FourierTransformModeEnum)">
            <summary>
            Convolves vectors input and filter using a managed FFT algorithm.
            </summary>
            <param name="input">The input signal</param>
            <param name="filter">The filter</param>
            <param name="returnOnlyValid">True to return only the middle of the array</param>
            <param name="margin">Margin to be used if returnOnlyValid is set to true</param>
            <param name="mode">Mode</param>
            <returns></returns>
        </member>
        <member name="M:DataAnalysis.Numerical.Transform.WaveMath.Scale(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Scales a number based in its minimun and maximum
            </summary>
            <param name="x"></param>
            <param name="currentMin"></param>
            <param name="currentMax"></param>
            <param name="newMin"></param>
            <param name="newMax"></param>
            <returns></returns>
        </member>
        <member name="M:DataAnalysis.Numerical.Transform.WaveMath.DownSample(DataAnalysis.Basic.RVector,System.Int32,System.Boolean)">
            <summary>
            Decreases the sampling rate of the input by keeping every odd sample starting with the first sample.
            </summary>
            <param name="input"></param>
            <param name="factor"></param>
            <param name="invert"></param>
            <returns></returns>
        </member>
        <member name="M:DataAnalysis.Numerical.Transform.WaveMath.UpSample(DataAnalysis.Basic.RVector,System.Int32,System.Boolean)">
            <summary>
            Increases the sampling rate of the input by inserting n-1 zeros between samples. 
            </summary>
            <returns></returns>
        </member>
        <member name="T:DataAnalysis.Numerical.Transform.WaveMath.ConvolutionModeEnum">
            <summary>
            Convolution mode
            </summary>
        </member>
        <member name="F:DataAnalysis.Numerical.Transform.WaveMath.ConvolutionModeEnum.Normal">
            <summary>
            Normal
            </summary>
        </member>
        <member name="F:DataAnalysis.Numerical.Transform.WaveMath.ConvolutionModeEnum.FFT">
            <summary>
            FFT with the managed library
            </summary>
        </member>
        <member name="T:DataAnalysis.Numerical.Transform.CommonMotherWavelets">
            <summary>
            Provides common mother wavelets, like Daubechies, Haar, etc.
            </summary>
        </member>
        <member name="M:DataAnalysis.Numerical.Transform.CommonMotherWavelets.GetScalingWaveletFromName(System.String)">
            <summary>
            Gets the Mother Wavelet object base on it name. Returns null if the name is not found.
            </summary>
            <param name="name">The name of the wavelet. Examples: db4, haar, sym2, dmeyer, coif3</param>
            <returns></returns>
        </member>
        <member name="M:DataAnalysis.Numerical.Transform.CommonMotherWavelets.GetFilterWaveletFromName(System.String)">
            <summary>
            Gets the Mother Wavelet object base on it name. Returns null if the name is not found.
            </summary>
            <param name="name">The name of the wavelet. Examples: bakshi1994</param>
            <returns></returns>
        </member>
        <member name="P:DataAnalysis.Numerical.Transform.CommonMotherWavelets.ScalingWavelets">
            <summary>
            List of scaling wavelets. 
            </summary>
        </member>
        <member name="P:DataAnalysis.Numerical.Transform.CommonMotherWavelets.FilterWavelets">
            <summary>
            List of filter wavelets
            </summary>
        </member>
        <member name="T:DataAnalysis.Numerical.Transform.MotherWavelet">
            <summary>
            Mother wavelet base class
            </summary>
        </member>
        <member name="M:DataAnalysis.Numerical.Transform.MotherWavelet.#ctor(System.String,DataAnalysis.Basic.RVector)">
            <summary>
            Constructior using the name and the scaling filter
            </summary>
            <param name="name">Name of the mother wavelet</param>
            <param name="scalingFilter">The scaling function of the mother wavelet</param>
        </member>
        <member name="M:DataAnalysis.Numerical.Transform.MotherWavelet.#ctor(DataAnalysis.Basic.RVector)">
            <summary>
            Constructior using the name and the scaling filter
            </summary>
            <param name="scalingFilter">The scaling function of the mother wavelet</param>
        </member>
        <member name="M:DataAnalysis.Numerical.Transform.MotherWavelet.#ctor(System.String,System.Collections.Generic.List{DataAnalysis.Basic.RVector})">
            <summary>
            Constructior using the name and the filters
            </summary>
            <param name="name">Name of the mother wavelet</param>
            <param name="filters">The decomposition and reconstruction filters of the mother wavelet</param>
        </member>
        <member name="M:DataAnalysis.Numerical.Transform.MotherWavelet.CalculateFilters">
            <summary>
            Calculates the reconstruction and decomposition filters 
            </summary>
        </member>
        <member name="M:DataAnalysis.Numerical.Transform.MotherWavelet.LoadScalingWaveletFromName(System.String)">
            <summary>
            Loads the mother-wavelet by its name. Just a link to CommonMotherWavelets.GetScalingWaveletFromName.
            </summary>
            <param name="name">Mother-wavelet name</param>
            <returns></returns>
        </member>
        <member name="M:DataAnalysis.Numerical.Transform.MotherWavelet.LoadFilterWaveletFromName(System.String)">
            <summary>
            Loads the mother-wavelet by its name. Just a link to CommonMotherWavelets.GetFilterWaveletFromName.
            </summary>
            <param name="name">Mother-wavelet name</param>
            <returns></returns>
        </member>
        <member name="P:DataAnalysis.Numerical.Transform.MotherWavelet.Name">
            <summary>
            Name of the mother wavelet
            </summary>
        </member>
        <member name="P:DataAnalysis.Numerical.Transform.MotherWavelet.ScalingFilter">
            <summary>
            The scaling function of the mother wavelet, used to calculate the filters
            </summary>
        </member>
        <member name="P:DataAnalysis.Numerical.Transform.MotherWavelet.Filters">
            <summary>
            Decomposition and Reconstruction filters
            </summary>
        </member>
        <member name="T:DataAnalysis.Numerical.Transform.MotherWavelet.FiltersStruct">
            <summary>
            Decomposition and Reconstruction filters base-type
            </summary>
        </member>
        <member name="F:DataAnalysis.Numerical.Transform.MotherWavelet.FiltersStruct.DecompositionLowPassFilter">
            <summary>
            Decomposition Low-pass Filter
            </summary>
        </member>
        <member name="F:DataAnalysis.Numerical.Transform.MotherWavelet.FiltersStruct.DecompositionHighPassFilter">
            <summary>
            Decomposition High-pass Filter
            </summary>
        </member>
        <member name="F:DataAnalysis.Numerical.Transform.MotherWavelet.FiltersStruct.ReconstructionLowPassFilter">
            <summary>
            Reconstruction Low-pass Filter
            </summary>
        </member>
        <member name="F:DataAnalysis.Numerical.Transform.MotherWavelet.FiltersStruct.ReconstructionHighPassFilter">
            <summary>
            Reconstruction High-pass Filter
            </summary>
        </member>
        <member name="T:DataAnalysis.Numerical.Transform.DecompositionLevel">
            <summary>
            Used as the return of a DWT operation and as the input of a IDWT operation
            </summary>
        </member>
        <member name="M:DataAnalysis.Numerical.Transform.DecompositionLevel.GetDisturbances(System.Double,System.Int32)">
            <summary>
            Estimates the disturbances in the signal based on the normal distribution of the details coefficients
            </summary>
            <param name="threshold">The higher the threshold, the higher the tolerance in flutuations on energy of the details</param>
            <param name="minimunDistance">Minimun distance between disturbances to consider a new one</param>
            <returns></returns>
        </member>
        <member name="P:DataAnalysis.Numerical.Transform.DecompositionLevel.Index">
            <summary>
            Level index in DWT
            </summary>
        </member>
        <member name="P:DataAnalysis.Numerical.Transform.DecompositionLevel.Approximation">
            <summary>
            Approximation coefficients
            </summary>
        </member>
        <member name="P:DataAnalysis.Numerical.Transform.DecompositionLevel.Details">
            <summary>
            Details coefficients
            </summary>
        </member>
        <member name="P:DataAnalysis.Numerical.Transform.DecompositionLevel.Signal">
            <summary>
            Signal from which this level was created
            </summary>
        </member>
        <member name="T:DataAnalysis.Numerical.Transform.DecompositionLevel.Disturbance">
            <summary>
            Single disturbance identified in a signal
            </summary>
        </member>
        <member name="F:DataAnalysis.Numerical.Transform.DecompositionLevel.Disturbance.Start">
            <summary>
            Start of the disturbance in the details level (index of the sample)
            </summary>
        </member>
        <member name="F:DataAnalysis.Numerical.Transform.DecompositionLevel.Disturbance.Finish">
            <summary>
            Finish of the disturbance in the details level (index of the sample)
            </summary>
        </member>
        <member name="F:DataAnalysis.Numerical.Transform.DecompositionLevel.Disturbance.SignalStart">
            <summary>
            Start of the disturbance in the signal (index of the sample)
            </summary>
        </member>
        <member name="F:DataAnalysis.Numerical.Transform.DecompositionLevel.Disturbance.SignalFinish">
            <summary>
            Finish of the disturbance in the signal (index of the sample)
            </summary>
        </member>
        <member name="T:DataAnalysis.Numerical.Transform.WaveletTransform">
            <summary>
            Wavelet Transform
            </summary>
        </member>
        <member name="M:DataAnalysis.Numerical.Transform.WaveletTransform.DDWT(DataAnalysis.SignalProcessing.Signal,DataAnalysis.Numerical.Transform.MotherWavelet,System.Int32,DataAnalysis.SignalProcessing.SignalExtension.ExtensionMode,DataAnalysis.Numerical.Transform.WaveMath.ConvolutionModeEnum)">
            <summary>
            Multilevel Discrete Dyadic Wavelet Transform
            </summary>
            <param name="signal">The signal. Example: new Signal(5, 6, 7, 8, 1, 2, 3, 4)</param>
            <param name="motherWavelet">The mother wavelet to be used. Example: CommonMotherWavelets.GetFilterWaveletFromName("bakshi1994")</param>
            <param name="level">The depth-level to perform the DDWT</param>
            <param name="extensionMode">Signal extension mode</param>
            <param name="convolutionMode">Defines what convolution function should be used</param>
            <returns></returns>
        </member>
        <member name="M:DataAnalysis.Numerical.Transform.WaveletTransform.DWT(DataAnalysis.SignalProcessing.Signal,DataAnalysis.Numerical.Transform.MotherWavelet,System.Int32,DataAnalysis.SignalProcessing.SignalExtension.ExtensionMode,DataAnalysis.Numerical.Transform.WaveMath.ConvolutionModeEnum)">
            <summary>
            Multilevel 1-D Discrete Wavelet Transform
            </summary>
            <param name="signal">The signal. Example: new Signal(5, 6, 7, 8, 1, 2, 3, 4)</param>
            <param name="motherWavelet">The mother wavelet to be used. Example: CommonMotherWavelets.GetWaveletFromName("DB4")</param>
            <param name="level">The depth-level to perform the DWT</param>
            <param name="extensionMode">Signal extension mode</param>
            <param name="convolutionMode">Defines what convolution function should be used</param>
            <returns></returns>
        </member>
        <member name="M:DataAnalysis.Numerical.Transform.WaveletTransform.IDWT(System.Collections.Generic.List{DataAnalysis.Numerical.Transform.DecompositionLevel},DataAnalysis.Numerical.Transform.MotherWavelet,System.Int32,DataAnalysis.Numerical.Transform.WaveMath.ConvolutionModeEnum)">
            <summary>
            Multilevel inverse discrete 1-D wavelet transform
            </summary>
            <param name="decompositionLevels">The decomposition levels of the DWT</param>
            <param name="motherWavelet">The mother wavelet to be used. Example: CommonMotherWavelets.GetWaveletFromName("DB4") </param>
            <param name="level">The depth-level to perform the DWT</param>
            <param name="convolutionMode">Defines what convolution function should be used</param>
            <returns></returns>
        </member>
        <member name="T:DataAnalysis.SignalProcessing.DataNormalization">
            <summary>
            Implementa métodos para la normalización de datos.
            </summary>
        </member>
        <member name="T:DataAnalysis.SignalProcessing.MinMaxNormalization">
            <summary>
            Clase para la normalización MinMax
            </summary>
        </member>
        <member name="M:DataAnalysis.SignalProcessing.MinMaxNormalization.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructor de la clase
            </summary>
            <param name="min">
            Valor míninmo
            </param>
            <param name="max">
            Valor máximo
            </param>
            <param name="nmin">
            Nuevo valor mínimo
            </param>
            <param name="nmax">
            Nuevo valor máximo
            </param>
        </member>
        <member name="M:DataAnalysis.SignalProcessing.MinMaxNormalization.Normalize(System.Double)">
            <summary>
            Normaliza un valor dentro del rango configurado
            </summary>
            <param name="value">
            Valor a normalizar
            </param>
            <returns>
            Valor normalizado
            </returns>
        </member>
        <member name="M:DataAnalysis.SignalProcessing.MinMaxNormalization.MinMax(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Normaliza un valor a partir de la configuración especificada
            </summary>
            <param name="value">
            Valor a normalizar
            </param>
            <param name="min">
            Valor mínimo
            </param>
            <param name="max">
            Valor máximo
            </param>
            <param name="nmin">
            Nuevo valor mínimo
            </param>
            <param name="nmax">
            Nuevo valor máximo
            </param>
            <returns>
            Valor normalizado
            </returns>
        </member>
        <member name="M:DataAnalysis.SignalProcessing.MinMaxNormalization.ToPMML">
            <summary>
            Representación en PMML de la transformación
            </summary>
            <returns></returns>
        </member>
        <member name="T:DataAnalysis.SignalProcessing.ZScoreNormalization">
            <summary>
            Clase para la normalización ZScore
            </summary>
        </member>
        <member name="M:DataAnalysis.SignalProcessing.ZScoreNormalization.#ctor(System.Double,System.Double)">
            <summary>
            Constructor de la clase
            </summary>
            <param name="mean">
            Valor medio
            </param>
            <param name="std">
            Desviación estándar
            </param>
        </member>
        <member name="M:DataAnalysis.SignalProcessing.ZScoreNormalization.Normalize(System.Double)">
            <summary>
            Normaliza un valor con la transformación ZScore
            </summary>
            <param name="value">
            Valor a transformar
            </param>
            <returns>
            Valor transformado
            </returns>
        </member>
        <member name="M:DataAnalysis.SignalProcessing.ZScoreNormalization.ZScore(System.Double,System.Double,System.Double)">
            <summary>
            Realiza la normalización ZScore dada la configuración especificada
            </summary>
            <param name="value">
            Valor a normalizar
            </param>
            <param name="mean">
            Valor medio
            </param>
            <param name="std">
            Desviación estándar
            </param>
            <returns>
            Valor normalizado
            </returns>
        </member>
        <member name="M:DataAnalysis.SignalProcessing.ZScoreNormalization.ToPMML">
            <summary>
            Representa en PMML la transformació ZScore configurada
            </summary>
            <returns></returns>
        </member>
        <member name="T:DataAnalysis.SignalProcessing.DecimalScalingNormalization">
            <summary>
            Clase para la normalización decimal-scaling
            </summary>
        </member>
        <member name="M:DataAnalysis.SignalProcessing.DecimalScalingNormalization.#ctor(System.Byte)">
            <summary>
            Genera un elemento de normalización decimal-scaling
            </summary>
            <param name="j">
            Cantidad de movimientos al punto decimal
            </param>
        </member>
        <member name="M:DataAnalysis.SignalProcessing.DecimalScalingNormalization.Normalize(System.Double)">
            <summary>
            Realiza la normalización decimal-scaling. Mapea los
            valores de un atributo a partir de mover el punto decimal de los 
            valroes del atributo.
            </summary>
            <param name="value">
            Valor del atributo a normalizar
            </param>
            <returns>
            Valor del atributo normalizado
            </returns>
        </member>
        <member name="M:DataAnalysis.SignalProcessing.DecimalScalingNormalization.DecimalScaling(System.Double,System.Byte)">
            <summary>
            Realiza la normalización decimal-scaling de un dato. Mapea los
            valores de un atributo a partir de mover el punto decimal de los 
            valroes del atributo.
            </summary>
            <param name="value">
            Valor del atributo a transformar.
            </param>
            <param name="j">
            Cantidad de movimientos al punto decimal.
            </param>
            <returns>
            Valor del atributo transformado.
            </returns>
        </member>
        <member name="M:DataAnalysis.SignalProcessing.DecimalScalingNormalization.ToPMML">
            <summary>
            Genera la representación en PMML de la normalización decimal-scaling
            </summary>
            <returns>
            Elemento xml de la normalización
            </returns>
        </member>
        <member name="M:DataAnalysis.SignalProcessing.DigitalFilters.LowPassFilter(System.Double,System.Double,System.Int32,System.Double[])">
            <summary>
            Crea un filtro Pasa Bajo con los parametros de entrada especificos
            </summary>
            <param name="fc">Frecuencia de corte del filtro</param>
            <param name="fs">Frecuencia de muestreo</param>
            <param name="m">Tamaño del filtro</param>
            <param name="window">Ventana a aplicar</param>
            <returns>Filtro creado</returns>
        </member>
        <member name="M:DataAnalysis.SignalProcessing.DigitalFilters.BandPassFilter(System.Double,System.Double,System.Double,System.Int32,System.Double[])">
            <summary>
            Crea un filtro Pasa Banda con los parametros de entrada especificos
            </summary>
            <param name="fc1">Frecuencia de corte inicial del filtro</param>
            <param name="fc2">Frecuencia de corte final del filtro</param>
            <param name="fs">Frecuencia de muestreo</param>
            <param name="m">Tamaño del filtro</param>
            <param name="window">Ventana a aplicar</param>
            <returns>Filtro creado</returns>
        </member>
        <member name="M:DataAnalysis.SignalProcessing.DigitalFilters.LowPassButtworthFilter(System.Double,System.Double,System.Double,System.Single,System.Single,DataAnalysis.Basic.RVector)">
            <summary>
            Filtro Pasa Bajos de Butterworth
            </summary>
            <param name="CutFrecuency">Frecuencia de corte</param>
            <param name="AtnFrecuency">Frecuencia de atenuacion</param>
            <param name="Atn1">Atenuacion en la Banda de corte</param>
            <param name="Atn2">Atenuacion en la Banda de atenuacion</param>
            <param name="SampleFrecuency">Frecuencia de muestreo</param>
            <param name="VariabletoTransform">Señal a Filtrar</param>
            <returns>Señal Filtrada</returns>
        </member>
        <member name="M:DataAnalysis.SignalProcessing.DigitalFilters.BandPassButtworthFilter(System.Double,System.Double,System.Double,System.Double,System.Double,System.Single,System.Single,System.Single,System.Single,DataAnalysis.Basic.RVector)">
            <summary>
            Filtro Pasa Banda de Butterworth
            </summary>
            <param name="CutFrecuency1">Frecuencia de corte 1</param>
            <param name="AtnFrecuency1">Frecuencia de atenuacion 1</param>
            <param name="CutFrecuency2">Frecuencia de corte 2</param>
            <param name="AtnFrecuency2">Frecuencia de atenuacion 2</param>
            <param name="Atn11">Atenuacion en la Banda de corte 1</param>
            <param name="Atn21">Atenuacion en la Banda de atenuacion 1</param>
            <param name="Atn12">Atenuacion en la Banda de corte 2</param>
            <param name="Atn22">Atenuacion en la Banda de atenuacion 2</param>
            <param name="SampleFrecuency">Frecuencia de muestreo</param>
            <param name="VariabletoTransform">Señal a Filtrar</param>
            <returns>Señal Filtrada</returns>
        </member>
        <member name="M:DataAnalysis.SignalProcessing.DigitalFilters.LowPassChevyshevFilter(System.Double,System.Double,System.Double,System.Single,System.Single,DataAnalysis.Basic.RVector)">
            <summary>
            Filtro Pasa Bajos de Chevyshev
            </summary>
            <param name="CutFrecuency">Frecuencia de corte</param>
            <param name="AtnFrecuency">Frecuencia de atenuacion</param>
            <param name="Atn1">Atenuacion en la Banda de corte</param>
            <param name="Atn2">Atenuacion en la Banda de atenuacion</param>
            <param name="SampleFrecuency">Frecuencia de muestreo</param>
            <param name="VariabletoTransform">Señal a Filtrar</param>
            <returns>Señal Filtrada</returns>
        </member>
        <member name="M:DataAnalysis.SignalProcessing.DigitalFilters.BandPassChevyshevFilter(System.Double,System.Double,System.Double,System.Double,System.Double,System.Single,System.Single,System.Single,System.Single,DataAnalysis.Basic.RVector)">
            <summary>
            Filtro Pasa Bajos de Chevyshev
            </summary>
            <param name="CutFrecuency1">Frecuencia de corte 1</param>
            <param name="AtnFrecuency1">Frecuencia de atenuacion 1</param>
            <param name="CutFrecuency2">Frecuencia de corte 2</param>
            <param name="AtnFrecuency2">Frecuencia de atenuacion 2</param>
            <param name="Atn11">Atenuacion en la Banda de corte 1</param>
            <param name="Atn21">Atenuacion en la Banda de atenuacion 1</param>
            <param name="Atn12">Atenuacion en la Banda de corte 2</param>
            <param name="Atn22">Atenuacion en la Banda de atenuacion 2</param>
            <param name="SampleFrecuency">Frecuencia de muestreo</param>
            <param name="VariabletoTransform">Señal a Filtrar</param>
            <returns>Señal Filtrada</returns>
        </member>
        <member name="T:DataAnalysis.SignalProcessing.Psd">
            <summary>
            Esta clase es parte del procesamiento de señales, una via para facilitar la visualizacion de la informacion
            </summary>
        </member>
        <member name="M:DataAnalysis.SignalProcessing.Psd.Welch(System.Double,System.Double[],System.Int32,System.Int32,System.Double)">
            <summary>
            Esta funcion regresa la Densidad Espectral de Potencia (PSD) estimada de la señal de entrada 
            usando un estimador de promedios de segmentos solapados de Welch.
            </summary>
            <param name="signal">Señal de entrada</param>
            <param name="fs">Frecuencia de muestreo de la señal</param>
            <param name="windowSize">Tamaño de la ventana, recomendado signal.lenght/4</param>
            <param name="tWindow">Seleccion de la ventana(Por defecto: Ventana Hamming)
            0: Hamming, 1: Hann, 2: Blackman1, 3: Blackman2, 4: Blackman-Nuttall, 5: Flat Top
            6: Gaus con σ = 0.5, 7: Triangular, 8: Bartlett, 9: Bartlett-Hann, 10: Rectangular</param>
            <param name="overlap">Procentaje de solapamiento(Por defecto: 50%)</param>
            <returns>Densidad Espectral de Potencia de la señal de entrada, junto a la frecuencia correspondiente</returns>
        </member>
        <member name="M:DataAnalysis.SignalProcessing.Psd.Yule_Walker(System.Double,System.Double[],System.Int32)">
            <summary>
            Esta funcion regresa la Densidad Espectral de Potencia (PSD) estimada de la señal de entrada 
            basada en los parámetros de un modelo autorregresivo usando el método de Yule-Walker.
            </summary>
            <param name="signal">Señal de entrada</param>
            <param name="order">Orden del modelo autorregresivo</param>
            <param name="fs">Frecuencia de muestreo de la señal</param>
            <returns></returns>
        </member>
        <member name="M:DataAnalysis.SignalProcessing.Psd.Autocorrelation(System.Double[],System.Int32)">
            <summary>
            Halla la autocorrelacion de una señal dada
            </summary>
            <param name="signal">Señal de entrada</param>
            <param name="order">Orden del modelo autorregresivo</param>
            <returns>Conjunto de valores de autocorrelacion de dicha señal</returns>
        </member>
        <member name="T:DataAnalysis.SignalProcessing.Signal">
            <summary>
            1-D Signal
            </summary>   
        </member>
        <member name="M:DataAnalysis.SignalProcessing.Signal.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:DataAnalysis.SignalProcessing.Signal.#ctor(System.Double[])">
            <summary>
            Aditional constructor, passing an array of double with the samples of the signal
            </summary>
            <param name="samples">The samples of the signal</param>
        </member>
        <member name="M:DataAnalysis.SignalProcessing.Signal.#ctor(DataAnalysis.Basic.RVector)">
            <summary>
            Aditional constructor, passing an array of double with the samples of the signal
            </summary>
            <param name="samples">The samples of the signal</param>
        </member>
        <member name="M:DataAnalysis.SignalProcessing.Signal.#ctor(DataAnalysis.Basic.RVector,System.Int32)">
            <summary>
            Aditional constructor, passing an array of double with the samples of the signal and the number of samples per second
            </summary>
            <param name="samples">The samples of the signal</param>
            <param name="samplesPerSecond">Quantity of samples per second</param>
        </member>
        <member name="M:DataAnalysis.SignalProcessing.Signal.Clone">
            <summary>
            Clones the signal, including the samples
            </summary>
            <returns></returns>
        </member>
        <member name="M:DataAnalysis.SignalProcessing.Signal.Copy">
            <summary>
            Clone the signal without cloning the samples
            </summary>
            <returns></returns>
        </member>
        <member name="P:DataAnalysis.SignalProcessing.Signal.Name">
            <summary>
            Name of the signal
            </summary>
        </member>
        <member name="P:DataAnalysis.SignalProcessing.Signal.Samples">
            <summary>
            Samples of the signal
            </summary>
        </member>
        <member name="P:DataAnalysis.SignalProcessing.Signal.SamplesCount">
            <summary>
            Gets the number of samples in the signal
            </summary>
        </member>
        <member name="P:DataAnalysis.SignalProcessing.Signal.IsComplex">
            <summary>
            Complex samples of the signal
            </summary>
        </member>
        <member name="P:DataAnalysis.SignalProcessing.Signal.Start">
            <summary>
            Start of the signal in the time
            </summary>
        </member>
        <member name="P:DataAnalysis.SignalProcessing.Signal.Finish">
            <summary>
            Finish od the signal in the time
            </summary>
        </member>
        <member name="P:DataAnalysis.SignalProcessing.Signal.SamplingInterval">
            <summary>
            Gets or sets  the interval of samples (1/SamplingRate)
            </summary>
            <returns></returns>
        </member>
        <member name="P:DataAnalysis.SignalProcessing.Signal.SamplingRate">
            <summary>
            Sampling rate used on sampling
            </summary>
        </member>
        <member name="P:DataAnalysis.SignalProcessing.Signal.Item(System.Int32)">
            <summary>
            Returns the value of the sample in the specified index
            </summary>        
            <exception cref="T:System.IndexOutOfRangeException">Throws System.IndexOutOfRangeException if specified index is less than 0 or equals or greater than the number of samples in the signal.</exception>
        </member>
        <member name="T:DataAnalysis.SignalProcessing.SignalExtension">
            <summary>
            Signal extension methods
            </summary>
        </member>
        <member name="M:DataAnalysis.SignalProcessing.SignalExtension.Extend(DataAnalysis.SignalProcessing.Signal@,DataAnalysis.SignalProcessing.SignalExtension.ExtensionMode,System.Int32,System.Int32)">
            <summary>
            Extends a signal using the specified extension mode
            </summary>
            <param name="input">Signal to extend</param>
            <param name="extensionMode">The extension mode</param>
            <param name="beforeSize">The extension size of the left side</param>
            <param name="afterSize">The extension size of right left side</param>
            <returns></returns>
        </member>
        <member name="M:DataAnalysis.SignalProcessing.SignalExtension.Extend(DataAnalysis.Basic.RVector,DataAnalysis.SignalProcessing.SignalExtension.ExtensionMode,System.Int32)">
            <summary>
            Extends an array using the specified extension mode
            </summary>
            <param name="input">Array to extend</param>
            <param name="extensionMode">The extension mode</param>
            <param name="extensionSize">The extension size of the left and right sides (each one)</param>
            <returns></returns>
        </member>
        <member name="M:DataAnalysis.SignalProcessing.SignalExtension.Extend(DataAnalysis.Basic.RVector,DataAnalysis.SignalProcessing.SignalExtension.ExtensionMode,System.Int32,System.Int32)">
            <summary>
            Extends an array using the specified extension mode
            </summary>
            <param name="input">Array to extend</param>
            <param name="extensionMode">The extension mode</param>
            <param name="beforeSize">The extension size of the left side</param>
            <param name="afterSize">The extension size of right left side</param>
            <returns></returns>
        </member>
        <member name="M:DataAnalysis.SignalProcessing.SignalExtension.Deextend(DataAnalysis.Basic.RVector,System.Int32)">
            <summary>
            Deextends an array, returning only its middle part
            </summary>
            <param name="input">Array to extend</param>
            <param name="size">The extension size of the left and right sides (each one)</param>
            <returns></returns>
        </member>
        <member name="M:DataAnalysis.SignalProcessing.SignalExtension.NextPowerOf2(System.Int32)">
            <summary>
            Gets the next power of 2 of an number
            </summary>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="T:DataAnalysis.SignalProcessing.SignalExtension.ExtensionMode">
            <summary>
            Extension modes
            </summary>
        </member>
        <member name="F:DataAnalysis.SignalProcessing.SignalExtension.ExtensionMode.SymmetricHalfPoint">
            <summary>
            Symmetric-padding (half-point): boundary value symmetric replication
            </summary>
        </member>
        <member name="F:DataAnalysis.SignalProcessing.SignalExtension.ExtensionMode.SymmetricWholePoint">
            <summary>
            Symmetric-padding (whole-point): boundary value symmetric replication
            </summary>
        </member>
        <member name="F:DataAnalysis.SignalProcessing.SignalExtension.ExtensionMode.AntisymmetricHalfPoint">
            <summary>
            Antisymmetric-padding (half-point): boundary value antisymmetric replication
            </summary>
        </member>
        <member name="F:DataAnalysis.SignalProcessing.SignalExtension.ExtensionMode.AntisymmetricWholePoint">
            <summary>
            Antisymmetric-padding (whole-point): boundary value antisymmetric replication
            </summary>
        </member>
        <member name="F:DataAnalysis.SignalProcessing.SignalExtension.ExtensionMode.PeriodicPadding">
            <summary>
            Periodized extension
            </summary>
        </member>
        <member name="F:DataAnalysis.SignalProcessing.SignalExtension.ExtensionMode.ZeroPadding">
            <summary>
            Zero extension
            </summary>
        </member>
        <member name="F:DataAnalysis.SignalProcessing.SignalExtension.ExtensionMode.SmoothPadding0">
            <summary>
            Smooth extension of order 0 (Continuous)
            </summary>
        </member>
        <member name="F:DataAnalysis.SignalProcessing.SignalExtension.ExtensionMode.SmoothPadding1">
            <summary>
            Smooth extension of order 1
            </summary>
        </member>
        <member name="F:DataAnalysis.SignalProcessing.SmootherFilters.Filter.Grade">
            <summary>
            Grado del filtro
            </summary>
        </member>
        <member name="M:DataAnalysis.SignalProcessing.SmootherFilters.Filter.ApplyFilter(DataAnalysis.Basic.RVector)">
            <summary>
            Filtra la señal de entrada
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:DataAnalysis.SignalProcessing.SmootherFilters.Filter.ToPMML">
            <summary>
            Realiza la conversion de la transformación a código PMML (lenguaje XML).
            </summary>
            <returns>Código PMML de la transformación Filter.</returns>
        </member>
        <member name="P:DataAnalysis.SignalProcessing.SmootherFilters.Filter.FilterType">
            <summary>
            Enumerado de los tipos de filtros
            </summary>
        </member>
        <member name="T:DataAnalysis.SignalProcessing.SmootherFilters.Filter.FilterTypeEnum">
            <summary>
            Tipos de filtros
            </summary>
        </member>
        <member name="F:DataAnalysis.SignalProcessing.SmootherFilters.Filter.FilterTypeEnum.SimpleMovingAverage">
            <summary>
            Media móvil simple
            </summary>
        </member>
        <member name="F:DataAnalysis.SignalProcessing.SmootherFilters.Filter.FilterTypeEnum.WeightedMovingAverage">
            <summary>
            Media móvil simple
            </summary>
        </member>
        <member name="F:DataAnalysis.SignalProcessing.SmootherFilters.Filter.FilterTypeEnum.ExponentialMovingAverage">
            <summary>
            Media móvil ponderada
            </summary>
        </member>
        <member name="F:DataAnalysis.SignalProcessing.SmootherFilters.Filter.FilterTypeEnum.CustomMovingAverage">
            <summary>
            Media móvil exponencial
            </summary>
        </member>
        <member name="F:DataAnalysis.SignalProcessing.SmootherFilters.Filter.FilterTypeEnum.Median">
            <summary>
            Mediana
            </summary>
        </member>
        <member name="M:DataAnalysis.SignalProcessing.SmootherFilters.AverageFilter.UpdateWeightSMA">
            <summary>
            Actualiza los pesos para el filtro media móvil
            </summary>
            <returns></returns>
        </member>
        <member name="M:DataAnalysis.SignalProcessing.SmootherFilters.AverageFilter.UpdateWeightWMA">
            <summary>
            Actualiza los pesos para el filtro media móvil ponderada
            </summary>
            <returns></returns>
        </member>
        <member name="M:DataAnalysis.SignalProcessing.SmootherFilters.AverageFilter.UpdateWeightEMA">
            <summary>
            Actualiza los pesos para el filtro media móvil exponencial
            </summary>
            <returns></returns>
        </member>
        <member name="M:DataAnalysis.SignalProcessing.SmootherFilters.AverageFilter.UpdateWeightCustom(DataAnalysis.Basic.RVector)">
            <summary>
            Actualiza los pesos para el filtro media móvil personalizada
            </summary>
            <returns></returns>
        </member>
        <member name="M:DataAnalysis.SignalProcessing.SmootherFilters.AverageFilter.ApplyFilter(DataAnalysis.Basic.RVector)">
            <summary>
            Filtra la señal de entrada
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:DataAnalysis.SignalProcessing.SmootherFilters.AverageFilter.ToPMML">
            <summary>
            Realiza la conversion de la transformación a código PMML (lenguaje XML).
            </summary>
            <returns>Código PMML de la transformación Filter.</returns>
        </member>
        <member name="M:DataAnalysis.SignalProcessing.SmootherFilters.MedianFilter.ApplyFilter(DataAnalysis.Basic.RVector)">
            <summary>
            Filtra la señal de entrada
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:DataAnalysis.SignalProcessing.SmootherFilters.MedianFilter.ToPMML">
            <summary>
            Realiza la conversion de la transformación a código PMML (lenguaje XML).
            </summary>
            <returns>Código PMML de la transformación Filter.</returns>
        </member>
        <member name="M:DataAnalysis.SignalProcessing.WindowstoUse.HammingWindow(DataAnalysis.Basic.RVector,System.Nullable{System.Int32})">
            Ventanas tipicas para el procesamiento de señales
             <summary>
             Aplica ventana Hamming a una señal de entrada
             </summary>
             <param name="signal">Señal de entrada</param>
            <param name="windowSize">Tamaño de la ventana(null para tamaño por defecto: longitud de la señal)</param>
            <returns>Señal con ventana aplicada</returns>
        </member>
        <member name="M:DataAnalysis.SignalProcessing.WindowstoUse.HannWindow(DataAnalysis.Basic.RVector,System.Nullable{System.Int32})">
            <summary>
            Aplica ventana Hann a una señal de entrada
            </summary>
            <param name="signal">Señal de entrada</param>
            <param name="windowSize">Tamaño de la ventana(null para tamaño por defecto: longitud de la señal)</param>
            <returns>Señal con ventana aplicada</returns>        
        </member>
        <member name="M:DataAnalysis.SignalProcessing.WindowstoUse.Blackman1Window(DataAnalysis.Basic.RVector,System.Nullable{System.Int32})">
            <summary>
            Aplica ventana Blackman a una señal de entrada
            </summary>
            <param name="signal">Señal de entrada</param>
            <param name="windowSize">Tamaño de la ventana(null para tamaño por defecto: longitud de la señal)</param>
            <returns>Señal con ventana aplicada</returns>
        </member>
        <member name="M:DataAnalysis.SignalProcessing.WindowstoUse.Blackman2Window(DataAnalysis.Basic.RVector,System.Nullable{System.Int32})">
            <summary>
            Aplica ventana Blackman a una señal de entrada
            </summary>
            <param name="signal">Señal de entrada</param>
            <param name="windowSize">Tamaño de la ventana(null para tamaño por defecto: longitud de la señal)</param>
            <returns>Señal con ventana aplicada</returns>
        </member>
        <member name="M:DataAnalysis.SignalProcessing.WindowstoUse.BlackmanNuttallWindow(DataAnalysis.Basic.RVector,System.Nullable{System.Int32})">
            <summary>
            Aplica ventana Blackman-Nuttall a una señal de entrada
            </summary>
            <param name="signal">Señal de entrada</param>
            <param name="windowSize">Tamaño de la ventana(null para tamaño por defecto: longitud de la señal)</param>
            <returns>Señal con ventana aplicada</returns>
        </member>
        <member name="M:DataAnalysis.SignalProcessing.WindowstoUse.FlatTopWindow(DataAnalysis.Basic.RVector,System.Nullable{System.Int32})">
            <summary>
            Aplica ventana Flat Top a una señal de entrada
            </summary>
            <param name="signal">Señal de entrada</param>
            <param name="windowSize">Tamaño de la ventana(null para tamaño por defecto: longitud de la señal)</param>
            <returns>Señal con ventana aplicada</returns>
        </member>
        <member name="M:DataAnalysis.SignalProcessing.WindowstoUse.Gauss05Window(DataAnalysis.Basic.RVector,System.Nullable{System.Int32})">
            <summary>
            Aplica ventana Gauss con σ = 0.5 a una señal de entrada
            </summary>
            <param name="signal">Señal de entrada</param>
            <param name="windowSize">Tamaño de la ventana(null para tamaño por defecto: longitud de la señal)</param>
            <returns>Señal con ventana aplicada</returns>
        </member>
        <member name="M:DataAnalysis.SignalProcessing.WindowstoUse.TriangleWindow(DataAnalysis.Basic.RVector,System.Nullable{System.Int32})">
            <summary>
            Aplica ventana Triangular a una señal de entrada
            </summary>
            <param name="signal">Señal de entrada</param>
            <param name="windowSize">Tamaño de la ventana(null para tamaño por defecto: longitud de la señal)</param>
            <returns>Señal con ventana aplicada</returns>
        </member>
        <member name="M:DataAnalysis.SignalProcessing.WindowstoUse.BartlettWindow(DataAnalysis.Basic.RVector,System.Nullable{System.Int32})">
            <summary>
            Aplica ventana Bartlett a una señal de entrada
            </summary>
            <param name="signal">Señal de entrada</param>
            <param name="windowSize">Tamaño de la ventana(null para tamaño por defecto: longitud de la señal)</param>
            <returns>Señal con ventana aplicada</returns>
        </member>
        <member name="M:DataAnalysis.SignalProcessing.WindowstoUse.BartlettHannWindow(DataAnalysis.Basic.RVector,System.Nullable{System.Int32})">
            <summary>
            Aplica ventana Bartlett-Hann a una señal de entrada
            </summary>
            <param name="signal">Señal de entrada</param>
            <param name="windowSize">Tamaño de la ventana(null para tamaño por defecto: longitud de la señal)</param>
            <returns>Señal con ventana aplicada</returns>
        </member>
        <member name="M:DataAnalysis.SignalProcessing.WindowstoUse.RectWindow(DataAnalysis.Basic.RVector,System.Nullable{System.Int32})">
             <summary>
             Aplica ventana Rectangular a una señal de entrada
             </summary>
             <param name="signal">Señal de entrada</param>
            <param name="windowSize">Tamaño de la ventana(null para tamaño por defecto: longitud de la señal)</param>
            <returns>Señal con ventana aplicada</returns>
        </member>
        <member name="T:DataAnalysis.Statistical.HypothesisTest.GroupValue">
            <summary>
            Modela una observación con inforación del grupo
            al que pertenece y su valor.
            </summary>
        </member>
        <member name="T:DataAnalysis.Statistical.HypothesisTest.HypothesisTest">
            <summary>
            Clase base para las pruebas de hipótesis.
            </summary>
        </member>
        <member name="T:DataAnalysis.Statistical.HypothesisTest.HypothesisTest.TestInfo">
            <summary>
            Información de salida del proceso de optimización
            </summary>
        </member>
        <member name="T:DataAnalysis.Statistical.HypothesisTest.NonParametric.ComparisonOfMedians">
            <summary>
            Implementa pruebas de hipótesis para el análisis de la mediana 
            muestras independientes.
            </summary>
        </member>
        <member name="T:DataAnalysis.Statistical.HypothesisTest.NonParametric.NonParametricHypothesisTest">
            <summary>
            Clase base para métodos para pruebas estadísticas no-paramétricas.
            </summary>
        </member>
        <member name="M:DataAnalysis.Statistical.HypothesisTest.NonParametric.ComparisonOfMatchedPairsSamplesMedians.WilcoxonSignedRanksTest(DataAnalysis.Basic.RVector,DataAnalysis.Basic.RVector)">
            <summary>
            Prueba la hipótesis de si dos muestras dependientes representan dos
            poblaciones con diferentes valores de mediana. Si la prueba lleva a un 
            resultado significativo, puede concluirse que las muestras  representan
            poblaciones con diferentes valores de mediana.
            </summary>
            <param name="sample1">
            Muestra.
            </param>
            <param name="sample2">
            Muestra.
            </param>
            <returns>
            Información de la prueba estadística. Para una cantidad de muestras 
            menor o igual que 50, la prueba es significativa si el valor del 
            estadístico es menor o igual que el valor crítico. Para una cantidad 
            de muestras mayor que 50, la prueba es significativa si el valor del 
            estadístico es mayor que el valor crítico.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.HypothesisTest.NonParametric.ComparisonOfMatchedPairsSamplesMedians.FriedmanTwowayANOVATest(DataAnalysis.Basic.RVector[])">
            <summary>
            Prueba la hipótesis de si en un conjunto de muestras univariables 
            dependientes al menos dos de las muestras representan poblaciones 
            con diferentes valores de mediana. Si la prueba lleva a un resultado 
            significativo, puede concluirse que existen al menos dos de las 
            muestras representan poblaciones con diferentes valores de mediana.
            </summary>
            <param name="samples">
            Muestras univariables.
            </param>
            <returns>
            Información de la prueba estadística. La prueba es significativa si el 
            valor del estadístico es mayor o igual que el valor crítico.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.HypothesisTest.NonParametric.ComparisonOfIndependentSamplesMedians.WilcoxonSignedRanksTest(DataAnalysis.Basic.RVector,System.Double)">
            <summary>
            Prueba la hipótesis de si una muestra univariable proviene de una 
            población en la cual la mediana es igual a un valor específico. Si 
            la prueba lleva a un resultado significativo, puede concluirse que 
            la muestra se deriva de una población con mediana diferente al valor 
            especificado.
            </summary>
            <param name="sample">
            Muestra univariable.
            </param>
            <param name="median">
            Valor hipotético para la mediana de la población.
            </param>
            <returns>
            Información de la prueba estadística. Para una cantidad de muestras 
            menor o igual que 50, la prueba es significativa si el valor del 
            estadístico es menor o igual que el valor crítico. Para una cantidad 
            de muestras mayor que 50, la prueba es significativa si el valor del 
            estadístico es mayor que el valor crítico.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.HypothesisTest.NonParametric.ComparisonOfIndependentSamplesMedians.MannWhitneyTest(DataAnalysis.Basic.RVector,DataAnalysis.Basic.RVector)">
            <summary>
            Prueba la hipótesis de si dos muestras univariables independientes 
            representan dos poblaciones con diferentes valores de mediana. Si la 
            prueba lleva a un resultado significativo, puede concluirse que las 
            muestras representan poblaciones con diferentes valores de mediana.
            </summary>
            <param name="sample1">
            Muestra univariable.
            </param>
            <param name="sample2">
            Muestra univariable.
            </param>
            <returns>
            Información de la prueba estadística. Para una cantidad de muestras 
            menor o igual que 20, la prueba es significativa si el valor del 
            estadístico es menor o igual que el valor crítico. Para una cantidad 
            de muestras mayor que 20, la prueba es significativa si el valor del 
            estadístico es mayor que el valor crítico.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.HypothesisTest.NonParametric.ComparisonOfIndependentSamplesMedians.KruskalWallisOnewayANOVATest(DataAnalysis.Basic.RVector[])">
            <summary>
            Prueba la hipótesis de si en un conjunto de muestras univariables 
            independientes al menos dos de las muestras representan poblaciones 
            con diferentes valores de mediana. Si la prueba lleva a un resultado 
            significativo, puede concluirse que existen al menos dos de las 
            muestras representan poblaciones con diferentes valores de mediana.
            </summary>
            <param name="samples">
            Muestras univariables.
            </param>
            <returns>
            Información de la prueba estadística. La prueba es significativa si el 
            valor del estadístico es mayor o igual que el valor crítico.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.HypothesisTest.NonParametric.ComparisonOfIndependentSamplesMedians.PairwiseComparisons(DataAnalysis.Basic.RVector[])">
            <summary>
            Realiza una comparación multiple de la mediana de todos los pares de grupos.
            </summary>
            <param name="samples">
            Muestras univariables.
            </param>
            <returns>
            Matriz con los resultados de la comparación [gId|gId|stat|th].
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.HypothesisTest.NonParametric.ComparisonOfIndependentSamplesMedians.GetCriticalDifference(DataAnalysis.Basic.RVector[])">
            <summary>
            Calcula la mínima diferencia entre la mediana de dos grupos para 
            que sean consideradas significativamente diferentes.
            </summary>
            <param name="samples">
            Muestras.
            </param>
            <returns>
            Diferencia crítica.
            </returns>
        </member>
        <member name="T:DataAnalysis.Statistical.HypothesisTest.NonParametric.SpearmanRankOrderCorrelationTest">
            <summary>
            Implementa el cálculo de Spearman's Rank-Order Correlation.
            </summary>
        </member>
        <member name="M:DataAnalysis.Statistical.HypothesisTest.NonParametric.SpearmanRankOrderCorrelationTest.GetCorrelationCoefficient(DataAnalysis.Basic.RVector,DataAnalysis.Basic.RVector,DataAnalysis.Statistical.HypothesisTest.HypothesisTest.TestInfo@,System.Double)">
            <summary>
            Obtiene el coeficiente de correlación entre dos muestras.
            </summary>
            <param name="sample1">
            Muestra.
            </param>
            <param name="sample2">
            Muestra.
            </param>
            <param name="testInfo">
            Información de la prueba estadística para relación lineal 
            entre las variables. La prueba es significativa si el valor 
            del estadístico es mayor o igual que el valor crítico.
            </param>
            <param name="alpha">
            Nivel de significación de la prueba.
            </param>
            <returns>
            Coeficiente de correlación de Spearman.
            </returns>
        </member>
        <member name="T:DataAnalysis.Statistical.HypothesisTest.Parametric.ComparisonOfMeans">
            <summary>
            Implementa pruebas de hipótesis para el análisis de la media de
            muestras independientes.
            </summary>
        </member>
        <member name="T:DataAnalysis.Statistical.HypothesisTest.Parametric.ParametricHypothesisTest">
            <summary>
            Implementa métodos para pruebas estadísticas paramétricas.
            </summary>
        </member>
        <member name="M:DataAnalysis.Statistical.HypothesisTest.Parametric.ParametricHypothesisTest.Normality(DataAnalysis.Basic.RVector)">
            <summary>
            Determina si un conjunto de datos están normalmente 
            distribuidos.
            </summary>
            <param name="data">
            Vector real.
            </param>
            <returns>
            Aceptación de la hipótesis.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.HypothesisTest.Parametric.ParametricHypothesisTest.T2Hotelling(DataAnalysis.Basic.RMatrix,DataAnalysis.Basic.RVector,System.Int32,System.Int32)">
            <summary>
            Realiza la prueba estadística T2 Hotelling para la 
            hipótesis nula H0:M1==M2.
            </summary>
            <param name="Spl">
            Matriz de covarianza conjunta.
            </param>
            <param name="mdif">
            Vector de diferencia de las medias de los grupos.
            </param>
            <param name="n1">
            Cantidad de muestras en el primer grupo.
            </param>
            <param name="n2">
            Cantidad de muestras en el segundo grupo.
            </param>
            <returns>
            Estadístico T2 Hotelling
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:DataAnalysis.Statistical.HypothesisTest.Parametric.ParametricHypothesisTest.T2HotellingThreshold(System.Int32,System.Int32,System.Double)" -->
        <member name="M:DataAnalysis.Statistical.HypothesisTest.Parametric.ParametricHypothesisTest.T2HotellingSCI(DataAnalysis.Basic.RMatrix,DataAnalysis.Basic.RVector,DataAnalysis.Basic.RVector,System.Int32,System.Int32,DataAnalysis.Basic.RVector@,DataAnalysis.Basic.RVector@,System.Double)">
            <summary>
            Calcula los intervalos simultáneos de confianza para las
            diferencias entre dos grupos.
            </summary>
            <param name="Spl">
            Matriz de covarianza conjunta.
            </param>
            <param name="m1">
            Vector de medias del primer grupo.
            </param>
            <param name="m2">
            Vector de medias del segundo grupo.
            </param>
            <param name="n1">
            Cantidad de muestras en el primer grupo.
            </param>
            <param name="n2">
            Cantidad de muestras en el segundo grupo.
            </param>
            <param name="lcl">
            Límites de control inferiores.
            </param>
            <param name="ucl">
            Límites de control superiores.
            </param>
            <param name="alpha">
            Nivel de significación de la prueba de hipótesis.
            </param>
        </member>
        <member name="M:DataAnalysis.Statistical.HypothesisTest.Parametric.ParametricHypothesisTest.Wilks(DataAnalysis.Basic.RMatrix,DataAnalysis.Basic.RMatrix)">
            <summary>
            Realiza la prueba estadística Wilks para la 
            hipótesis nula H0:M1==M2==...==Mk.
            </summary>
            <param name="Sb">
            Una RMatrix conteniendo la matriz de disperción
            entre grupos.
            </param>
            <param name="Sw">
            Una RMatrix conteniendo la matriz de disperción
            en grupos.
            </param>
            <returns>
            Un double con el valor del estadístico.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.HypothesisTest.Parametric.ParametricHypothesisTest.WilksThreshold(System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Retorna el umbral de la prueba estadística Wilks
            para la hipótesis nula H0:M1==M2==...Mk, utilizando la 
            aproximación a al estadístico F.
            </summary>
            <param name="p">
            Un int conteniendo el número de variables (dimensión).
            </param>
            <param name="vSb">
            Un int conteniendo los grados de libertad para la 
            dispersión entre clases.
            </param>
            <param name="vSw">
            Un int conteniendo los grados de libertad para la
            dispersión dentro de la clase.
            </param>
            <param name="alpha">
            Un double conteniendo el nivel de significación de la prueba 
            de hipótesis.
            </param>
            <returns>
            Un double con el umbral de aceptación de la hipótesis nula. La 
            hipótesis se acepta si L >= Lth
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.HypothesisTest.Parametric.ParametricHypothesisTest.Pillai(DataAnalysis.Basic.RMatrix,DataAnalysis.Basic.RMatrix)">
            <summary>
            Realiza la prueba estadística Pillai para la 
            hipótesis nula H0:M1==M2==...==Mk.
            </summary>
            <param name="Sb">
            Una RMatrix conteniendo la matriz de disperción
            entre grupos.
            </param>
            <param name="Sw">
            Una RMatrix conteniendo la matriz de disperción
            en grupos.
            </param>
            <returns>
            Un double con el valor del estadístico.
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:DataAnalysis.Statistical.HypothesisTest.Parametric.ParametricHypothesisTest.PillaiThreshold(System.Int32,System.Int32,System.Int32,System.Double)" -->
        <member name="M:DataAnalysis.Statistical.HypothesisTest.Parametric.ParametricHypothesisTest.LawleyHotelling(DataAnalysis.Basic.RMatrix,DataAnalysis.Basic.RMatrix)">
            <summary>
            Realiza la prueba estadística Lawley-Hotelling para la 
            hipótesis nula H0:M1==M2==...==Mk.
            </summary>
            <param name="Sb">
            Un double[,] conteniendo la matriz de disperción
            entre grupos.
            </param>
            <param name="Sw">
            Un double[] conteniendo la matriz de disperción
            en grupos.
            </param>
            <returns>
            Un double con el valor del estadístico.
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:DataAnalysis.Statistical.HypothesisTest.Parametric.ParametricHypothesisTest.LawleyHotellingThreshold(System.Int32,System.Int32,System.Int32,System.Double)" -->
        <!-- Badly formed XML comment ignored for member "M:DataAnalysis.Statistical.HypothesisTest.Parametric.ParametricHypothesisTest.MBox(System.Int32,DataAnalysis.Basic.RMatrix[],System.Int32[])" -->
        <!-- Badly formed XML comment ignored for member "M:DataAnalysis.Statistical.HypothesisTest.Parametric.ParametricHypothesisTest.MBoxThreshold(System.Int32,System.Int32,System.Double)" -->
        <member name="M:DataAnalysis.Statistical.HypothesisTest.Parametric.ParametricHypothesisTest.AllVarInd(DataAnalysis.Basic.RMatrix,System.Int32)">
            <summary>
            Realiza la prueba de independiencia entre variables, hipótesis nula
            H0:r_{jk}=0, j!=k, utilizando la aproximación Chi^2.
            </summary>
            <param name="S">
            Una RMatrix conteniendo la matriz de covarianza de las variables.
            </param>
            <param name="dfS">
            Un double conteniendo los grados de libertad de la matriz. 
            </param>
            <returns>
            Un double con el valor del estadístico.
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:DataAnalysis.Statistical.HypothesisTest.Parametric.ParametricHypothesisTest.AllVarIndThreshold(System.Int32,System.Double)" -->
        <member name="M:DataAnalysis.Statistical.HypothesisTest.Parametric.ParametricHypothesisTest.FStat(System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Realiza la prueba estadística F Fisher para probar
            diferencias entre modelos completos y reducidos.
            </summary>
            <param name="red">
            Un double conteniendo el valor objetivo para el modelo
            reducido.
            </param>
            <param name="full">
            Un double conteniendo el valor objetivo para el modelo
            completo.
            </param>
            <param name="dfn">
            Un int conteniendo los grados de libertad del numerador.
            </param>
            <param name="dfd">
            Un int conteniendo los grados de libertad del denominador.
            </param>
            <returns>
            Un double con el estadítico.
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:DataAnalysis.Statistical.HypothesisTest.Parametric.ParametricHypothesisTest.FStatThreshold(System.Int32,System.Int32,System.Double)" -->
        <member name="M:DataAnalysis.Statistical.HypothesisTest.Parametric.ComparisonOfMeans.IdetifyOutliers(DataAnalysis.Basic.RVector)">
            <summary>
            Identifica los outlier en una muestra univariable.
            </summary>
            <param name="sample">
            Muestra univariable.
            </param>
            <returns>
            Lista de los índices de las observaciones que son identificadas como
            outliers.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.HypothesisTest.Parametric.ComparisonOfMeans.IdetifyOutliers(DataAnalysis.Basic.RMatrix,System.Double)">
            <summary>
            Identifica los outlier en una muestra multivariable.
            </summary>
            <param name="sample">
            Muestra multivariable.
            </param>
            <param name="alpha">
            Nivel de significación de la prueba.
            </param>
            <returns>
            Lista de los índices de las observaciones que son identificadas como
            outliers.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.HypothesisTest.Parametric.ComparisonOfMatchedPairsSamplesMeans.tTest(DataAnalysis.Basic.RVector,DataAnalysis.Basic.RVector,System.Double)">
            <summary>
            Prueba la hipótesis de si dos muestras univariables dependientes 
            representan dos poblaciones con diferentes valores de media. Si la 
            prueba lleva a un resultado significativo, puede concluirse que las 
            muestras representan poblaciones con diferentes valores de media.
            </summary>
            <param name="sample1">
            Muestra univariable.
            </param>
            <param name="sample2">
            Muestra univariable.
            </param>
            <param name="alpha">
            Nivel de significación de la prueba.
            </param>
            <returns>
            Información de la prueba estadística. La prueba es significativa si 
            el valor del estadístico es mayor o igual que el valor crítico.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.HypothesisTest.Parametric.ComparisonOfMatchedPairsSamplesMeans.GetCI(DataAnalysis.Basic.RVector,DataAnalysis.Basic.RVector,System.Double@,System.Double@,System.Double)">
            <summary>
            Obtiene el intervalo de confianza para la diferencia entre las
            medias de las muestras univariables dependientes.
            </summary>
            <param name="sample1">
            Muestra univariable.
            </param>
            <param name="sample2">
            Muestra univariable.
            </param>
            <param name="lcl">
            Límite inferior de la región de confianza.
            </param>
            <param name="ucl">
            Límite superior de la región de confianza.
            </param>
            <param name="alpha">
            Nivel de significación.
            </param>
        </member>
        <member name="M:DataAnalysis.Statistical.HypothesisTest.Parametric.ComparisonOfMatchedPairsSamplesMeans.SingleFactorANOVATest(DataAnalysis.Basic.RVector[],System.Double)">
            <summary>
            Prueba la hipótesis de si en un conjunto de muestras univariables 
            dependientes al menos dos de las muestras representan poblaciones 
            con diferentes valores de media. Si la prueba lleva a un resultado 
            significativo, puede concluirse que al menos dos de las muestras 
            representan poblaciones con diferentes valores de media.
            </summary>
            <param name="samples">
            Muestras univariables.
            </param>
            <param name="alpha">
            Nivel de significación de la prueba.
            </param>
            <returns>
            Información de la prueba estadística. La prueba es significativa si el 
            valor del estadístico es mayor o igual que el valor crítico.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.HypothesisTest.Parametric.ComparisonOfMatchedPairsSamplesMeans.FisherLSDPairwiseComparisons(DataAnalysis.Basic.RVector[],System.Double)">
            <summary>
            Realiza una comparación multiple de la media de todos los pares de grupos,
            utilizando la prueba Fisher's Least Significant Difference.
            </summary>
            <param name="samples">
            Muestras univariables.
            </param>
            <param name="alpha">
             Nivel de significación de la prueba.
            </param>
            <returns>
            Matriz con los resultados de la comparación [gId|gId|stat|th].
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.HypothesisTest.Parametric.ComparisonOfMatchedPairsSamplesMeans.GetFisherLSDCriticalDifference(DataAnalysis.Basic.RVector[],System.Double)">
            <summary>
            Calcula la mínima diferencia entre la media de dos grupos para que sean 
            consideradas significativamente diferentes, utilizando la prueba Fisher's 
            Least Significant Difference.
            </summary>
            <param name="samples">
            Muestras univariables.
            </param>
            <param name="alpha">
            Nivel de significación de la prueba.
            </param>
            <returns>
            Diferencia crítica.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.HypothesisTest.Parametric.ComparisonOfMatchedPairsSamplesMeans.BonferroniDunnPairwiseComparisons(DataAnalysis.Basic.RVector[],System.Double)">
            <summary>
            Realiza una comparación multiple de la media de todos los pares de grupos,
            utilizando la prueba Bonferroni-Dunn.
            </summary>
            <param name="samples">
            Muestras univariables.
            </param>
            <param name="alpha">
             Nivel de significación de la prueba.
            </param>
            <returns>
            Matriz con los resultados de la comparación [gId|gId|stat|th].
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.HypothesisTest.Parametric.ComparisonOfMatchedPairsSamplesMeans.GetBonferroniDunnCriticalDifference(DataAnalysis.Basic.RVector[],System.Double)">
            <summary>
            Calcula la mínima diferencia entre la media de dos grupos para que sean 
            consideradas significativamente diferentes, utilizando la prueba 
            Bonferroni-Dunn.
            </summary>
            <param name="samples">
            Muestras univariables.
            </param>
            <param name="alpha">
            Nivel de significación de la prueba.
            </param>
            <returns>
            Diferencia crítica.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.HypothesisTest.Parametric.ComparisonOfMatchedPairsSamplesMeans.TukeyHSDPairwiseComparisons(DataAnalysis.Basic.RVector[],System.Double)">
            <summary>
            Realiza una comparación multiple de la media de todos los pares de grupos,
            utilizando la prueba Tukey's Honestly Significant Difference.
            </summary>
            <param name="samples">
            Muestras univariables.
            </param>
            <param name="alpha">
             Nivel de significación de la prueba.
            </param>
            <returns>
            Matriz con los resultados de la comparación [gId|gId|stat|th].
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.HypothesisTest.Parametric.ComparisonOfMatchedPairsSamplesMeans.GetTukeyHSDCriticalDifference(DataAnalysis.Basic.RVector[],System.Double)">
            <summary>
            Calcula la mínima diferencia entre la media de dos grupos para que sean 
            consideradas significativamente diferentes, utilizando la prueba 
            Tukey's Honestly Significant Difference.
            </summary>
            <param name="samples">
            Muestras.
            </param>
            <param name="alpha">
            Nivel de significación de la prueba.
            </param>
            <returns>
            Diferencia crítica.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.HypothesisTest.Parametric.ComparisonOfMatchedPairsSamplesMeans.NewmanKeulsPairwiseComparisons(DataAnalysis.Basic.RVector[],System.Double)">
            <summary>
            Realiza una comparación multiple de la media de todos los pares de grupos,
            utilizando la prueba Newman-Keuls.
            </summary>
            <param name="samples">
            Muestras univariables.
            </param>
            <param name="alpha">
             Nivel de significación de la prueba.
            </param>
            <returns>
            Matriz con los resultados de la comparación [gId|gId|stat|th].
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.HypothesisTest.Parametric.ComparisonOfMatchedPairsSamplesMeans.GetNewmanKeulsCriticalDifference(DataAnalysis.Basic.RVector[],System.Int32,System.Double)">
            <summary>
            Calcula la mínima diferencia entre la media de dos grupos para que sean 
            consideradas significativamente diferentes, utilizando la prueba 
            Newman-Keuls.
            </summary>
            <param name="samples">
            Muestras univariables.
            </param>
            <param name="steps">
            Cantidad de pasos entre las medias que se desean comparar.
            </param>
            <param name="alpha">
            Nivel de significación de la prueba.
            </param>
            <returns>
            Diferencia crítica.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.HypothesisTest.Parametric.ComparisonOfMatchedPairsSamplesMeans.DunnettPairwiseComparisons(DataAnalysis.Basic.RVector[],System.Int32,System.Double)">
            <summary>
            Realiza una comparación multiple de la media de todos los pares de grupos,
            utilizando la prueba Dunnett.
            </summary>
            <param name="samples">
            Muestras univariables.
            </param>
            <param name="alpha">
             Nivel de significación de la prueba.
            </param>
            <returns>
            Matriz con los resultados de la comparación [gId|gId|stat|th].
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.HypothesisTest.Parametric.ComparisonOfIndependentSamplesMeans.tTest(DataAnalysis.Basic.RVector,System.Double,System.Double)">
            <summary>
            Prueba la hipótesis de si una muestra univariable proviene de una 
            población en la cual la media es igual a un valor específico. Si 
            la prueba lleva a un resultado significativo, puede concluirse que 
            la mustra se deriva de una población con media diferente al valor 
            especificado.
            </summary>
            <param name="sample">
            Muestra univariable. 
            </param>
            <param name="mean">
            Valor hipotético para la media de la población.
            </param>
            <param name="alpha">
            Nivel de significación de la prueba.
            </param>
            <returns>
            Información de la prueba estadística. La prueba es significativa si 
            el valor del estadístico es mayor o igual que el valor crítico.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.HypothesisTest.Parametric.ComparisonOfIndependentSamplesMeans.GetCI(DataAnalysis.Basic.RVector,System.Double@,System.Double@,System.Double)">
            <summary>
            Obtiene el intervalo de confianza para la media de la población.
            </summary>
            <param name="sample">
            Muestra univariable.
            </param>
            <param name="lcl">
            Límite inferior de la región de confianza.
            </param>
            <param name="ucl">
            Límite superior de la región de confianza.
            </param>
            <param name="alpha">
            Nivel de significación.
            </param>
        </member>
        <member name="M:DataAnalysis.Statistical.HypothesisTest.Parametric.ComparisonOfIndependentSamplesMeans.tTest(DataAnalysis.Basic.RVector,DataAnalysis.Basic.RVector,System.Double)">
            <summary>
            Prueba la hipótesis de si dos muestras univariables independientes 
            representan dos poblaciones con diferentes valores de media. Si la 
            prueba lleva a un resultado significativo, puede concluirse que las 
            muestras representan poblaciones con diferentes valores de media.
            </summary>
            <param name="sample1">
            Muestra univariable.
            </param>
            <param name="sample2">
            Muestra univariable.
            </param>
            <param name="alpha">
            Nivel de significación de la prueba.
            </param>
            <returns>
            Información de la prueba estadística. La prueba es significativa si 
            el valor del estadístico es mayor o igual que el valor crítico.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.HypothesisTest.Parametric.ComparisonOfIndependentSamplesMeans.GetCI(DataAnalysis.Basic.RVector,DataAnalysis.Basic.RVector,System.Double@,System.Double@,System.Double)">
            <summary>
            Obtiene el intervalo de confianza para la diferencia entre las
            medias de las muestras univariables independientes.
            </summary>
            <param name="sample1">
            Muestra univariable.
            </param>
            <param name="sample2">
            Muestra univariable.
            </param>
            <param name="lcl">
            Límite inferior de la región de confianza.
            </param>
            <param name="ucl">
            Límite superior de la región de confianza.
            </param>
            <param name="alpha">
            Nivel de significación.
            </param>
        </member>
        <member name="M:DataAnalysis.Statistical.HypothesisTest.Parametric.ComparisonOfIndependentSamplesMeans.SingleFactorANOVATest(DataAnalysis.Basic.RVector[],System.Double)">
            <summary>
            Prueba la hipótesis de si en un conjunto de muestras univariables 
            independientes al menos dos de las muestras representan poblaciones 
            con diferentes valores de media. Si la prueba lleva a un resultado 
            significativo, puede concluirse que al menos dos de las muestras 
            representan poblaciones con diferentes valores de media.
            </summary>
            <param name="samples">
            Muestras univariables.
            </param>
            <param name="alpha">
            Nivel de significación de la prueba.
            </param>
            <returns>
            Información de la prueba estadística. La prueba es significativa si el 
            valor del estadístico es mayor o igual que el valor crítico.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.HypothesisTest.Parametric.ComparisonOfIndependentSamplesMeans.FisherLSDPairwiseComparisons(DataAnalysis.Basic.RVector[],System.Double)">
            <summary>
            Realiza una comparación multiple de la media de todos los pares de grupos,
            utilizando la prueba Fisher's Least Significant Difference.
            </summary>
            <param name="samples">
            Muestras univariables.
            </param>
            <param name="alpha">
             Nivel de significación de la prueba.
            </param>
            <returns>
            Matriz con los resultados de la comparación [gId|gId|stat|th].
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.HypothesisTest.Parametric.ComparisonOfIndependentSamplesMeans.GetFisherLSDCriticalDifference(DataAnalysis.Basic.RVector[],System.Double)">
            <summary>
            Calcula la mínima diferencia entre la media de dos grupos para que sean 
            consideradas significativamente diferentes, utilizando la prueba Fisher's 
            Least Significant Difference.
            </summary>
            <param name="samples">
            Muestras univariables.
            </param>
            <param name="alpha">
            Nivel de significación de la prueba.
            </param>
            <returns>
            Diferencia crítica.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.HypothesisTest.Parametric.ComparisonOfIndependentSamplesMeans.BonferroniDunnPairwiseComparisons(DataAnalysis.Basic.RVector[],System.Double)">
            <summary>
            Realiza una comparación multiple de la media de todos los pares de grupos,
            utilizando la prueba Bonferroni-Dunn.
            </summary>
            <param name="samples">
            Muestras univariables.
            </param>
            <param name="alpha">
             Nivel de significación de la prueba.
            </param>
            <returns>
            Matriz con los resultados de la comparación [gId|gId|stat|th].
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.HypothesisTest.Parametric.ComparisonOfIndependentSamplesMeans.GetBonferroniDunnCriticalDifference(DataAnalysis.Basic.RVector[],System.Double)">
            <summary>
            Calcula la mínima diferencia entre la media de dos grupos para que sean 
            consideradas significativamente diferentes, utilizando la prueba 
            Bonferroni-Dunn.
            </summary>
            <param name="samples">
            Muestras univariables.
            </param>
            <param name="alpha">
            Nivel de significación de la prueba.
            </param>
            <returns>
            Diferencia crítica.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.HypothesisTest.Parametric.ComparisonOfIndependentSamplesMeans.TukeyHSDPairwiseComparisons(DataAnalysis.Basic.RVector[],System.Double)">
            <summary>
            Realiza una comparación multiple de la media de todos los pares de grupos,
            utilizando la prueba Tukey's Honestly Significant Difference.
            </summary>
            <param name="samples">
            Muestras univariables.
            </param>
            <param name="alpha">
             Nivel de significación de la prueba.
            </param>
            <returns>
            Matriz con los resultados de la comparación [gId|gId|stat|th].
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.HypothesisTest.Parametric.ComparisonOfIndependentSamplesMeans.GetTukeyHSDCriticalDifference(DataAnalysis.Basic.RVector[],System.Double)">
            <summary>
            Calcula la mínima diferencia entre la media de dos grupos para que sean 
            consideradas significativamente diferentes, utilizando la prueba 
            Tukey's Honestly Significant Difference.
            </summary>
            <param name="samples">
            Muestras.
            </param>
            <param name="alpha">
            Nivel de significación de la prueba.
            </param>
            <returns>
            Diferencia crítica.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.HypothesisTest.Parametric.ComparisonOfIndependentSamplesMeans.NewmanKeulsPairwiseComparisons(DataAnalysis.Basic.RVector[],System.Double)">
            <summary>
            Realiza una comparación multiple de la media de todos los pares de grupos,
            utilizando la prueba Newman-Keuls.
            </summary>
            <param name="samples">
            Muestras univariables.
            </param>
            <param name="alpha">
             Nivel de significación de la prueba.
            </param>
            <returns>
            Matriz con los resultados de la comparación [gId|gId|stat|th].
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.HypothesisTest.Parametric.ComparisonOfIndependentSamplesMeans.GetNewmanKeulsCriticalDifference(DataAnalysis.Basic.RVector[],System.Int32,System.Double)">
            <summary>
            Calcula la mínima diferencia entre la media de dos grupos para que sean 
            consideradas significativamente diferentes, utilizando la prueba 
            Newman-Keuls.
            </summary>
            <param name="samples">
            Muestras univariables.
            </param>
            <param name="steps">
            Cantidad de pasos entre las medias que se desean comparar.
            </param>
            <param name="alpha">
            Nivel de significación de la prueba.
            </param>
            <returns>
            Diferencia crítica.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.HypothesisTest.Parametric.ComparisonOfIndependentSamplesMeans.DunnettPairwiseComparisons(DataAnalysis.Basic.RVector[],System.Int32,System.Double)">
            <summary>
            Realiza una comparación multiple de la media de todos los pares de grupos,
            utilizando la prueba Dunnett.
            </summary>
            <param name="samples">
            Muestras univariables.
            </param>
            <param name="alpha">
             Nivel de significación de la prueba.
            </param>
            <returns>
            Matriz con los resultados de la comparación [gId|gId|stat|th].
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.HypothesisTest.Parametric.ComparisonOfIndependentSamplesMeans.T2HottelingTest(DataAnalysis.Basic.RMatrix,DataAnalysis.Basic.RVector,DataAnalysis.Basic.RVector,System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Prueba la hipótesis de si una muestra multivariable proviene de una 
            población en la cual el vector de media es igual a un vector 
            específico. Si la prueba lleva a un resultado significativo, puede 
            concluirse que la mustra se deriva de una población con vector media 
            diferente al valor especificado.
            </summary>
            <param name="spl">
            Estimación de la matriz de covarianza común entre ambas muestras
            </param>
            <param name="mean1">
            Vector de medias de la muestra multivariable 1
            </param>
            <param name="mean2">
            Vector de medias de la muestra multivariable 2
            </param>
            <param name="n1">
            Cantidad de observaciones de la muestra multivarible 1
            </param>
            <param name="n2">
            Cantidad de observaciones de la muestra multivarible 1
            </param>
            <param name="alpha">
            Nivel de significación de la prueba.
            </param>
            <returns>
            Información de la prueba estadística. La prueba es significativa si 
            el valor del estadístico es mayor o igual que el valor crítico.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.HypothesisTest.Parametric.ComparisonOfIndependentSamplesMeans.GetContribution(DataAnalysis.Basic.RVector,DataAnalysis.Basic.RMatrix,System.Double,System.Int32,DataAnalysis.Basic.RVector,System.Double)">
            <summary>
            Devuelve en forma de vector la contribución de cada variable al fallo
            en un observación x determinada
            </summary>
            <param name="t">
            Vector de los r scores responsables del fallo    
            </param>
            <param name="p">
            Matriz de transformación
            </param>
            <param name="t2th">
            Umbral de funcionamiento normal estimado con T2HotellingTest
            </param>
            <param name="m">
            Cantidad de variables de la muestra
            </param>
            <param name="l">
            Vector de los valores propios correspondientes a cada variable 
            </param>
            <returns>
            Vector de contribuciones 1 x m para cada variable, referente a 
            solo una observación
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.HypothesisTest.Parametric.ComparisonOfIndependentSamplesMeans.T2HotellingTest(DataAnalysis.Basic.RMatrix,DataAnalysis.Basic.RVector,System.Double)">
            <summary>
            Prueba la hipótesis de si una muestra multivariable proviene de una 
            población en la cual el vector de media es igual a un vector 
            específico. Si la prueba lleva a un resultado significativo, puede 
            concluirse que la mustra se deriva de una población con vector media 
            diferente al valor especificado.
            </summary>
            <param name="sample">
            Muestra multivariable.
            </param>
            <param name="mean">
            Valores hipotéticos para el vector de media de la población.
            </param>
            /// <param name="alpha">
            Nivel de significación de la prueba.
            </param>
            <returns>
            Información de la prueba estadística. La prueba es significativa si 
            el valor del estadístico es mayor o igual que el valor crítico.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.HypothesisTest.Parametric.ComparisonOfIndependentSamplesMeans.GetSCI(DataAnalysis.Basic.RMatrix,DataAnalysis.Basic.RVector@,DataAnalysis.Basic.RVector@,System.Double)">
            <summary>
            Obtiene los intervalos de confidencia simultáneos para las medias 
            de la muestra multivariable.
            </summary>
            <param name="sample">
            Muestra multivariable.
            </param>
            <param name="lcl">
            Límite inferior de la región de confianza.
            </param>
            <param name="ucl">
            Límite superior de la región de confianza.
            </param>
            <param name="alpha">
            Nivel de significación.
            </param>
        </member>
        <member name="M:DataAnalysis.Statistical.HypothesisTest.Parametric.ComparisonOfIndependentSamplesMeans.T2HotellingTest(DataAnalysis.Basic.RMatrix,DataAnalysis.Basic.RMatrix,System.Double)">
            <summary>
            Prueba la hipótesis de si dos muestras multivariables independientes 
            representan dos poblaciones con diferentes vectores de media. Si la 
            prueba lleva a un resultado significativo, puede concluirse que las 
            muestras representan poblaciones con diferentes vectores de media.
            </summary>
            <param name="sample1">
            Muestra multivariable.
            </param>
            <param name="sample2">
            Muestra multivariable.
            </param>
            <param name="alpha">
            Nivel de significación de la prueba.
            </param>
            <returns>
            Información de la prueba estadística. La prueba es significativa si 
            el valor del estadístico es mayor o igual que el valor crítico.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.HypothesisTest.Parametric.ComparisonOfIndependentSamplesMeans.GetSCI(DataAnalysis.Basic.RMatrix,DataAnalysis.Basic.RMatrix,DataAnalysis.Basic.RVector@,DataAnalysis.Basic.RVector@,System.Double)">
            <summary>
            Obtiene los intervalos de confidencia simultáneos para la diferencia
            entre las medias de las muestras multivariables.
            </summary>
            <param name="sample1">
            Muestra multivariable.
            </param>
            <param name="sample2">
            Muestra multivariable.
            </param>
            <param name="lcl">
            Límite inferior de la región de confianza.
            </param>
            <param name="ucl">
            Límite superior de la región de confianza.
            </param>
            <param name="alpha">
            Nivel de significación.
            </param>
        </member>
        <member name="M:DataAnalysis.Statistical.HypothesisTest.Parametric.ComparisonOfIndependentSamplesMeans.WilksTest(DataAnalysis.Basic.RMatrix[],System.Double)">
            <summary>
            Prueba la hipótesis de si un conjunto de muestras multivariables 
            independientes representan poblaciones con diferentes vectores de 
            media. Si la prueba lleva a un resultado significativo, puede 
            concluirse que las muestras representan poblaciones con diferentes 
            vectores de media.
            </summary>
            <param name="samples">
            Muestras multivariables.
            </param>
            <param name="alpha">
            Nivel de significación de la prueba.
            </param>
            <returns>
            Información de la prueba estadística. La prueba es significativa si 
            el valor del estadístico es mayor o igual que el valor crítico.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.HypothesisTest.Parametric.ComparisonOfIndependentSamplesMeans.PillaiTest(DataAnalysis.Basic.RMatrix[],System.Double)">
            <summary>
            Prueba la hipótesis de si un conjunto de muestras multivariables 
            independientes representan poblaciones con diferentes vectores de 
            media. Si la prueba lleva a un resultado significativo, puede 
            concluirse que las muestras representan poblaciones con diferentes 
            vectores de media.
            </summary>
            <param name="samples">
            Muestras multivariables.
            </param>
            <param name="alpha">
            Nivel de significación de la prueba.
            </param>
            <returns>
            Información de la prueba estadística. La prueba es significativa si 
            el valor del estadístico es mayor o igual que el valor crítico.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.HypothesisTest.Parametric.ComparisonOfIndependentSamplesMeans.LawleyHotellingTest(DataAnalysis.Basic.RMatrix[],System.Double)">
            <summary>
            Prueba la hipótesis de si un conjunto de muestras multivariables 
            independientes representan poblaciones con diferentes vectores de 
            media. Si la prueba lleva a un resultado significativo, puede 
            concluirse que las muestras representan poblaciones con diferentes 
            vectores de media.
            </summary>
            <param name="samples">
            Muestras multivariables.
            </param>
            <param name="alpha">
            Nivel de significación de la prueba.
            </param>
            <returns>
            Información de la prueba estadística. La prueba es significativa si 
            el valor del estadístico es mayor o igual que el valor crítico.
            </returns>
        </member>
        <member name="T:DataAnalysis.Statistical.HypothesisTest.Parametric.DAgostinoPearsonTest">
            <summary>
            Implementa la prueba de hipótesis D'Angostino-Pearson para determinar 
            cuando una muestra es derivada de una población con distribución normal.
            </summary>
        </member>
        <member name="M:DataAnalysis.Statistical.HypothesisTest.Parametric.DAgostinoPearsonTest.Test(DataAnalysis.Basic.RVector,System.Double)">
            <summary>
            Prueba la hipótesis de si una muestra proviene de una población
            con ditribución normal. Si la prueba lleva a un resultado 
            significativo, puede concluirse que la mustra se deriva de una 
            población con distribución diferente a la normal.
            </summary>
            <param name="sample">
            Muestra.
            </param>
            <param name="alpha">
            Nivel de significación de la prueba.
            </param>
            <returns>
            Información de la prueba estadística. La prueba es significativa si 
            el valor del estadístico es mayor o igual que el valor crítico.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.HypothesisTest.Parametric.DAgostinoPearsonTest.Test(DataAnalysis.Basic.RMatrix,System.Double)">
            <summary>
            Prueba la hipótesis de si una muestra proviene de una población
            con distribución multinormal. Si la prueba lleva a un resultado 
            significativo, puede concluirse que la mustra se deriva de una 
            población con distribución diferente a la multinormal.
            </summary>
            <param name="sample">
            Muestra.
            </param>
            <param name="alpha">
            Nivel de significación.
            </param>
            <returns>
            Información de la prueba estadística para el test de JarqueBera. La prueba es 
            significativa si el valor del estadístico es mayor o igual que el 
            valor crítico.
            </returns>
        </member>
        <member name="T:DataAnalysis.Statistical.HypothesisTest.Parametric.HomogeneityOfVariancesTest">
            <summary>
            Implementa pruebas de hipótesis para el análisis de la homogeneidad 
            de la varianza en un conjunto de muestras independientes.
            </summary>
        </member>
        <member name="M:DataAnalysis.Statistical.HypothesisTest.Parametric.HomogeneityOfVariancesTest.HartleyFmaxTest(DataAnalysis.Basic.RVector[],System.Double)">
            <summary>
            Prueba la hipótesis de homogeneidad de la varianza en un conjunto 
            de muestras univariables independientes. Si la prueba lleva a un 
            resultado significativo, puede concluirse que las poblaciones 
            representadas por las muestras presentan varianzas diferentes.
            </summary>
            <param name="samples">
            Muestras univariables.
            </param>
            <param name="alpha">
            Nivel de significación de la prueba.
            </param>
            <returns>
            Información de la prueba estadística. La prueba es significativa si 
            el valor del estadístico es mayor o igual que el valor crítico.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.HypothesisTest.Parametric.HomogeneityOfVariancesTest.BartlettTest(DataAnalysis.Basic.RVector[],System.Double)">
            <summary>
            Prueba la hipótesis de homogeneidad de la varianza en un conjunto 
            de muestras univariables independientes. Si la prueba lleva a un 
            resultado significativo, puede concluirse que las poblaciones 
            representadas por las muestras presentan varianzas diferentes.
            </summary>
            <param name="samples">
            Muestras univariables.
            </param>
            <param name="alpha">
            Nivel de significación de la prueba.
            </param>
            <returns>
            Información de la prueba estadística. La prueba es significativa si 
            el valor del estadístico es mayor o igual que el valor crítico.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.HypothesisTest.Parametric.HomogeneityOfVariancesTest.BoxMTest(DataAnalysis.Basic.RMatrix[],System.Double)">
            <summary>
            Prueba la hipótesis de homogeneidad de la varianza en un conjunto 
            de muestras multivariables independientes. Si la prueba lleva a un 
            resultado significativo, puede concluirse que las poblaciones 
            representadas por las muestras presentan varianzas diferentes.
            </summary>
            <param name="samples">
            Muestras multivariables.
            </param>
            <param name="alpha">
            Nivel de significación de la prueba.
            </param>
            <returns>
            Información de la prueba estadística. La prueba es significativa si 
            el valor del estadístico es mayor o igual que el valor crítico.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.HypothesisTest.Parametric.LinearDependence.ZeroCorrelation(DataAnalysis.Basic.RVector,DataAnalysis.Basic.RVector,System.Double)">
            <summary>
            Prueba la hipótesis de independencia entre dos muestras univariables. Si
            la prueba lleva a un resultado significativo, puede concluirse que las 
            variables están correlacionadas.
            </summary>
            <param name="sample1">
            Muestra univariable.
            </param>
            <param name="sample2">
            Muestra univariable.
            </param>
            <param name="alpha">
            Nivel de significación de la prueba.
            </param>
            <returns>
            Información de la prueba estadística. La prueba es significativa si 
            el valor del estadístico es mayor o igual que el valor crítico.
            </returns>
        </member>
        <member name="T:DataAnalysis.Statistical.HypothesisTest.Parametric.PearsonProductMomentTest">
            <summary>
            Implementa el cálculo del Pearson's Product-Moment Correlation.
            </summary>
        </member>
        <member name="M:DataAnalysis.Statistical.HypothesisTest.Parametric.PearsonProductMomentTest.GetCorrelationCoefficient(DataAnalysis.Basic.RVector,DataAnalysis.Basic.RVector,DataAnalysis.Statistical.HypothesisTest.HypothesisTest.TestInfo@,System.Double)">
            <summary>
            Obtiene el coeficiente de correlación entre dos muestras. 
            </summary>
            <param name="sample1">
            Muestra.
            </param>
            <param name="sample2">
            Muestra.
            </param>
            <param name="testInfo">
            Información de la prueba estadística para relación lineal 
            entre las variables. La prueba es significativa si el valor 
            del estadístico es mayor o igual que el valor crítico.
            </param>
            <param name="alpha">
            Nivel de significación de la prueba.
            </param>
            <returns>
            Coeficiente de correlación de Pearson.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.HypothesisTest.Parametric.PearsonProductMomentTest.GetAutocorrelationCoefficient(DataAnalysis.Basic.RVector,System.Double@,System.Double@,System.Double)">
            <summary>
            Obtiene el coeficiente de autocorrelación de una muestra. La
            autocorrelación es significativa se encuentra fuera de los límites
            establecidos para no significación.
            </summary>
            <param name="sample">
            Muestra.
            </param>
            <param name="lowerTh">
            Límite inferior para autocorrelación no significativa.
            </param>
            <param name="upperTh">
            Límite superior para autocorrelación no significativa.
            </param>
            <param name="alpha"></param>
            <returns></returns>
        </member>
        <member name="T:DataAnalysis.Statistical.Multivariate.DimensionalityReduction">
            <summary>
            Clase base para los métodos de reducción de la dimensionalidad.
            </summary>
        </member>
        <member name="T:DataAnalysis.Statistical.Multivariate.MultivariateStatistics">
            <summary>
            Implementa funcionalidades básicas de estadística multivariada.
            </summary>
        </member>
        <member name="M:DataAnalysis.Statistical.Multivariate.MultivariateStatistics.GetNeededTrainingAmount(System.Int32,System.Double,System.Double)">
            <summary>
            Determina la cantidad de datos de entrenamiento necesarios para 
            poblar estadísticamente la matriz de covarianza de un conjunto 
            de variables. 
            </summary>
            <param name="p">
            Cantidad de variables.
            </param>
            <param name="epsilon">
            Error relativo.
            </param>
            <param name="alpha">
            Nivel de significación.
            </param>
            <returns>
            Cantidad de datos necesarios para el conjunto de entrenamiento.
            </returns>
        </member>
        <member name="F:DataAnalysis.Statistical.Multivariate.DimensionalityReduction.variableCount">
            <summary>
            Cantidad de variables.
            </summary>
        </member>
        <member name="F:DataAnalysis.Statistical.Multivariate.DimensionalityReduction.groupCount">
            <summary>
            Cantidad de clases.
            </summary>
        </member>
        <member name="F:DataAnalysis.Statistical.Multivariate.DimensionalityReduction.spl">
            <summary>
            Matriz de covarianza conjunta.
            </summary>
        </member>
        <member name="M:DataAnalysis.Statistical.Multivariate.DimensionalityReduction.GetFeatureExtractionInfo">
            <summary>
            Obtiene la información correspondiente a los vectores
            de transformación.
            </summary>
            <returns>
            Matriz de información [id|var|exp|cum].
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Multivariate.DimensionalityReduction.GetMostSignificanteVariable(System.Int32[],System.Double@)">
            <summary>
            Obtiene la variable más significativa.
            </summary>
            <param name="variablesId"></param>
            <param name="signif"></param>
            <returns></returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Multivariate.DimensionalityReduction.GetMostPartialySignificantVariable(System.Int32[],System.Int32[],System.Double@)">
            <summary>
            
            </summary>
            <param name="variablesId"></param>
            <param name="variablesIdTest"></param>
            <param name="psignif"></param>
            <returns></returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Multivariate.DimensionalityReduction.ToPMML">
            <summary>
            Crea una lista de elementos XML con la representación
            en PMML de los campos derivados obtenidos a partir de 
            aplicar el método.
            </summary>
            <returns></returns>
        </member>
        <member name="P:DataAnalysis.Statistical.Multivariate.DimensionalityReduction.MappingMatrix">
            <summary>
            Matriz de transformación. Cada columna contiene 
            los coeficientes para un vector de transformación. Las 
            columnas están en orden decreciente de la significación
            de los vectores de transformación.
            </summary>
        </member>
        <member name="P:DataAnalysis.Statistical.Multivariate.DimensionalityReduction.SignifVal">
            <summary>
            Significación de los vectores de transformación.
            </summary>
        </member>
        <member name="T:DataAnalysis.Statistical.Multivariate.DiscriminantAnalysis">
            <summary>
            Implementa métodos para la descripción de las separación de grupos de datos.
            Se utiliza para describir diferencias entre dos o más grupos. Incluye 
            identificación de la contribución relativa de las variables a la separación 
            de los grupos y búsqueda de planos óptimos hacia los cuales proyectar para 
            mejorar la configuración de los grupos.
            </summary>
        </member>
        <member name="F:DataAnalysis.Statistical.Multivariate.MultiGroupDimensionalityReduction.groupSamplesCount">
            <summary>
            Cantidad de observaciones en cada clase.
            </summary>
        </member>
        <member name="M:DataAnalysis.Statistical.Multivariate.MultiGroupDimensionalityReduction.#ctor(DataAnalysis.Basic.RMatrix[],System.Boolean)">
            <summary>
            Construye un análisis para la reducción de dimensión en múltiples grupos.
            </summary>
            <param name="samples">
            Muestra multivariable conteniendo los datos de varios grupos.
            </param>
            <param name="validateTrainingAmount">
            Inidicador para validar la cantidad de muestras requeridas.
            false -valor por defecto.
            </param>
        </member>
        <member name="F:DataAnalysis.Statistical.Multivariate.DiscriminantAnalysis.Dfcount">
            <summary>
            Cantidad de funciones discriminantes.
            </summary>
        </member>
        <member name="M:DataAnalysis.Statistical.Multivariate.DiscriminantAnalysis.#ctor(DataAnalysis.Basic.RMatrix[],System.Boolean)">
            <summary>
            Construye un Análisis Discriminante.
            </summary>
            <param name="samples">
            Muestras multivariables conteniendo los datos de varios grupos.
            </param>
            <param name="validateTrainingAmount">
            Inidicador para validar la cantidad de muestras requeridas.
            false -valor por defecto.
            </param>
        </member>
        <member name="M:DataAnalysis.Statistical.Multivariate.DiscriminantAnalysis.MappingMatrixInfo">
            <summary>
            Obtiene la información correspondiente a los vectores
            de transformación.
            </summary>
            <returns>
            Matriz de información [id|sep|exp|cum]
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Multivariate.DiscriminantAnalysis.GetSignificanceThreshold(System.Int32,System.Double)">
            <summary>
            Obtiene el umbral de la significación de un conjunto de variables
            en la separabilidad.
            </summary>
            <param name="p">
            Número de variables.
            </param>
            <param name="alpha">
            Significación de la prueba de hipótesis.
            </param>
            <returns>
            Valor del umbral.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Multivariate.DiscriminantAnalysis.GetPartialSignificanceThreshold(System.Int32,System.Double)">
            <summary>
            Obitene el umbral de la significación condicional de una variable dado
            un conjunto ya seleccionado de variables en la separabilidad.
            </summary>
            <param name="selCount">
            Número de variables seleccionadas.
            </param>
            <param name="alpha">
            Significación de la prueba de hipótesis.
            </param>
            <returns>
            Valor del umbral.
            </returns>
        </member>
        <member name="T:DataAnalysis.Statistical.Multivariate.TwoClassDiscriminantAnalysis">
            <summary>
            Implementa métodos para el Análsis Discriminante con dos clases.
            </summary>
        </member>
        <member name="F:DataAnalysis.Statistical.Multivariate.TwoClassDiscriminantAnalysis.MeanDiff">
            <summary>
            Vector de diferencia entre las medias de los grupos.
            </summary>
        </member>
        <member name="M:DataAnalysis.Statistical.Multivariate.TwoClassDiscriminantAnalysis.#ctor(DataAnalysis.Basic.RMatrix,DataAnalysis.Basic.RMatrix,System.Boolean)">
            <summary>
            Construye un Análisis Discriminante para dos clases.
            </summary>
            <param name="sample1">
            Muestra multivariable.
            </param>
            <param name="sample2">
            Muestra multivariable.
            </param>
            <param name="validateTrainingAmount">
            Inidicador para validar la cantidad de muestras requeridas.
            false -valor por defecto.
            </param>
        </member>
        <member name="M:DataAnalysis.Statistical.Multivariate.TwoClassDiscriminantAnalysis.ToPMML">
            <summary>
            Transforma en PMML las componentes seleccionadas
            </summary>
            <returns>
            Lista de componentes de
            </returns>
        </member>
        <member name="T:DataAnalysis.Statistical.Multivariate.SeparabilityMeasure">
            <summary>
            Medidas de significación de la separabilidad.
            </summary>
        </member>
        <member name="T:DataAnalysis.Statistical.Multivariate.MultiClassDiscriminantAnalysis">
            <summary>
            Implementa métodos para el Análsis Discriminante con multiples clases.
            </summary>
        </member>
        <member name="F:DataAnalysis.Statistical.Multivariate.MultiClassDiscriminantAnalysis.H">
            <summary>
            Matriz de disperción de la media de los grupos (Sb).
            </summary>
        </member>
        <member name="F:DataAnalysis.Statistical.Multivariate.MultiClassDiscriminantAnalysis.E">
            <summary>
            Matriz de disperción promedio de los grupos (Sw).
            </summary>
        </member>
        <member name="M:DataAnalysis.Statistical.Multivariate.MultiClassDiscriminantAnalysis.#ctor(DataAnalysis.Basic.RMatrix[],System.Boolean,DataAnalysis.Statistical.Multivariate.SeparabilityMeasure)">
            <summary>
            Construye un Análisis Discriminante para dos clases.
            </summary>
            <param name="samples">
            Muestras multivariables conteniendo los datos de varios grupos.
            </param>
            <param name="validateTrainingAmount">
            Inidicador para validar la cantidad de muestras requeridas.
            false -valor por defecto.
            </param>
            <param name="measure">
            Medida de separabilidad que se utilizará para comprobar la prueba e hipótesis
            </param>
        </member>
        <member name="M:DataAnalysis.Statistical.Multivariate.MultiClassDiscriminantAnalysis.GetFeatureSelectionInfo">
            <summary>
            Obtiene la información de la selección de características
            </summary>
            <returns></returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Multivariate.MultiClassDiscriminantAnalysis.ToPMML">
            <summary>
            Crea una representación en PMML de los campos obtenidos
            mediante el análisis de discriminante
            </summary>
            <returns>
            Representación en PMML de los campos obtenidos
            </returns>
        </member>
        <member name="T:DataAnalysis.Statistical.Multivariate.OneGroupDimensionalityReduction">
            <summary>
            Clase base para los métodos de reducción de dimensionalidad de un grupo
            </summary>
        </member>
        <member name="F:DataAnalysis.Statistical.Multivariate.OneGroupDimensionalityReduction.samplesCount">
            <summary>
            Cantidad de observaciones.
            </summary>
        </member>
        <member name="M:DataAnalysis.Statistical.Multivariate.OneGroupDimensionalityReduction.#ctor(DataAnalysis.Basic.RMatrix,System.Boolean)">
            <summary>
            Construye un análisis para la reducción de dimensión en un grupo.
            </summary>
            <param name="samples">
            Muestra multivariable conteniendo los datos de un grupo.
            </param>
            <param name="validateTrainingAmount">
            Inidicador para validar la cantidad de muestras requeridas.
            false -valor por defecto.
            </param>
        </member>
        <member name="T:DataAnalysis.Statistical.Multivariate.OneGroupDimReduction.PrincipalComponentAnalysis">
            <summary>
            Implementa métodos para analizar la estructura de una muestra que no 
            presenta agrupamiento entre las observaciones. Obtiene las variables 
            que maximizan la varianza de la combinación de la variables. 
            </summary>
        </member>
        <member name="F:DataAnalysis.Statistical.Multivariate.OneGroupDimReduction.PrincipalComponentAnalysis.retainedComponents">
            <summary>
            Índices de las componentes retenidas por cualquier método
            </summary>
        </member>
        <member name="M:DataAnalysis.Statistical.Multivariate.OneGroupDimReduction.PrincipalComponentAnalysis.#ctor(DataAnalysis.Basic.RMatrix,System.Boolean)">
            <summary>
            Construye un Análisis de Componentes Principales.
            </summary>
            <param name="samples">
            Muestras multivariable.
            </param>
            <param name="validateTrainingAmount">
            Inidicador para validar la cantidad de muestras requeridas.
            false -valor por defecto.
            </param>
        </member>
        <member name="M:DataAnalysis.Statistical.Multivariate.OneGroupDimReduction.PrincipalComponentAnalysis.RetainPCsByProcInfo(System.Double)">
            <summary>
            Obtiene las CPs necesarias para explicar un porciento de información.
            </summary>
            <param name="info">
            Porciento de información a explicar.
            </param>
            <returns>
            Índices de las PCs a retener.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Multivariate.OneGroupDimReduction.PrincipalComponentAnalysis.RetainPCsByVarSize">
            <summary>
            Obtiene las PCs cuyas varianzas son mayor que la varianza promedio.
            </summary>
            <returns>
            Índices de las PCs a retener.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Multivariate.OneGroupDimReduction.PrincipalComponentAnalysis.RetainPCsByHypoTest(System.Double)">
            <summary>
            Obtiene las PCs para las cuales se rechaza la hipótesis de igualdad
            de la varianza que explican.
            </summary>
            <param name="alpha">
            Nivel de significación de la prueba.
            </param>
            <returns>
            Índices de las PCs retenidas.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Multivariate.OneGroupDimReduction.PrincipalComponentAnalysis.ToPMML">
            <summary>
            Convierte a PMML las componentes principales obtenidas
            </summary>
            <returns>
            Lista de elementos xml con la representacion de las componentes principales
            </returns>
        </member>
        <member name="T:DataAnalysis.Statistical.SeparabilityMeasures">
            <summary>
            Implementa medidas de distancia entre dos grupos
            de datos y dos vectores.
            </summary>
        </member>
        <member name="M:DataAnalysis.Statistical.SeparabilityMeasures.Euclidean(DataAnalysis.Basic.RVector,DataAnalysis.Basic.RVector,System.Nullable{System.Int32})">
            <summary>
            Calcula la separabilidad entre dos vectores utilizando
            como medida la distancia Euclidiana.
            </summary>
            <param name="v1">
            Vector real.
            </param>
            <param name="v2">
            Vector real.
            </param>
            <param name="param"></param>
            <returns>
            Distancia Euclidiana.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.SeparabilityMeasures.Euclidean(DataAnalysis.Basic.RMatrix,DataAnalysis.Basic.RMatrix)">
            <summary>
            Calcula la separabilidad entre dos conjuntos de datos utilizando
            como medida la distancia Euclidiana.
            </summary>
            <param name="g1">
            Matriz real.
            </param>
            <param name="g2">
            Matriz real.
            </param>
            <returns>
            Distancia Euclidiana.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.SeparabilityMeasures.Mahalanobis(DataAnalysis.Basic.RMatrix,DataAnalysis.Basic.RMatrix)">
            <summary>
            Calcula la separabilidad entre dos conjuntos de datos utilizando
            como medida la distancia de Mahalanobis.
            </summary>
            <param name="g1">
            Matriz real.
            </param>
            <param name="g2">
            Matriz real.
            </param>
            <returns>
            Distancia Mahalanobis.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.SeparabilityMeasures.Divergence(DataAnalysis.Basic.RMatrix,DataAnalysis.Basic.RMatrix)">
            <summary>
            Calcula la separabilidad entre dos conjuntos de datos utilizando
            como medida la divergencia.
            </summary>
            <param name="g1">
            Matriz real.
            </param>
            <param name="g2">
            Matriz real.
            </param>
            <returns>
            Divergencia.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.SeparabilityMeasures.Bhattacharyya(DataAnalysis.Basic.RMatrix,DataAnalysis.Basic.RMatrix)">
            <summary>
            Calcula la separabilidad entre dos conjuntos de datos utilizando
            como medida la distancia de Bhattacharyya.
            </summary>
            <param name="g1">
            Matriz real.
            </param>
            <param name="g2">
            Matriz real.
            </param>
            <returns>
            Distancia Mahalanobis.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.SeparabilityMeasures.Minkowski(DataAnalysis.Basic.RVector,DataAnalysis.Basic.RVector,System.Nullable{System.Int32})">
            <summary>
            Calcula la separabilidad entre dos vectores utilizando
            como medida la distancia de Minkowski.
            </summary>
            <param name="v1">
            Vector real.
            </param>
            <param name="v2">
            Vector real.
            </param>
            <param name="param">
            ... Representa la distancia Manhattan cuando (p = 1) 
            y la distancia Euclidiana cuando (p=2).
            </param>
            <returns>
            Distancia Minkowski.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.SeparabilityMeasures.Minkowski(DataAnalysis.Basic.RMatrix,DataAnalysis.Basic.RMatrix,System.Int32)">
            <summary>
            Calcula la separabilidad entre dos conjuntos de datos utilizando
            como medida la distancia de Minkowski.
            </summary>
            <param name="g1">
            Matriz real.
            </param>
            <param name="g2">
            Matriz real.
            </param>
            <param name="p">
            ... Representa la distancia Manhattan cuando (p = 1) 
            y la distancia Euclidiana cuando (p=2).
            </param>
            <returns>
            Distancia Minkowski.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.SeparabilityMeasures.Cosine(DataAnalysis.Basic.RMatrix,DataAnalysis.Basic.RMatrix)">
            <summary>
            Calcula la separabilidad entre dos conjuntos de datos utilizando
            como medida la distancia Cosine.
            </summary>
            <param name="g1">
            Matriz real.
            </param>
            <param name="g2">
            Matriz real.
            </param>
            <returns>
            Distancia Cosine.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.SeparabilityMeasures.Correlation(DataAnalysis.Basic.RVector,DataAnalysis.Basic.RVector,System.Nullable{System.Int32})">
            <summary>
            Calcula la separabilidad entre dos vectores utilizando
            como medida la distancia de correclación.
            </summary>
            <param name="v1">
                Vector real
            </param>
            <param name="v2">
                Vector real
            </param>
            <param name="param"></param>
            <returns>
            Distancia de Correlación
            </returns>
        </member>
        <member name="T:DataAnalysis.Statistical.Probability.BetaDistribution">
            <summary>
            Implementa la distribución Beta.
            </summary>
        </member>
        <member name="M:DataAnalysis.Statistical.Probability.ProbabilityDistribution.#ctor(System.Double[])">
            <summary>
            Construye un objeto ProbabilityDistribution.
            </summary>
            <param name="distParam">
            Parámetros de la distribución.
            </param>
        </member>
        <member name="M:DataAnalysis.Statistical.Probability.BetaDistribution.#ctor(System.Double[])">
            <summary>
            Construye un objeto BetaDistribution.
            </summary>
            <param name="distParam">
            Parámetros de la distribución [a,b].
            </param>
        </member>
        <member name="M:DataAnalysis.Statistical.Probability.BetaDistribution.PDF(System.Double)">
            <summary>
            Calcula la función de densidad de probabilidad (pdf).
            </summary>
            <param name="x">
            Valor para el cual se desea evaluar la pdf.
            </param>
            <returns>
            Valor de la pdf.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Probability.BetaDistribution.CDF(System.Double)">
            <summary>
            Calcula la función de distribución acumulada (cdf).
            </summary>
            <param name="x">
            Valor para el cual se desea evaluar la cdf.
            </param>
            <returns>
            Valor de la cdf.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Probability.BetaDistribution.INV(System.Double)">
            <summary>
            Calcula la función de distribución acumulada inversa.
            </summary>
            <param name="p">
            Valor de probabilidad.
            </param>
            <returns>
            Valor de la cdf inversa.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Probability.BetaDistribution.Moments">
            <summary>
            Obtiene los primeros momentos centrales estadísticos 
            de la distribución.
            </summary>
            <returns>
            Momentos estadísticos [mean|variance|skewness|kurtosis ex].
            </returns>
        </member>
        <member name="T:DataAnalysis.Statistical.Probability.ChiSquareDistribution">
            <summary>
            Implementa la distribución Chi-Cuadrado
            </summary>
        </member>
        <member name="M:DataAnalysis.Statistical.Probability.ChiSquareDistribution.#ctor(System.Double[])">
            <summary>
            Construye un objeto ChiSquareDistribution.
            </summary>
            <param name="distParam">
            Parámetros de la distribución [n].
            </param>
        </member>
        <member name="M:DataAnalysis.Statistical.Probability.ChiSquareDistribution.PDF(System.Double)">
            <summary>
            Calcula la función de densidad de probabilidad (pdf).
            </summary>
            <param name="x">
            Valor para el cual se desea evaluar la pdf.
            </param>
            <returns>
            Valor de la pdf.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Probability.ChiSquareDistribution.CDF(System.Double)">
            <summary>
            Calcula la función de distribución acumulada (cdf).
            </summary>
            <param name="x">
            Valor para el cual se desea evaluar la cdf.
            </param>
            <returns>
            Valor de la cdf.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Probability.ChiSquareDistribution.INV(System.Double)">
            <summary>
            Calcula la función de distribución acumulada inversa.
            </summary>
            <param name="p">
            Valor de probabilidad.
            </param>
            <returns>
            Valor de la cdf inversa.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Probability.ChiSquareDistribution.Moments">
            <summary>
            Obtiene los primeros momentos centrales estadísticos 
            de la distribución.
            </summary>
            <returns>
            Momentos estadísticos [mean|variance|skewness|kurtosis ex].
            </returns>
        </member>
        <member name="T:DataAnalysis.Statistical.Probability.ExponentialDistribution">
            <summary>
            Implementa la distribución Exponential.
            </summary>
        </member>
        <member name="M:DataAnalysis.Statistical.Probability.ExponentialDistribution.#ctor(System.Double[])">
            <summary>
            Construye un objeto ExponentialDistribution.
            </summary>
            <param name="distParam">
            Parámetros de la distribución [a].
            </param>
        </member>
        <member name="M:DataAnalysis.Statistical.Probability.ExponentialDistribution.PDF(System.Double)">
            <summary>
            Calcula la función de densidad de probabilidad (pdf).
            </summary>
            <param name="x">
            Valor para el cual se desea evaluar la pdf.
            </param>
            <returns>
            Valor de la pdf.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Probability.ExponentialDistribution.CDF(System.Double)">
            <summary>
            Calcula la función de distribución acumulada (cdf).
            </summary>
            <param name="x">
            Valor para el cual se desea evaluar la cdf.
            </param>
            <returns>
            Valor de la cdf.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Probability.ExponentialDistribution.INV(System.Double)">
            <summary>
            Calcula la función de distribución acumulada inversa.
            </summary>
            <param name="p">
            Valor de probabilidad.
            </param>
            <returns>
            Valor de la cdf inversa.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Probability.ExponentialDistribution.Moments">
            <summary>
            Obtiene los primeros momentos centrales estadísticos 
            de la distribución.
            </summary>
            <returns>
            Momentos estadísticos [mean|variance|skewness|kurtosis ex].
            </returns>
        </member>
        <member name="T:DataAnalysis.Statistical.Probability.FDistribution">
            <summary>
            Implementa la distribución F.
            </summary>
        </member>
        <member name="M:DataAnalysis.Statistical.Probability.FDistribution.#ctor(System.Double[])">
            <summary>
            Construye un objeto FDistribution.
            </summary>
            <param name="distParam">
            Parámetros de la distribución [n1,n2].
            </param>
        </member>
        <member name="M:DataAnalysis.Statistical.Probability.FDistribution.PDF(System.Double)">
            <summary>
            Calcula la función de densidad de probabilidad (pdf).
            </summary>
            <param name="x">
            Valor para el cual se desea evaluar la pdf.
            </param>
            <returns>
            Valor de la pdf.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Probability.FDistribution.CDF(System.Double)">
            <summary>
            Calcula la función de distribución acumulada (cdf).
            </summary>
            <param name="x">
            Valor para el cual se desea evaluar la cdf.
            </param>
            <returns>
            Valor de la cdf.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Probability.FDistribution.INV(System.Double)">
            <summary>
            Calcula la función de distribución acumulada inversa.
            </summary>
            <param name="p">
            Valor de probabilidad.
            </param>
            <returns>
            Valor de la cdf inversa.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Probability.FDistribution.Moments">
            <summary>
            Obtiene los primeros momentos centrales estadísticos 
            de la distribución.
            </summary>
            <returns>
            Momentos estadísticos [mean|variance|skewness|kurtosis ex].
            </returns>
        </member>
        <member name="T:DataAnalysis.Statistical.Probability.GammaDistribution">
            <summary>
            Implementa la distribución Gamma.
            </summary>
        </member>
        <member name="M:DataAnalysis.Statistical.Probability.GammaDistribution.#ctor(System.Double[])">
            <summary>
            Crea un objeto GammaDistribution.
            </summary>
            <param name="distParam">
            Parámetros de la distribución [a,b].
            </param>
        </member>
        <member name="M:DataAnalysis.Statistical.Probability.GammaDistribution.PDF(System.Double)">
            <summary>
            Calcula la función de densidad de probabilidad (pdf).
            </summary>
            <param name="x">
            Valor para el cual se desea evaluar la pdf.
            </param>
            <returns>
            Valor de la pdf.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Probability.GammaDistribution.CDF(System.Double)">
            <summary>
            Calcula la función de distribución acumulada (cdf).
            </summary>
            <param name="x">
            Valor para el cual se desea evaluar la cdf.
            </param>
            <returns>
            Valor de la cdf.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Probability.GammaDistribution.INV(System.Double)">
            <summary>
            Calcula la función de distribución acumulada inversa.
            </summary>
            <param name="p">
            Valor de probabilidad.
            </param>
            <returns>
            Valor de la cdf inversa.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Probability.GammaDistribution.Moments">
            <summary>
            Obtiene los primeros momentos centrales estadísticos 
            de la distribución.
            </summary>
            <returns>
            Momentos estadísticos [mean|variance|skewness|kurtosis ex].
            </returns>
        </member>
        <member name="T:DataAnalysis.Statistical.Probability.GumbelDistribution">
            <summary>
            Implementa la distribución Gumbel.
            </summary>
        </member>
        <member name="M:DataAnalysis.Statistical.Probability.GumbelDistribution.#ctor(System.Double[])">
            <summary>
            Crea un objeto GumbelDistribution.
            </summary>
            <param name="distParam">
            Parámetros de la distribución [a, b].
            </param>
        </member>
        <member name="M:DataAnalysis.Statistical.Probability.GumbelDistribution.PDF(System.Double)">
            <summary>
            Calcula la función de densidad de probabilidad (pdf).
            </summary>
            <param name="x">
            Valor para el cual se desea evaluar la pdf.
            </param>
            <returns>
            Valor de la pdf.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Probability.GumbelDistribution.CDF(System.Double)">
            <summary>
            Calcula la función de distribución acumulada (cdf).
            </summary>
            <param name="x">
            Valor para el cual se desea evaluar la cdf.
            </param>
            <returns>
            Valor de la cdf.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Probability.GumbelDistribution.INV(System.Double)">
            <summary>
            Calcula la función de distribución acumulada inversa.
            </summary>
            <param name="p">
            Valor de probabilidad.
            </param>
            <returns>
            Valor de la cdf inversa.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Probability.GumbelDistribution.Moments">
            <summary>
            Obtiene los primeros momentos centrales estadísticos 
            de la distribución.
            </summary>
            <returns>
            Momentos estadísticos [mean|variance|skewness|kurtosis ex].
            </returns>
        </member>
        <member name="T:DataAnalysis.Statistical.Probability.LognormalDistribution">
            <summary>
            Implementa la distribución Lognormal.
            </summary>
        </member>
        <member name="M:DataAnalysis.Statistical.Probability.LognormalDistribution.#ctor(System.Double[])">
            <summary>
            Construye un objeto LognormalDistribution.
            </summary>
            <param name="distPara">
            Parámetros de la distribución [mu,sigma];
            </param>
        </member>
        <member name="M:DataAnalysis.Statistical.Probability.LognormalDistribution.PDF(System.Double)">
            <summary>
            Calcula la función de densidad de probabilidad (pdf).
            </summary>
            <param name="x">
            Valor para el cual se desea evaluar la pdf.
            </param>
            <returns>
            Valor de la pdf.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Probability.LognormalDistribution.CDF(System.Double)">
            <summary>
            Calcula la función de distribución acumulada (cdf).
            </summary>
            <param name="x">
            Valor para el cual se desea evaluar la cdf.
            </param>
            <returns>
            Valor de la cdf.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Probability.LognormalDistribution.INV(System.Double)">
            <summary>
            Calcula la función de distribución acumulada inversa.
            </summary>
            <param name="p">
            Valor de probabilidad.
            </param>
            <returns>
            Valor de la cdf inversa.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Probability.LognormalDistribution.Moments">
            <summary>
            Obtiene los primeros momentos centrales estadísticos 
            de la distribución.
            </summary>
            <returns>
            Momentos estadísticos [mean|variance|skewness|kurtosis ex].
            </returns>
        </member>
        <member name="T:DataAnalysis.Statistical.Probability.NormalDistribution">
            <summary>
            Implementa la distribución Normal.
            </summary>
        </member>
        <member name="M:DataAnalysis.Statistical.Probability.NormalDistribution.#ctor(System.Double[])">
            <summary>
            Construye un objeto NormalDistribution.
            </summary>
            <param name="distParam">
            Parámetros de la distribución [mu,sigma].
            </param>
        </member>
        <member name="M:DataAnalysis.Statistical.Probability.NormalDistribution.PDF(System.Double)">
            <summary>
            Calcula la función de densidad de probabilidad (pdf).
            </summary>
            <param name="x">
            Valor para el cual se desea evaluar la pdf.
            </param>
            <returns>
            Valor de la pdf.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Probability.NormalDistribution.CDF(System.Double)">
            <summary>
            Calcula la función de distribución acumulada (cdf).
            </summary>
            <param name="x">
            Valor para el cual se desea evaluar la cdf.
            </param>
            <returns>
            Valor de la cdf.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Probability.NormalDistribution.INV(System.Double)">
            <summary>
            Calcula la función de distribución acumulada inversa.
            </summary>
            <param name="p">
            Valor de probabilidad.
            </param>
            <returns>
            Valor de la cdf inversa.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Probability.NormalDistribution.Moments">
            <summary>
            Obtiene los primeros momentos centrales estadísticos 
            de la distribución.
            </summary>
            <returns>
            Momentos estadísticos [mean|variance|skewness|kurtosis ex].
            </returns>
        </member>
        <member name="T:DataAnalysis.Statistical.Probability.StudentTDistribution">
            <summary>
            Implementa la distribución Student-t.
            </summary>
        </member>
        <member name="M:DataAnalysis.Statistical.Probability.StudentTDistribution.#ctor(System.Double[])">
            <summary>
            Construye un objeto StudentTDistribution.
            </summary>
            <param name="distParam">
            Parámetros de la distribución [n].
            </param>
        </member>
        <member name="M:DataAnalysis.Statistical.Probability.StudentTDistribution.PDF(System.Double)">
            <summary>
            Calcula la función de densidad de probabilidad (pdf).
            </summary>
            <param name="x">
            Valor para el cual se desea evaluar la pdf.
            </param>
            <returns>
            Valor de la pdf.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Probability.StudentTDistribution.CDF(System.Double)">
            <summary>
            Calcula la función de distribución acumulada (cdf).
            </summary>
            <param name="x">
            Valor para el cual se desea evaluar la cdf.
            </param>
            <returns>
            Valor de la cdf.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Probability.StudentTDistribution.INV(System.Double)">
            <summary>
            Calcula la función de distribución acumulada inversa.
            </summary>
            <param name="p">
            Valor de probabilidad.
            </param>
            <returns>
            Valor de la cdf inversa.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Probability.StudentTDistribution.Moments">
            <summary>
            Obtiene los primeros momentos centrales estadísticos 
            de la distribución.
            </summary>
            <returns>
            Momentos estadísticos [mean|variance|skewness|kurtosis ex].
            </returns>
        </member>
        <member name="T:DataAnalysis.Statistical.Probability.TukeyDistribution">
            <summary>
            Implementa la distribución de Tukey (Studentized Range)
            </summary>
        </member>
        <member name="M:DataAnalysis.Statistical.Probability.TukeyDistribution.#ctor(System.Double[])">
            <summary>
            Construye un objeto TukeyDistribution.
            </summary>
            <param name="distParam">
            Parámetros de la distribución [n,r].
            </param>
        </member>
        <member name="M:DataAnalysis.Statistical.Probability.TukeyDistribution.PDF(System.Double)">
            <summary>
            Calcula la función de densidad de probabilidad (pdf).
            </summary>
            <param name="x">
            Valor para el cual se desea evaluar la pdf.
            </param>
            <returns>
            Valor de la pdf.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Probability.TukeyDistribution.CDF(System.Double)">
            <summary>
            Calcula la función de distribución acumulada (cdf).
            </summary>
            <param name="x">
            Valor para el cual se desea evaluar la cdf.
            </param>
            <returns>
            Valor de la cdf.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Probability.TukeyDistribution.INV(System.Double)">
            <summary>
            Calcula la función de distribución acumulada inversa.
            </summary>
            <param name="p">
            Valor de probabilidad.
            </param>
            <returns>
            Valor de la cdf inversa.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Probability.TukeyDistribution.Qtrng0(System.Double,System.Int32,System.Int32)">
            <summary>
            Calculates an initial quantile p for a studentized range.
            </summary>
            <param name="p">
            Cumulative probability value.
            </param>
            <param name="df">
            Degrees of freedom.
            </param>
            <param name="r">
            Number of samples.
            </param>
            <returns>
            Critical value.
            </returns>
        </member>
        <member name="T:DataAnalysis.Statistical.Probability.UniformDistribution">
            <summary>
            Implementa la distribución Uniform.
            </summary>
        </member>
        <member name="M:DataAnalysis.Statistical.Probability.UniformDistribution.#ctor(System.Double[])">
            <summary>
            Construye un objeto UniformDistribution.
            </summary>
            <param name="distParam">
            Parámetros de la distribución [a,b];
            </param>
        </member>
        <member name="M:DataAnalysis.Statistical.Probability.UniformDistribution.PDF(System.Double)">
            <summary>
            Calcula la función de densidad de probabilidad (pdf).
            </summary>
            <param name="x">
            Valor para el cual se desea evaluar la pdf.
            </param>
            <returns>
            Valor de la pdf.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Probability.UniformDistribution.CDF(System.Double)">
            <summary>
            Calcula la función de distribución acumulada (cdf).
            </summary>
            <param name="x">
            Valor para el cual se desea evaluar la cdf.
            </param>
            <returns>
            Valor de la cdf.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Probability.UniformDistribution.INV(System.Double)">
            <summary>
            Calcula la función de distribución acumulada inversa.
            </summary>
            <param name="p">
            Valor de probabilidad.
            </param>
            <returns>
            Valor de la cdf inversa.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Probability.UniformDistribution.Moments">
            <summary>
            Obtiene los primeros momentos centrales estadísticos 
            de la distribución.
            </summary>
            <returns>
            Momentos estadísticos [mean|variance|skewness|kurtosis ex].
            </returns>
        </member>
        <member name="T:DataAnalysis.Statistical.Probability.WeibullDistribution">
            <summary>
            Implementa la distribución Weibull.
            </summary>
        </member>
        <member name="M:DataAnalysis.Statistical.Probability.WeibullDistribution.#ctor(System.Double[])">
            <summary>
            Construye un objeto WeibullDistribution.
            </summary>
            <param name="distParam">
            Parámetros de la distribución [a,b]
            </param>
        </member>
        <member name="M:DataAnalysis.Statistical.Probability.WeibullDistribution.PDF(System.Double)">
            <summary>
            Calcula la función de densidad de probabilidad (pdf).
            </summary>
            <param name="x">
            Valor para el cual se desea evaluar la pdf.
            </param>
            <returns>
            Valor de la pdf.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Probability.WeibullDistribution.CDF(System.Double)">
            <summary>
            Calcula la función de distribución acumulada (cdf).
            </summary>
            <param name="x">
            Valor para el cual se desea evaluar la cdf.
            </param>
            <returns>
            Valor de la cdf.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Probability.WeibullDistribution.INV(System.Double)">
            <summary>
            Calcula la función de distribución acumulada inversa.
            </summary>
            <param name="p">
            Valor de probabilidad.
            </param>
            <returns>
            Valor de la cdf inversa.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Probability.WeibullDistribution.Moments">
            <summary>
            Obtiene los primeros momentos centrales estadísticos 
            de la distribución.
            </summary>
            <returns>
            Momentos estadísticos [mean|variance|skewness|kurtosis ex].
            </returns>
        </member>
        <member name="T:DataAnalysis.Statistical.Summary">
            <summary>
            Implementa métodos de estadística descriptiva.
            </summary>
        </member>
        <member name="M:DataAnalysis.Statistical.Summary.Mean(DataAnalysis.Basic.RVector)">
            <summary>
            Calcula la media aritmética de los valores de un vector.
            </summary>
            <param name="vector">
            Vector real.
            </param>
            <returns>
            Media aritmética.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Summary.Mean(DataAnalysis.Basic.RMatrix)">
            <summary>
            Calcula la media aritmética de los valores de las 
            columnas de una matriz.
            </summary>
            <param name="matrix">
            Matriz real.
            </param>
            <returns>
            Medias aritméticas.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Summary.MeanGlobal(DataAnalysis.Basic.RMatrix)">
            <summary>
            Calcula la media aritmética de todos los valores
            de una matriz.
            </summary>
            <param name="matrix">
            Matriz real.
            </param>
            <returns>
            Media aritmética.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Summary.GeometricMean(DataAnalysis.Basic.RVector)">
            <summary>
            Calcula la media geométrica de los valores de un vector.
            </summary>
            <param name="vector">
            Vector real.
            </param>
            <returns>
            Media geométrica.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Summary.GeometricMean(DataAnalysis.Basic.RMatrix)">
            <summary>
            Calcula la media geométrica de los valores de las 
            columnas de una matriz.
            </summary>
            <param name="matrix">
            Matriz real.
            </param>
            <returns>
            Medias geométricas.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Summary.HarmonicMean(DataAnalysis.Basic.RVector)">
            <summary>
            Calcula la media armónica de los valores de un vector.
            </summary>
            <param name="vector">
            Vector real.
            </param>
            <returns>
            Media armónica.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Summary.HarmonicMean(DataAnalysis.Basic.RMatrix)">
            <summary>
            Calcula la media armónica de los valores de las 
            columnas de una matriz.
            </summary>
            <param name="matrix">
            Matriz real.
            </param>
            <returns>
            Medias armónicas.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Summary.TrimmedMean(DataAnalysis.Basic.RVector,System.Int32)">
            <summary>
            Calcula la media truncada de los valores de un vector.
            </summary>
            <param name="vector">
            Vector real.
            </param>
            <param name="trcValue">
            Porciento de truncamiento.
            </param>
            <returns>
            Media truncada.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Summary.TrimmedMean(DataAnalysis.Basic.RMatrix,System.Int32)">
            <summary>
            Calcula la media truncada de los valores de las 
            columnas de una matriz.
            </summary>
            <param name="matrix">
            Matriz real.
            </param>
            <param name="trcValue">
            Porciento de truncamiento.
            </param>
            <returns>
            Medias truncadas.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Summary.RMS(DataAnalysis.Basic.RVector)">
            <summary>
            Calcula la raíz de la media de los cuadrados de los
            valores de un vector.
            </summary>
            <param name="vector">
            Vector real.
            </param>
            <returns>
            Raíz cuadrada de la media de los cuadrados.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Summary.RMS(DataAnalysis.Basic.RMatrix)">
            <summary>
            Calcula la raíz de la media de los cuadrados de la
            norma de las filas de una matriz.
            </summary>
            <param name="matrix">
            Matriz real.
            </param>
            <returns>
            Raíz cuadrada de la media de los cuadrados de la norma.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Summary.Range(DataAnalysis.Basic.RVector)">
            <summary>
            Calcula el rango de los valores de un vector.
            </summary>
            <param name="vector">
            Vector real.
            </param>
            <returns>
            Rango.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Summary.Median(DataAnalysis.Basic.RVector)">
            <summary>
            Calcula la mediana de los valores de un vector.
            </summary>
            <param name="vector">
            Vector real.
            </param>
            <returns>
            Mediana.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Summary.Median(DataAnalysis.Basic.RMatrix)">
            <summary>
            Calcula la mediana de los valores de las 
            columnas de una matriz.
            </summary>
            <param name="matrix">
            Matriz real.
            </param>
            <returns>
            Medianas
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Summary.PeakNorm(DataAnalysis.Basic.RMatrix)">
            <summary>
            Calcual la norma Peak de los valores de las 
            filas de una matriz.
            </summary>
            <param name="matrix">
            Matriz real.
            </param>
            <returns>
            Norma.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Summary.Mode(DataAnalysis.Basic.RVector)">
            <summary>
            Calcula la moda de los valores de un vector.
            </summary>
            <param name="vector">
            Vector real.
            </param>
            <returns>
            Moda.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Summary.Mode(DataAnalysis.Basic.RMatrix)">
            <summary>
            Calcula la moda de los valores de las 
            columnas de una matriz.
            </summary>
            <param name="matrix">
            Matriz real.
            </param>
            <returns>
            Modas.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Summary.MeanDeviation(DataAnalysis.Basic.RVector)">
            <summary>
            Calcula la desviación media de los valores de un vector.
            </summary>
            <param name="vector">
            Vector real.
            </param>
            <returns>
            Desviación media.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Summary.MeanDeviation(DataAnalysis.Basic.RMatrix)">
            <summary>
            Calcula la desviación media de los valores de las
            columnas de una matriz.
            </summary>
            <param name="matrix">
            Matriz real.
            </param>
            <returns>
            Desviaciones medias.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Summary.MedianDeviationOfTheMean(DataAnalysis.Basic.RVector)">
            <summary>
            Calcula la desviación media con respecto a la
            media de los valores de un vector.
            </summary>
            <param name="vector">
            Vector real.
            </param>
            <returns>
            Desviación media de la media.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Summary.MedianDeviationOfTheMean(DataAnalysis.Basic.RMatrix)">
            <summary>
            Calcula la desviación media con respecto a la
            media de los valores de las columnas de una matriz.
            </summary>
            <param name="matrix">
            Matriz real.
            </param>
            <returns>
            Desviaciones medias de la media.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Summary.Variance(DataAnalysis.Basic.RVector,DataAnalysis.Statistical.Summary.BiasType)">
            <summary>
            Calcula la varianza de los valores de un vector.
            </summary>
            <param name="vector">
            Vector real.
            </param>
            <param name="btype">
            Tipo de sesgo.
            </param>
            <returns>
            Varianza.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Summary.Variance(DataAnalysis.Basic.RMatrix,DataAnalysis.Statistical.Summary.BiasType)">
            <summary>
            Calcual la varianza de los valores de las
            columnas de una matriz.
            </summary>
            <param name="matrix">
            Matriz real.
            </param>
            <param name="btype">
            Tipo de sesgo.
            </param>
            <returns>
            Varianzas.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Summary.StandardDeviation(DataAnalysis.Basic.RVector,DataAnalysis.Statistical.Summary.BiasType)">
            <summary>
            Calcula la desviación estándar de los valores
            de un vector.
            </summary>
            <param name="vector">
            Vector real.
            </param>
            <param name="btype">
            Tipo de sesgo.
            </param>
            <returns>
            Desviación estándar.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Summary.StandardDeviation(DataAnalysis.Basic.RMatrix,DataAnalysis.Statistical.Summary.BiasType)">
            <summary>
            Calcula la desviación estándar de los valores de las
            columnas de una matriz.
            </summary>
            <param name="matrix">
            Matriz real.
            </param>
            <param name="btype">
            Tipo de sesgo.
            </param>
            <returns>
            Desviaciones estándar.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Summary.CentralMoment(DataAnalysis.Basic.RVector,System.Int32)">
            <summary>
            Calcula el k-ésimo momento central sobre la media de los
            valores de un vector.
            </summary>
            <param name="vector">
            Vector real.
            </param>
            <param name="k">
            Orden del momento.
            </param>
            <returns>
            Momento central sobre la media.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Summary.CentralMoment(DataAnalysis.Basic.RMatrix,System.Int32)">
            <summary>
            Calcula el k-ésimo momento central sobre la media de los
            valores de las columnas de una matriz.
            </summary>
            <param name="matrix">
            Matriz real.
            </param>
            <param name="k">
            Orden del momento.
            </param>
            <returns>
            Momentos centrales sobre las medias.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Summary.Skewness(DataAnalysis.Basic.RVector,DataAnalysis.Statistical.Summary.BiasType)">
            <summary>
            Calcula la skewness de los valores de un vector.
            </summary>
            <param name="vector">
            Vector real.
            </param>
            <param name="btype">
            Tipo de sesgo.
            </param>
            <returns>
            Skewness.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Summary.Skewness(DataAnalysis.Basic.RMatrix,DataAnalysis.Statistical.Summary.BiasType)">
            <summary>
            Calcula la skewness de las columnas de una matriz.
            </summary>
            <param name="matrix">
            Matriz real.
            </param>
            <param name="btype">
            Tipo de sesgo.
            </param>
            <returns>
            Skewnesses.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Summary.KurtosisExcess(DataAnalysis.Basic.RVector,DataAnalysis.Statistical.Summary.BiasType)">
            <summary>
            Calcula la kurtosis de los valores de un vector.
            </summary>
            <param name="vector">
            Vector real.
            </param>
            <param name="btype">
            Tipo de sesgo.
            </param>
            <returns>
            Kurtosis.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Summary.KurtosisExcess(DataAnalysis.Basic.RMatrix,DataAnalysis.Statistical.Summary.BiasType)">
            <summary>
            Calcula las kurtosis de las columnas de una matriz.
            </summary>
            <param name="matrix">
            Matriz real.
            </param>
            <param name="btype">
            Tipo de sesgo.
            </param>
            <returns>
            Kurtosises.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Summary.Covariance(DataAnalysis.Basic.RVector,DataAnalysis.Basic.RVector,DataAnalysis.Statistical.Summary.BiasType)">
            <summary>
            Calcula la covarianza entre los valores de dos vectores.
            </summary>
            <param name="v1">
            Vector real.
            </param>
            <param name="v2">
            Vector real.
            </param>
            <param name="btype">
            Tipo de sesgo.
            </param>
            <returns>
            Covarianza.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Summary.Covariance(DataAnalysis.Basic.RMatrix,DataAnalysis.Statistical.Summary.BiasType)">
            <summary>
            Calcula la covarianza entre los valores de las columnas 
            de una matriz.
            </summary>
            <param name="matrix">
            Matriz real.
            </param>
            <param name="btype">
            Tipo de sesgo.
            </param>
            <returns>
            Matriz de covarianza.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Summary.Correlation(DataAnalysis.Basic.RVector,DataAnalysis.Basic.RVector)">
            <summary>
            Calcula la correlación entre los valores de dos vectores.
            </summary>
            <param name="v1">
            Vector real.
            </param>
            <param name="v2">
            Vector real.
            </param>
            <returns>
            Correlación.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Summary.Correlation(DataAnalysis.Basic.RMatrix)">
            <summary>
            Calcula la correlación entre los valores de las columnas 
            de una matriz.
            </summary>
            <param name="matrix">
            Matriz real.
            </param>
            <returns>
            Matriz de correlación.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Summary.GetPooledCovariance(DataAnalysis.Basic.RMatrix[],System.Int32[])">
            <summary>
            Calcula la matriz de covarianza conjunta de 
            diferentes grupos.
            </summary>
            <param name="amcov">
            Arreglo de matrices de covarianza de cada grupo.
            </param>
            <param name="ascount">
            Arreglo de cantidad de muestras por grupo.
            </param>
            <returns>
            Matriz de covarianza conjunta.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Summary.GetWithinScatterMatrix(DataAnalysis.Basic.RMatrix[])">
            <summary>
            Obtiene la matriz de dispersión de las muestras alrededor de los
            respectivos vectores de media por grupo.
            </summary>
            <param name="amsamp">
            Arreglo de matrices con las muestras de cada grupo.
            </param>
            <returns>
            Matriz de dispersión en clases.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Summary.GetBetweenScatterMatrix(DataAnalysis.Basic.RMatrix[])">
            <summary>
            Obtiene la matriz de dispersión de los vectores de media por clases
            alrededor de la media global.
            </summary>
            <param name="amsamp">
            Arreglo de matrices con las muestras de cada grupo.
            </param>
            <returns>
            Matriz de dispersión entre clases.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Summary.GetConditionalCov(DataAnalysis.Basic.RMatrix,System.Int32[],System.Int32[])">
            <summary>
            Calcula la matriz de covarianza condicional.
            </summary>
            <param name="S">
            Matriz de covarianza de las variables.
            </param>
            <param name="indVariables">
            Indices de las variables independientes.
            </param>
            <param name="depVariables">
            Indices de las variables dependientes.
            </param>
            <returns>
            Una RMatrix conteniendo la matriz de covarianza condicional.
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Summary.Histogram(DataAnalysis.Basic.RVector)">
            <summary>
            Calcula el histograma de frecuencia de un conjunto de datos.
            </summary>
            <param name="data">
            Vector real.
            </param>
            <returns>
            Valores de frecuencia. 
            [0,i] valores de frecuencia 
            [1,i] valores de la variable
            </returns>
        </member>
        <member name="M:DataAnalysis.Statistical.Summary.Histogram(DataAnalysis.Basic.RVector,System.Int32)">
            <summary>
            Calcula el histograma de frecuencia de un conjunto de datos.
            </summary>
            <param name="data">
            Vector real.
            </param>
            <param name="nBins">
            Cantidad de particiones.
            </param>
            <returns>
            Valores de frecuencia.
            [0,i] valores de frecuencia 
            [1,i] valores de la variable
            </returns>
        </member>
        <member name="T:DataAnalysis.Statistical.Summary.BiasType">
            <summary>
            Tipo de sesgo.
            </summary>
        </member>
    </members>
</doc>
